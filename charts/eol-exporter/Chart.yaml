apiVersion: v2
name: eol-prometheus-exporter
description: |
  End of life prometheus exporter.

  A Kubernetes's helm chart for a exporter that get information about end of life/support of products in order to be scrapped by Prometheus

  You must supply a valid configmap with a list of products with its versions:

  ```yaml
  # Get available products from:
  # https://endoflife.date/api/all.json
  # and find available cycles in:
  # https://endoflife.date/api/{product}.json
  eks:
    product: eks
    version: '1.30'
    comment: EKS
  django:
    product: django
    version: '5.1'
    comment: backend
  php:
    product: php
    version: '8.3'
    comment: dashboard application
    dockerfile: https://hub.docker.com/_/php
    notes: backend does not support a major version higher than 8
  python-allstar-elevator:
    product: python
    version: '3.12'
    dockerfile: https://github.com/saritasa-nest/allstar-elevator-backend/blob/develop/Dockerfile
  python-allstar-elevator-we:
    product: python
    version: '3.11'
    dockerfile: https://github.com/saritasa-nest/allstar-elevator-we-backend/blob/develop/Dockerfile
  ```

  Check https://github.com/saritasa-nest/saritasa-devops-tools-eol-exporter/blob/main/config.yaml.example
  for more example values.

  - Each product must have a field `version` with valid version as defined in: https://endoflife.date/api/{product}.json.
  - Each product must have a field `product` with valid product as defined in: https://endoflife.date/api/{product}.json.

  Optionally, you can add any extra field and it will be added as a label in the metrics

  In order to be able to watch the metrics in Prometheus you will need to use:
    1. Prometheus extra scrape config:

        The service name will be defined as: `$CHART_NAME.$NAMESPACE:$PORT`.
        By default this is: `eol-exporter.prometheus:8080`:

        ```yaml
        extraScrapeConfigs: |
        - job_name: prometheus-eol-exporter
          metrics_path: /metrics
          scrape_interval: 5m
          scrape_timeout: 30s
          static_configs:
            - targets:
              - eol-exporter.prometheus:8080
        ```
        Check https://github.com/saritasa-nest/saritasa-devops-tools-eol-exporter/blob/main/README.md#prometheus-server-config for more information

    2. PrometheusRule:

          Make sure your cluster has the CRDs for the PrometheusRule resource. These are part of the `monitoring.coreos.com/v1` API.
          Set the `prometheusRule` section to enable the default rules:

          ```yaml
          prometheusRule:
            enabled: true
          ```
          You can use the default alerts defined or override them if needed.

  The exporter provides three metrics:
  - `endoflife_expiration_timestamp_seconds`: Information about end of life (EOL) of products. Metric value is the UNIX timestamp of the eolDate label
  - `endoflife_expired`: Information about end of life (EOL) of products. Boolean value of 1 for expired products.
  - `endoflife_failed_configs`: Information about end of life (EOL) of products. Boolean value of 1 for products that failed to be fetched.

  Sample query to get if EKS EOL is less than 30 days:

  ```sh
  (endoflife_expiration_timestamp_seconds{name="eks"} - time()) > ((60*60*24) * 10) and (endoflife_expiration_timestamp_seconds{name="eks"} - time()) <= ((60*60*24) * 30)
  ```

  Sample query to get if EKS EOL has already happened:

  ```sh
  endoflife_expired{name="eks"} == 1
  ```

  Sample query to check if any product failed be fetched:

  ```bash
  endoflife_failed_configs{} == 1
  ```

# Application charts are a collection of templates that can be packaged into versioned archives
# to be deployed.
type: application

# The chart version. This version number should be incremented each time you make changes
# to the chart and its templates, including the app version.
version: 1.0.1
appVersion: 1.0.0

dependencies:
  # https://artifacthub.io/packages/helm/stakater/application?modal=values&compare-to=5.3.0
  - name: application
    version: 6.0.2
    repository: https://stakater.github.io/stakater-charts/
    alias: exporter
