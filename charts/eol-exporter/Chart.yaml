apiVersion: v2
name: eol-prometheus-exporter
description: |
  End of life prometheus exporter.

  A Kubernetes's helm chart for a exporter that get information about end of life/support of products in order to be scrapped by Prometheus

  You must supply a valid configmap with a list of products with its versions:

  ```yaml
  # Get available products from:
  # https://endoflife.date/api/all.json
  # and find available cycles in:
  # https://endoflife.date/api/{product}.json
  eks:
    current: '1.30'
    comment: EKS
  django:
    current: '5.1'
    comment: backend
  ```

  Check https://github.com/saritasa-nest/saritasa-devops-tools-eol-exporter/blob/main/config.yaml.example
  for more example values.

  Each product must have a field `current` with valid version as defined in: https://endoflife.date/api/{product}.json.

  A `comment` field is optional, and it will be added as a label in the metrics.

  A Prometheus extra scrape config must be configured in order to be able to watch the metrics in Prometheus.

  The service name will be defined as: `$CHART_NAME.$NAMESPACE:$PORT`.
  By default this is: `eol-exporter.prometheus:8080`:

  ```yaml
  extraScrapeConfigs: |
  - job_name: prometheus-eol-exporter
    metrics_path: /metrics
    scrape_interval: 5m
    scrape_timeout: 30s
    static_configs:
      - targets:
        - eol-exporter.prometheus:8080
  ```

  Check https://github.com/saritasa-nest/saritasa-devops-tools-eol-exporter/blob/main/README.md#prometheus-server-config for more information

  The exporter provides three metrics:
  - `endoflife_expiration_timestamp_seconds`: Information about end of life (EOL) of products. Metric value is the UNIX timestamp of the eolDate label
  - `endoflife_expired`: Information about end of life (EOL) of products. Boolean value of 1 for expired products.
  - `endoflife_failed_configs`: Information about end of life (EOL) of products. Boolean value of 1 for products that failed to be fetched.

  Sample query to get if EKS EOL is less than 30 days:

  ```sh
  (endoflife_expiration_timestamp_seconds{name="eks"} - time()) > ((60*60*24) * 10) and (endoflife_expiration_timestamp_seconds{name="eks"} - time()) <= ((60*60*24) * 30)
  ```

  Sample query to get if EKS EOL has already happened:

  ```sh
  endoflife_expired{name="eks"} == 1
  ```

  Sample query to check if any product failed be fetched:

  ```bash
  endoflife_failed_configs{} == 1
  ```

# Application charts are a collection of templates that can be packaged into versioned archives
# to be deployed.
type: application

# The chart version. This version number should be incremented each time you make changes
# to the chart and its templates, including the app version.
version: 0.1.0
appVersion: 0.1.0

dependencies:
  # https://artifacthub.io/packages/helm/stakater/application?modal=values&compare-to=5.1.0
  - name: application
    version: 5.1.0
    repository: https://stakater.github.io/stakater-charts/
    alias: exporter
