{{ if .Values.apps }}
{{- range $project := .Values.apps }}

{{- if $project.enabled }}
{{- range $component := $project.components }}

# initialize `projectEnvironment` variable with either `$project.environment` if it exists or with `$.Values.environment` otherwise
{{ $projectEnvironment := ternary $project.environment $.Values.environment (hasKey $project "environment") -}}

{{- $data := dict "project"           $project
                  "component"         $component
                  "environment"       $projectEnvironment }}
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{ include "tekton-apps.resourceName" (set $data "suffix" "trigger-role-binding") }}
  namespace: {{ $.Release.Namespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: default-trigger-role
subjects:
- kind: ServiceAccount
  name: {{ include "tekton-apps.resourceName" (set $data "suffix" "trigger-sa") }}
  namespace: {{ $.Release.Namespace }}
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{ include "tekton-apps.resourceName" (set $data "suffix" "triggger-cluster-role-binding") }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: default-trigger-clusterrole
subjects:
- kind: ServiceAccount
  name: {{ include "tekton-apps.resourceName" (set $data "suffix" "trigger-sa") }}
  namespace: {{ $.Release.Namespace }}
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{ include "tekton-apps.resourceName" (set $data "suffix" "build-pipeline-role-binding") }}
  namespace: {{ $.Release.Namespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: default-build-pipeline-role
subjects:
- kind: ServiceAccount
  name: {{ include "tekton-apps.resourceName" (set $data "suffix" "build-pipeline-sa") }}
  namespace: {{ $.Release.Namespace }}
{{- end }} # range component
{{- end }} # if project.enabled
{{- end }} # range project
{{- end }} # if apps