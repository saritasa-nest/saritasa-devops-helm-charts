# -- environment these apps are handling
# possible values: dev, staging, prod
environment: ""

# or main, staging (for fixed merges into staging) or like release (if we use gitflow and semantic versioning)
# you can overwrite it in apps[project].components[component].eventlistener.filter
# which could be set to something like this
# filter: (body.ref.startsWith('refs/heads/develop') || body.ref.startsWith('refs/heads/release'))
# this is used to filter branches in git getting push events before starting the pipelinerun
gitBranchPrefixes:
  - develop

# -- storage class for PVCs associated with the apps
storageClassName: gp2

# -- node selector for event listener pod
nodeSelector: ""
#  ops: 'true'

# -- aws configuration
aws: {}
  # region: "us-west-2"
  # dns: site.com

# -- default docker registry
# ex: XXX.dkr.ecr.us-west-2.amazonaws.com
defaultRegistry: ""

slack:
  # -- channel prefix
  prefix: client
  # -- channel suffix
  suffix: ci
  # -- slack notification images (s3 bucket prefix)
  imagesLocation: https://saritasa-rocks-ci.s3.us-west-2.amazonaws.com  # this is s3 bucket with public images that we upload through terraform code (!!! NO SLASH at the end pls)


argocd:
  # -- argocd public URL
  server: deploy.site.com
  # -- argocd root path (web URL root path)
  rootPath: "/"

eventlistener:
  # -- should we enable eventlistener for tekton triggers?
  enableWebhookSecret: true
  # -- unique suffix (in case there are several eventlisteners in the cluster)
  suffix: ""
  # -- should we add additional overlays for each app running under trigger?
  extraOverlays: []
    #   - key: truncated_sha
    #     expression: "body.head_commit.id.truncate(7)"
    #   - key: branch_name
    #     expression: "body.ref.split('/')[2]"


# -- list of projects and the project's apps to be triggered
apps: []
  # - project: xxx
  #   enabled: true
  #   argocd:
  #     labels:
  #       created-by: xxx
  #       ops-main: xxx
  #       ops-secondary: xxx
  #       pm: xxx
  #       tm: xxx
  #     namespace: test
  #   mailList: xxx@saritasa.com
  #   devopsMailList: devops+xxx@saritasa.com
  #   jiraURL: https://saritasa.atlassian.net/browse/xxx
  #   tektonURL: https://tekton.site.com/#/namespaces/ci/pipelineruns
  #   slack: client-xxx-ci
  #   kubernetesRepository:
  #     name: xxx-kubernetes-aws
  #     branch: main
  #     url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git

  #   components:
  #     - name: backend
  #       repository: xxx-backend
  #       argocd:
  #         ignoreDeploymentReplicasDiff: true
  #       pipeline: buildpack
  #       applicationURL: https://api.site.com
  #       eventlistener:
  #         template: buildpack-backend-build-pipeline-trigger-template
  #       extraBuildConfigParams: # what additional K/V pairs you want to add into the build-pipeline-config configmap
  #         KEY: value
  #       triggerBinding:
  #         - name: docker_registry_repository
  #           value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/backend
  #         - name: buildpack_builder_image
  #           value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/builder:v1
  #         - name: buildpack_runner_image
  #           value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/runner:v1
  #         - name: buildpack_config_filename
  #           value: buildpack1.yml
  #         - name: project_config_filename
  #           value: project1.toml

  #     - name: frontend
  #       repository: xxx-frontend
  #       argocd:
  #         ignoreDeploymentReplicasDiff: true
  #       pipeline: buildpack
  #       applicationURL: https://site.com
  #       eventlistener:
  #         enableWebhookSecret: false
  #         filter: (body.ref.startsWith('refs/heads/develop') || body.ref.startsWith('refs/heads/release/'))
  #         template: buildpack-frontend-build-pipeline-trigger-template
  #         extraOverlays: []
  #         # - key: truncated_sha
  #         #   expression: "body.head_commit.id.truncate(7)"
  #         eventTypes: ["pull_request", "push"]
  #       extraBuildConfigParams: {}
  #       triggerBinding:
  #         - name: docker_registry_repository
  #           value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/frontend
  #         - name: buildpack_builder_image
  #           value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/builder:full
  #         - name: buildpack_runner_image
  #           value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/runner:full
  #         - name: source_subpath
  #           value: dist/web
  #         - name: buildpack_config_filename
  #           value: buildpack2.yml
  #         - name: project_config_filename
  #           value: project2.toml

  #     - name: wordpress
  #       repository: xxx-wordpress
  #       pipeline: wordpress-build-pipeline
  #       applicationURL: https://site.com
  #       argocd:
  #         # ignoreDeploymentReplicasDiff: true
  #         source:
  #           targetRevision: 15.2.4
  #       wordpress:
  #         imageTag: 6.0.2
  #         resources:
  #           requests:
  #             cpu: 100m
  #             memory: 128Mi
  #           limits:
  #             cpu: 1000m
  #             memory: 1G
  #         nodeSelector:
  #           apps: 'true'
  #         podSecurityContext:
  #           enabled: false
  #           fsGroup: 101
  #         ci:
  #           enabled: false
  #           repository_ssh_url: --branch environment git@github.com:saritasa-nest/xxx-wordpress.git
  #           branch: environment
  #         externalDatabase:
  #           host: xxx.rds.amazonaws.com
  #           user: xxx-environment-userwp
  #           existingSecret: xxx-wordpress-environment-externaldb
  #           database: xxx-environment-wp
  #       eventlistener:
  #         enableWebhookSecret: false
  #         filter: (body.ref.startsWith('refs/heads/develop') || body.ref.startsWith('refs/heads/release/'))
  #         template: wordpress-build-pipeline-trigger-template
  #         extraOverlays: []
  #         # - key: truncated_sha
  #         #   expression: "body.head_commit.id.truncate(7)"
  #         eventTypes: ["pull_request", "push"]

# -- run job that will mount created (but not bound) PVCs in order for argocd to mark the app as "healthy"
runPostInstallMountPvcJob: false

serviceAccount:
  # The name of the service account to use.
  name: "build-bot-sa"
  # If we create several tekton-apps in the cluster we don't want to recreate the service account.
  create: 'true'

# -- Comma-separated list of IP masks to bypass access limitation
# (if applicable, ex. for legacy projects protected with basic authentication)
whitelistIP: ""
