apiVersion: v2
name: saritasa-tekton-pipelines

type: application

# This is the chart version. This version number should be incremented each time you make changes
# to the chart and its templates, including the app version.
# Versions are expected to follow Semantic Versioning (https://semver.org/)
version: 0.1.31

maintainers:
  - url: https://www.saritasa.com/
    name: Saritasa

dependencies:
  - name: saritasa-tekton
    repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
    version: ~0.1.x
    condition: saritasa-tekton.enabled

description: |
  A Helm chart for Tekton Pipelines

  Implements:
  - common tekton tasks
  - common tekton pipelines
  - common tekton trigger templates
  - common tekton trigger bindings

  Implemented pipelines include:
  - buildpack based pipelines based on generator template (php, python, frontend, nodejs, ruby, go)
  - kaniko pipeline
  - wordpress pipeline

  ## `example usage with argocd`

  Install the chart:

  ```
  helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
  ```

  then if you want to support only frontend and django pipelines based on buildpack without any script modifications:

  ```yaml
  apiVersion: argoproj.io/v1alpha1
  kind: Application
  metadata:
    name: tekton-pipelines
    namespace: argo-cd
    finalizers:
    - resources-finalizer.argocd.argoproj.io
    annotations:
      argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
      argocd.argoproj.io/sync-wave: "60"
  spec:
    destination:
      server: https://kubernetes.default.svc
      namespace: ci
    project: default
    source:
      chart: saritasa-tekton-pipelines
      helm:
        values: |
          buildpacks:
            enabled: true
            generate:
              buildpackFrontendBuildPipeline:
                enabled: true

              buildpackDjangoBuildPipeline:
                enabled: true

      repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      targetRevision: "0.1.4"
    syncPolicy:
      automated:
        prune: true
        selfHeal: true
      syncOptions:
        - CreateNamespace=true
  ```

  If you want to modify the behavior of the build step you can easily do that by redefining steps you want to run prior to running the `build` step
  of the associated buildpack pipeline. You can create multiple versions of pipelines as a result. Just make sure to give them a different name

  an example:

  ```yaml
  buildpacks:
    enabled: true
    generate:
      buildpackFrontendBuildPipelineNew:
        name: buildpack-frontend-build-pipeline-new
        enabled: false
        buildTaskName: buildpack-frontend-new
        buildTaskSteps:
          - name: hello1
            image: node:16
            imagePullPolicy: IfNotPresent
            workingDir: $(resources.inputs.app.path)
            script: |
              #!/bin/bash
              echo "hello world1"

          - name: hello2
            image: node:16
            imagePullPolicy: IfNotPresent
            workingDir: $(resources.inputs.app.path)
            script: |
              #!/bin/bash
              echo "hello world2"
  ```

  If you want to modify Kaniko build arguments, you can pass `kaniko_extra_args` parameter to `kaniko-pipeline`.
  For example, if you want to pass `BASE_IMAGE` build argument value to be used in Dockerfile you can add following line
  to specific project trigger-binding:
  ```yaml
  - name: kaniko_extra_args
    value: --build-arg=BASE_IMAGE=965067289393.dkr.ecr.us-west-2.amazonaws.com/saritasa/legacy/php:php71-smart-screen-base
  ```
