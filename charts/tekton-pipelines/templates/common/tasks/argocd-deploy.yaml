apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: argocd-deploy
  namespace: {{ .Release.Namespace }}

spec:
  description: >-
    This task syncs an ArgoCD application with optional revision and flags
    (e.g., helm-set-string) and waits for the sync to complete.

  params:
    - name: application
      type: string
      description: name of the argocd application we're going to deploy/sync

    - name: revision
      type: string
      description: the revision to sync to (optional)
      default: ""

    - name: flags
      type: string
      description: additional flags to pass to argocd app sync command (optional)
      default: ""

  stepTemplate:
    envFrom:
      - configMapRef:
          name: $(params.application)-build-pipeline-config # project specific values
      - secretRef:
          name: $(params.application)-argocd-secret  # used for authentication (username/password or auth token)
  steps:
    - name: deploy
      image: cfmanteiga/alpine-bash-curl-jq
      imagePullPolicy: {{ .Values.imagePullPolicy }}
      script: |
        #!/usr/bin/env bash
        set +x

        # Install kubectl
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        mv kubectl /usr/local/bin/

        # Install argocd CLI
        curl --silent --location -o /usr/local/bin/argocd {{ .Values.images.argocd_cli }}
        chmod +x /usr/local/bin/argocd

        # connect to private service
        # instead of connecting through a public ingress
        yes | argocd login argo-cd-argocd-server.argo-cd \
          --insecure \
          --grpc-web \
          --grpc-web-root-path $ARGOCD_ROOT_PATH \
          --username $ARGOCD_USERNAME \
          --password $ARGOCD_PASSWORD \
          --http-retry-max 3

        # Update application values if flags contain helm-set-string for repositoryRevision
        if [ -n "$(params.flags)" ] && echo "$(params.flags)" | grep -q "wordpress.repositoryRevision"; then
          # Extract the branch value from flags
          BRANCH=$(echo "$(params.flags)" | sed -n 's/.*wordpress.repositoryRevision=\([^ ]*\).*/\1/p')
          echo "Updating WordPress repositoryRevision to: $BRANCH"

          # Get current Application spec
          kubectl get application $(params.application) -n argo-cd -o json > /tmp/app.json

          # Update REVISION in values using jq
          NEW_VALUES=$(jq --arg branch "$BRANCH" -r '.spec.source.helm.values | gsub("REVISION=\"[^\"]*\""; "REVISION=\"" + $branch + "\"")' /tmp/app.json)

          # Create patch JSON using jq (avoids heredoc issues in YAML)
          echo "$NEW_VALUES" | jq -Rs . | jq -n --arg values "$(cat)" '{spec: {source: {helm: {values: $values}}}}' > /tmp/patch.json

          # Apply patch using kubectl
          echo "Updating Application with new values..."
          kubectl patch application $(params.application) -n argo-cd --type=merge --patch-file=/tmp/patch.json
          echo "Application updated successfully"
        elif [ -n "$(params.flags)" ]; then
          # For other flags, use app set
          SET_CMD="argocd app set $(params.application) --server=argo-cd-argocd-server.argo-cd $(params.flags)"
          echo "Executing: $SET_CMD"
          eval $SET_CMD
        fi

        # Build sync command
        SYNC_CMD="argocd app sync $(params.application) --server=argo-cd-argocd-server.argo-cd --force"

        echo "Executing: $SYNC_CMD"
        eval $SYNC_CMD

        argocd app wait $(params.application) \
          --server=argo-cd-argocd-server.argo-cd \
          --health=true \
          --operation=true

        synced=`argocd app get $(params.application) --server=argo-cd-argocd-server.argo-cd -o json | jq -r '.status.sync.status' | awk '{print tolower($1)}'`
        healthy=`argocd app get $(params.application) --server=argo-cd-argocd-server.argo-cd -o json | jq -r '.status.health.status' | awk '{print tolower($1)}'`

        [[ "$synced" == "synced" ]] && [[ "$healthy" == "healthy" ]] && echo "Sync completed succcessfully. App is healthy!" || (echo "Sync failed" && exit 1)
