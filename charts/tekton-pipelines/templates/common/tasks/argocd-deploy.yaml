apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: argocd-deploy
  namespace: {{ .Release.Namespace }}

spec:
  description: >-
    This task syncs an ArgoCD application with optional revision and flags
    (e.g., helm-set-string) and waits for the sync to complete.

  params:
    - name: application
      type: string
      description: name of the argocd application we're going to deploy/sync

    - name: revision
      type: string
      description: the revision to sync to (optional)
      default: ""

    - name: flags
      type: string
      description: additional flags to pass to argocd app sync command (optional)
      default: ""

  stepTemplate:
    envFrom:
      - configMapRef:
          name: $(params.application)-build-pipeline-config # project specific values
      - secretRef:
          name: $(params.application)-argocd-secret  # used for authentication (username/password or auth token)
  steps:
    - name: deploy
      image: cfmanteiga/alpine-bash-curl-jq
      imagePullPolicy: {{ .Values.imagePullPolicy }}
      script: |
        #!/usr/bin/env bash
        set +x
        curl --silent --location -o /usr/local/bin/argocd {{ .Values.images.argocd_cli }}
        chmod +x /usr/local/bin/argocd

        # connect to private service
        # instead of connecting through a public ingress
        yes | argocd login argo-cd-argocd-server.argo-cd \
          --insecure \
          --grpc-web \
          --grpc-web-root-path $ARGOCD_ROOT_PATH \
          --username $ARGOCD_USERNAME \
          --password $ARGOCD_PASSWORD \
          --http-retry-max 3

        # Build sync command with optional parameters
        SYNC_CMD="argocd app sync $(params.application) --server=argo-cd-argocd-server.argo-cd"

        # Add revision if provided
        if [ -n "$(params.revision)" ]; then
          SYNC_CMD="$SYNC_CMD --revision $(params.revision)"
        fi

        # Add additional flags if provided
        if [ -n "$(params.flags)" ]; then
          SYNC_CMD="$SYNC_CMD $(params.flags)"
        fi

        echo "Executing: $SYNC_CMD"
        eval $SYNC_CMD

        argocd app wait $(params.application) \
          --server=argo-cd-argocd-server.argo-cd \
          --health=true \
          --operation=true

        synced=`argocd app get $(params.application) --server=argo-cd-argocd-server.argo-cd -o json | jq -r '.status.sync.status' | awk '{print tolower($1)}'`
        healthy=`argocd app get $(params.application) --server=argo-cd-argocd-server.argo-cd -o json | jq -r '.status.health.status' | awk '{print tolower($1)}'`

        [[ "$synced" == "synced" ]] && [[ "$healthy" == "healthy" ]] && echo "Sync completed succcessfully. App is healthy!" || (echo "Sync failed" && exit 1)
