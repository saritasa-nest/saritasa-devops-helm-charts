apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: slack-notification
  namespace: {{ .Release.Namespace }}

spec:
  description: >-
    Send slack notification with various information about pipeline progress/result.
    You can see my question about dealing with task status here: https://github.com/tektoncd/pipeline/issues/3762

  params:
    {{ include "pipeline.defaultParams" . | nindent 4 }}

    - name: status
      type: string
      description: status of the deployment (i.e. "succeeded")

  results:
    - name: failed_info
      description: Info about failed build.
    - name: failed_task
      description: Name of a failed task.
    - name: failed_step
      description: Name of a failed step.
    - name: failed_pod_name
      description: Name of a failed pod.
    - name: logs
      description: Failed pod logs.

  stepTemplate:
    envFrom:
      - configMapRef:
          name: $(params.application)-build-pipeline-config
      - secretRef:
          name: $(params.application)-slack-secret  # used for webhook URL

    env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            fieldPath: metadata.name
    volumeMounts:
      - name: podinfo
        mountPath: /etc/podinfo

  steps:
    - name: get-failed-info
      image: {{ .Values.images.kubectl | default "bitnamilegacy/kubectl:latest"}}
      imagePullPolicy: {{ .Values.imagePullPolicy }}
      script: |
        #!/bin/sh

        pipelinerun_name=$(awk -F= '$1 == "tekton.dev/pipelineRun" {gsub(/"/, "", $2); print $2}' /etc/podinfo/labels)

        # Get names of taskRuns from the pipelineRun
        taskruns=$(kubectl -n ci get pipelinerun $pipelinerun_name -o json | jq -r '.status.childReferences[]?.name')

        # Get names of failed pod, task and step from the taskRuns
        for taskrun_name in $taskruns; do
          kubectl -n ci get taskrun $taskrun_name -o json |
          jq -r 'select(.status.conditions[0].reason == "Failed") |
          { pod: .status.podName, 
            task: .metadata.labels["tekton.dev/pipelineTask"], 
            step: (.status.steps[]? | select(.terminated.reason == "Error" and (.terminationReason != "Skipped")) | .name)}' \
          >> $(results.failed_info.path)
        done

        if [ -s "$(results.failed_info.path)" ]; then
          failed_pod_name=$(cat $(results.failed_info.path) | jq '.pod' -r)
          failed_task=$(cat $(results.failed_info.path) | jq '.task' -r)
          failed_step=$(cat $(results.failed_info.path) | jq '.step' -r)   

          echo $failed_task > $(results.failed_task.path)
          echo $failed_step > $(results.failed_step.path)
          echo $failed_pod_name > $(results.failed_pod_name.path)
        fi

    - name: get-failed-logs
      image: {{ .Values.images.curl | default "curlimages/curl:latest"}}
      imagePullPolicy: {{ .Values.imagePullPolicy }}
      script: |
        #!/bin/sh

        failed_pod_name=$(cat $(results.failed_pod_name.path))
        failed_step=$(cat $(results.failed_step.path))

        if [ -n "$failed_pod_name" ] && [ -n "$failed_step" ]; then
          # Fetch logs and save info about the failed task
          echo "Fetching logs for failed step: ${failed_step}"
          until [ -s "$(results.logs.path)" ]
          do
          sleep 5
          curl -sk "https://tekton-logs-server.ci.svc.cluster.local/logs/ci/${failed_pod_name}/step-${failed_step}" | tail -c 1982 > $(results.logs.path)
          done
        else
          echo 'No failed taskRuns'
        fi

    - name: notification
      image: {{ .Values.images.slack | default "cloudposse/slack-notifier:latest"}}
      imagePullPolicy: {{ .Values.imagePullPolicy }}
      args:
        # The commit message is provided as a script argument to avoid
        # parameter interpolation which can result in code injection
        # when the value is controlled by a user:
        # - https://github.com/tektoncd/catalog/blob/main/recommendations.md#dont-use-interpolation-in-scripts-or-string-arguments
        # - https://github.com/tektoncd/community/blob/main/teps/0146-parameters-in-script.md
        - $(params.head_commit_message)
      script: |
        #!/bin/sh

        # The commit message is provided as a script argument to avoid
        # parameter interpolation which can result in code injection
        # when the value is controlled by a user:
        # - https://github.com/tektoncd/catalog/blob/main/recommendations.md#dont-use-interpolation-in-scripts-or-string-arguments
        # - https://github.com/tektoncd/community/blob/main/teps/0146-parameters-in-script.md
        head_commit_message="$1"

        # tekton injects these labels into pods
        # https://tekton.dev/docs/pipelines/labels/
        # so we can easily extract items
        # podinfo is mounted in TriggerTemplate
        # extract tekton.dev/pipelineRun from pod labels
        pipelinerun_name=$(awk -F= '$1 == "tekton.dev/pipelineRun" {gsub(/"/, "", $2); print $2}' /etc/podinfo/labels)
        status="`echo $(params.status) | tr '[:upper:]' '[:lower:]'`"

        echo "result: $status"

        if [ "$status" = "succeeded" ]; then
          color="good"
          thumb_url="$(params.pusher_avatar)"
          text_status="The latest changes to $(params.environment) have been deployed successfully"
        else
          color="danger"
          thumb_url="$SLACK_FAILURE_ICON_URL"
          text_status="The latest changes to $(params.environment) failed to be deployed"
          failed_task=$(cat $(results.failed_task.path))
          failed_step=$(cat $(results.failed_step.path))
          failed="Task: $failed_task, Step: $failed_step"
          error_msg=$(cat $(results.logs.path))
        fi

        argo_app_url="$ARGOCD_SERVER/$ARGOCD_ROOT_PATH/applications/$(params.application)"
        argo_app_url=$(echo $argo_app_url | sed 's/\/\//\//g')
        argo_app_url="https://$argo_app_url"

        # Get the value from a script argument (avoiding code injection, see the comment for step's `args`)
        # History: https://github.com/saritasa-nest/saritasa-devops-helm-charts/pull/160
        head_commit_message="$1"

        # Preparing jira links
        # We are using grep as ash doesn't support regex test
        jira_task=$(echo "$head_commit_message" | grep -oE '[A-Z0-9]+-[0-9]+' | head -n 1 )
        if [ "$jira_task" != "" ];
        then
          echo "Found $jira_task jira task, preparing link"
          head_commit_message=$(echo "$head_commit_message" | sed "s|$jira_task|\<https://saritasa.atlassian.net/browse/$jira_task/\|$jira_task\>|")
        else
          echo "No jira task found";
        fi

        slack-notifier \
        -user_name "Tekton" \
        -icon_emoji ":white_check_mark:" \
        -color "$color" \
        -author_name "[$(params.application)] by $(params.pusher_name)" \
        -author_link "$(params.pusher_url)" \
        -title "$head_commit_message" \
        -text "$text_status" \
        -thumb_url "$thumb_url" \
        -field1_title "Open Application" \
        -field1_value "<$APPLICATION_URL|$APPLICATION_URL>" \
        -field1_short false \
        -field2_title "Branch" \
        -field2_value "$(echo $(params.branch) | sed -r 's/\brefs\/\bheads\///g')" \
        -field2_short true \
        -field3_title "Revision" \
        -field3_value "<$(params.repository_url)/commit/$(params.sha)|$(params.sha)>" \
        -field3_short true \
        -field4_title "Manage" \
        -field4_value "<$(params.repository_url)|Github> | <$(params.repository_url)/issues|Issues> | <$JIRA_PROJECT_URL|Jira> | <$TEKTON_URL/$pipelinerun_name|CI> | <$argo_app_url|CD> " \
        -field4_short false \
        -field5_title "Failure info" \
        -field5_value "$failed" \
        -field5_short false \
        -field6_title "Traceback" \
        -field6_value "$error_msg" \
        -field6_short false
