{{ if .Values.sentry.enabled }}
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: sentry-release
  namespace: {{ .Release.Namespace }}

spec:
  description: >-
    The task prepares and deploys sentry release for projects, which exist in Sentry.

  workspaces:
    - name: source

  params:
    {{- include "params.app" (dict "target" "task") | nindent 4 }}
    {{- include "params.git" (dict "target" "task") | nindent 4 }}
    {{- include "params.sentry" (dict "target" "task") | nindent 4 }}

  stepTemplate:
    env:
      - name: SENTRY_AUTH_TOKEN
        valueFrom:
          secretKeyRef:
            name: {{ .Values.sentry.authTokenSecret }}
            key: {{ .Values.sentry.authTokenSecretKey }}
      - name: SENTRY_ORG
        value: {{ .Values.sentry.org }}
      - name: SENTRY_URL
        value: {{ .Values.sentry.url }}
      - name: SENTRY_LOG_LEVEL
        value: "debug"

  steps:
    - name: prepare
      image: {{ $.Values.images.bash | default "docker.io/library/bash:latest" }}
      imagePullPolicy: {{ $.Values.imagePullPolicy }}
      script: |
          #!/usr/bin/env bash
          set -e
          chown -R "65532:65532" "$(workspaces.source.path)"
      securityContext:
        privileged: true
    - name: release
      image: {{ .Values.images.sentry_cli }}
      imagePullPolicy: {{ .Values.imagePullPolicy }}
      workingDir: $(workspaces.source.path)
      securityContext:
        runAsNonRoot: true
        runAsUser: 65532
        runAsGroup: 65532
      script: |
        #!/usr/bin/env sh
        set +x

        PROJECT_NAME="$(params.sentry_project_name)"
        PROJECT=$(sentry-cli projects list | awk -v col=4 '{print $col}' | grep ^${PROJECT_NAME}$)
        if [[ -z "${PROJECT}" ]]; then
          echo "Didn't find '${PROJECT_NAME}' project in Sentry. Skip this step."
          exit 0
        else
          echo "Found '${PROJECT_NAME}' project in Sentry, proceed with release."
        fi

        # sentry-cli uses last repository commit sha1 as proposed version, i.e. 7e734134fb23497e68976784f7eaa106c4a8f3a8
        # https://docs.sentry.io/product/cli/releases/#creating-releases
        VERSION=$(sentry-cli releases propose-version)
        if [[ -z "${VERSION}" ]]; then
          echo "Failed fetch revision, using incomming commit param"
          VERSION=$(params.sha)
        fi

        sentry-cli releases new -p ${PROJECT_NAME} ${VERSION}
        sentry-cli releases set-commits --auto --ignore-missing -p ${PROJECT_NAME} ${VERSION}

        # needs to upload source maps for frontend projects from `/workspace/source/sourcemaps/` tekton build dir to Sentry,
        # they are generated and saved to `/workspace/source/sourcemaps/` dir at the end of `build-static` step
        if [[ -d "$(workspaces.source.path)/$(params.sentry_sourcemaps_dir)" ]]; then
          echo "Upload source maps for 'frontend' project"
          sentry-cli releases files -p ${PROJECT_NAME} ${VERSION} upload-sourcemaps $(workspaces.source.path)/$(params.sentry_sourcemaps_dir)
        else
          echo "That is not 'frontend' project, no source maps should be uploaded"
        fi

        sentry-cli releases deploys -p ${PROJECT_NAME} ${VERSION} new -e $(params.environment)

        # mark release as finalized and released, before this step it is marked as `unreleased`
        # https://docs.sentry.io/product/cli/releases/#finalizing-releases
        sentry-cli releases finalize -p ${PROJECT_NAME} ${VERSION}
{{ end }}
