{{ define "task.post-deploy" }}
---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: {{ .namePrefix }}-post-deploy
  namespace: {{ .namespace }}

spec:
  description: >-
    Task performs custom post deploy actions, which are set from values.yaml
    (for ex. run selenium tests or etc)

  params:
    {{- include "params.app" (dict "target" "task") | nindent 4 }}
    {{- include "params.git" (dict "target" "task") | nindent 4 }}
    {{- include "params.registry" (dict "target" "task") | nindent 4 }}
    {{- include "params.buildpack" (dict "target" "task") | nindent 4 }}
    {{- include "params.sentry" (dict "target" "task") | nindent 4 }}

  workspaces:
    - name: app-source

  stepTemplate:
    envFrom:
      - configMapRef:
          name: $(params.application)-build-pipeline-config # project specific values

  steps:
    - name: argo-events
      image: badouralix/curl-jq
      imagePullPolicy: IfNotPresent
      script: |
        #!/usr/bin/env sh

        # Env contains params passed from '*-build-pipeline-config' ConfigMap,
        # here we convert them to lowercased json and pass to JSON_PAYLOAD as 'extra'.

        # This workflow allows us to pass any dynamic custom parameters needed to argo-events
        # sensors without changing tekton helm charts all the time, so any project may have
        # any custom parameter, which will be passed to argo-events and then corresponding Sensor
        # would be triggered based on this 'extra' params.
        EXTRA=$(jq -n env | jq 'walk(if type=="object" then with_entries(.key|=ascii_downcase) else . end)')
        JSON_TEMPLATE='{
          "namespace": "$(params.namespace)",
          "project": "$(params.project)",
          "environment": "$(params.environment)",
          "application": "$(params.application)",
          "sha": "$(params.sha)",
          "extra": %s
        }'
        JSON_PAYLOAD=$(printf "$JSON_TEMPLATE" "$EXTRA")

        echo "Payload: $JSON_PAYLOAD"

        OUTPUT=$(curl -s -o /dev/null -w httpcode=%{http_code} --location \
          --request POST "build-succeed-eventsource-svc.argo-events.svc.cluster.local:12000/build-succeed" \
          --header 'Content-Type: application/json' \
          --data-raw "$JSON_PAYLOAD")

        STATUS_CODE=$(echo "${OUTPUT}" | sed -e 's/.*\httpcode=//')
        if [ ${STATUS_CODE} -ne 204 ] && [ ${STATUS_CODE} -ne 200 ]; then
            echo "Curl operation/command failed due to server return code - ${STATUS_CODE}"
            exit 0
        fi

        echo "Sent 'build-succeed' webhook"

  # insert customized steps as defined in the values.yaml of the helm chart
  {{ if .extraSteps }}
    {{ .extraSteps | toYaml | nindent 4}}
  {{ end }}
{{- end }}
