{{ if .Values.kaniko.enabled }}
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: kaniko-build-pipeline
  namespace: {{ .Release.Namespace }}
spec:
  description: >-
    Pipeline will only build the image utilizing dockerfile using kaniko and then send notification via slack.
    The deployment is done via argocd

  params:
    {{ include "pipeline.defaultParams" . | nindent 4 }}
    {{ include "pipeline.defaultDockerKubernetesParams" . | nindent 4 }}

    - name: project
      type: string
      description: name of the project, which component is deployed

    - name: namespace
      type: string
      description: project's namespace

    - name: docker_file
      type: string
      default: Dockerfile
      description: location of the dockerfile, should be Dockerfile if it is in the root of the repository

    - name: docker_context
      type: string
      default: "."
      description: dockerfile context path

    - name: kaniko_extra_args
      type: string
      description: extra args to be passed into kaniko builder
      default: ''

    - name: sentry_project_name
      type: string
      description: name of the project in Sentry

    - name: sourcemaps_dir
      type: string
      description: name of the dir where frontend sourcemaps would be stored in workspace
      default: "sourcemaps"

  workspaces:
    - name: app-source
    - name: k8s-source

  tasks:
    - name: kaniko
      taskRef:
        name: kaniko
      # results:
      #   - name: app_image_digest
      params:
        - name: application
          value: "$(params.application)"
        - name: docker_registry
          value: $(params.docker_registry)
        - name: environment
          value: "$(params.environment)"
        - name: docker_file
          value: "$(params.docker_file)"
        - name: docker_context
          value: "$(params.docker_context)"
        - name: extra_args
          value:
            - $(params.kaniko_extra_args)
        - name: app_image
          value: "$(params.app_image)"
      workspaces:
        - name: source
          workspace: app-source

    - name: git-clone-k8s-source
      taskRef:
        name: git-clone
      workspaces:
        - name: output
          workspace: k8s-source
      params:
        - name: url
          value: $(params.kubernetes_repository_ssh_url)
        - name: revision
          value: $(params.kubernetes_branch)
      podTemplate:
        securityContext:
          fsGroup: 65532

    - name: kustomize
      taskRef:
        name: kustomize
      workspaces:
        - name: source
          value: k8s-source
      params:
        - name: application
          value: "$(params.application)"
        - name: image
          value: "$(params.app_image)"
        - name: kustomize_overlay_path
          value: "$(params.kubernetes_repository_kustomize_path)"
        - name: kubernetes_branch
          value: "$(params.kubernetes_branch)"
        - name: environment
          value: "$(params.environment)"
      runAfter:
        - kaniko

    - name: deploy
      taskRef:
        name: argocd-deploy
      params:
        - name : application
          value: "$(params.application)"
      runAfter:
        - kustomize

  {{ if .Values.sentry.enabled }}
    {{ include "pipeline.sentryRelease" . | nindent 4 }}
  {{ end }}

  {{ include "pipeline.postDeploy" (dict "name" "kaniko-post-deploy" "sentry_enabled" .Values.sentry.enabled) | nindent 4 }}

  {{ include "pipeline.finalNotification" . | nindent 2 }}

{{ end }}
