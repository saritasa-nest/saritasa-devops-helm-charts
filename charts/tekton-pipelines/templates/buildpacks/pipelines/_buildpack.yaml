{{- define "pipeline.buildpack" -}}
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: {{ .pipeline.name }}
  namespace: {{.namespace }}
spec:
  description: |-
    {{- .pipeline.description | default (printf "Pipeline will only build the image utilizing %s task and then send notification via slack. The deployment is done via argocd" (.pipeline.buildTaskName)) | nindent 4}}

  params:
    {{ include "pipeline.defaultParams" . | nindent 4 }}
    {{ include "pipeline.defaultDockerKubernetesParams" . | nindent 4 }}

    - name: project
      type: string
      description: name of the project, which component is deployed

    - name: namespace
      type: string
      description: project's namespace

    - name: repository_submodules
      type: string
      description: defines whether repository should be initialized with submodules or not (if false value is set, it means no repository submodules would be downloaded)
      default: "true"

    - name: add_tag_latest
      type: string
      description: push image to registry with additional tag `latest`
      default: "false"

    - name: buildpack_builder_image
      type: string
      description: the image on which builds will run (must include lifecycle and compatible buildpacks).

    - name: buildpack_runner_image
      type: string
      description: reference to a run image to use

    - name: source_subpath
      type: string
      description: a subpath within the `source` input where the source to build is located.
      default: ""

    - name: platform_dir
      type: string
      description: name of the platform directory. for buildpack /cnb/lifecycle/creator
      default: "platform"

    - name: buildpack_config_filename
      type: string
      description: The name of the buildpack.yml file which should be used for build
      default: "buildpack.yml"

    - name: project_config_filename
      type: string
      description: The name of the project.toml file which should be used for build
      default: "project.toml"

    - name: user_id
      type: string
      description: the user id of the builder image user.
      default: "1000"

    - name: group_id
      type: string
      description: the group id of the builder image user.
      default: "1000"

    - name: buildpack_cnb_platform_api
      type: string
      description: the Platform specification defines the interface between the CNB lifecycle and a platform that runs it

    - name: sentry_project_name
      type: string
      description: name of the project in Sentry

    - name: sourcemaps_dir
      type: string
      description: name of the dir where frontend sourcemaps would be stored in workspace
      default: "sourcemaps"

  workspaces:
    - name: source

  resources:
    - name: app
      type: git
    - name: kubernetes-repo
      type: git
    - name: image
      type: image

  tasks:
    - name: prepare-build
      taskRef:
        name: buildpack-prepare-build
      resources:
        inputs:
          - name: app
            resource: app
      params:
        - name: application
          value: "$(params.application)"
        - name: platform_dir
          value: "$(params.platform_dir)"
        - name: buildpack_config_filename
          value: "$(params.buildpack_config_filename)"
        - name: project_config_filename
          value: "$(params.project_config_filename)"
      workspaces:
        - name: source
          workspace: source

    - name: detect-nodejs-version
      taskRef:
        name: detect-nodejs-version
      resources:
        inputs:
          - name: app
            resource: app
      params:
        - name: default_version
          value: "14"
      runAfter:
        - prepare-build

    - name: {{ .pipeline.buildTaskName }}
      taskRef:
        name: {{ .pipeline.buildTaskName }}
      resources:
          inputs:
            - name: app
              resource: app
          outputs:
              - name: image
                resource: image
      params:
        - name: application
          value: "$(params.application)"
        - name: branch
          value: "$(params.branch)"
        - name: builder_image
          value: "$(params.buildpack_builder_image)"
        - name: run_image
          value: "$(params.buildpack_runner_image)"
        - name: docker_registry
          value: $(params.docker_registry)
        - name: cache
          value: $(params.application)-buildpacks-cache
        - name: source_subpath
          value: "$(params.source_subpath)"
        - name: add_tag_latest
          value: "$(params.add_tag_latest)"
        - name: docker_registry_repository
          value: "$(params.docker_registry_repository)"
        - name: platform_dir
          value: "$(params.platform_dir)"
        - name: buildpack_config_filename
          value: "$(params.buildpack_config_filename)"
        - name: project_config_filename
          value: "$(params.project_config_filename)"
        - name: user_id
          value: "$(params.user_id)"
        - name: group_id
          value: "$(params.group_id)"
        - name: buildpack_cnb_platform_api
          value: "$(params.buildpack_cnb_platform_api)"
        - name: node_version
          value: "$(tasks.detect-nodejs-version.results.node-version)"
        - name: environment
          value: "$(params.environment)"
        - name: sourcemaps_dir
          value: "$(params.sourcemaps_dir)"
      workspaces:
        - name: source
          workspace: source
      runAfter:
        - detect-nodejs-version

    - name: kustomize
      taskRef:
        name: kustomize
      resources:
        inputs:
          - name: kubernetes-repo
            resource: kubernetes-repo
      params:
        - name: application
          value: "$(params.application)"
        - name: image
          value: "$(params.docker_registry_repository):$(params.environment)-$(params.sha)"
        - name: kustomize_overlay_path
          value: "$(params.kubernetes_repository_kustomize_path)"
        - name: kubernetes_branch
          value: "$(params.kubernetes_branch)"
        - name: environment
          value: "$(params.environment)"
      runAfter:
        - {{ .pipeline.buildTaskName }}

    - name: deploy
      taskRef:
        name: argocd-deploy
      params:
        - name : application
          value: "$(params.application)"
      runAfter:
        - kustomize

  {{ if .sentry.enabled }}
    {{ include "pipeline.sentryRelease" . | nindent 4 }}
  {{ end }}

  {{ include "pipeline.postDeploy" (dict "name" (printf "%s-post-deploy" .pipeline.name) "sentry_enabled" .sentry.enabled) | nindent 4 }}

  {{ include "pipeline.finalNotification" . | nindent 2 }}

---
{{- end }}
