{{ if .Values.buildpacks.enabled }}
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: build-static
  namespace: {{ .Release.Namespace }}
spec:
  description: >-
    Prepare static files for application
  workspaces:
    - name: source

  params:
    {{- include "params.app" (dict "target" "task") | nindent 4 }}
    {{- include "params.buildpack" (dict "target" "task") | nindent 4 }}
    {{- include "params.sentry" (dict "target" "task") | nindent 4 }}
    - name: node_version
      type: string
      description: nodejs version to be used

    # below parameter is used at the end of `build-static` tasks (defined in values.yaml)
    # for `frontend` build to store built static to `/workspace/source/sourcemaps/`
    # dir for further usage in `sentry-release` task
    - name: sourcemaps_dir
      type: string
      description: name of the dir where frontend sourcemaps would be stored in workspace
      default: "sourcemaps"
  steps:
    - name: build-static
      image: node:$(params.node_version)
      imagePullPolicy: IfNotPresent
      workingDir: $(workspaces.source.path)
      script: |
        #!/usr/bin/env bash
        set -o pipefail
        if [[ ! -f package.json ]]; then
          echo "No package.json found, stepping out"
        else
          echo "Installing node.js dependencies"
          # set cache
          npm config set cache $(workspaces.source.path)/.npm --global
          npm ci
          if [[ $? -ne 0 ]]; then
            echo "unable to install dependencies, exit_code: $?"
            exit 1
          fi
          echo "Building $(params.environment) target"
          npm run build:$(params.environment)
          if [[ $? -ne 0 ]];  then
            echo "unable to build $(params.environment) exit_code: $?"
            exit 1
          fi
          echo "Cleaning up"
          rm -rf node_modules
          echo "Preparing for buildpack build"
          cp -rf {project.toml,nginx.conf,buildpack.yml,nginx.d,.nginx.d,nginx.*,httpd.conf,.http.d,httpd.d,Procfile} $(params.source_subpath)  2>/dev/null
          chown -R $(params.user_id):$(params.group_id) $(params.source_subpath)
          # copy built dir to workspace for further usage in sentry-release task (source maps release)
          echo "Save source maps"
          mkdir -p $(workspaces.source.path)/$(params.sourcemaps_dir)
          cp -rf $(params.source_subpath)/. $(workspaces.source.path)/$(params.sourcemaps_dir)
          # needs to clean up created source maps for envs != `dev` to not show it on `staging` and `prod` envs,
          # so now to be able to upload source maps to Sentry for all existing envs, `frontend` should be ALWAYS
          # built with source maps for any env (dev / staging / prod)
          if [[ "$(params.environment)" != "dev" ]]; then
            echo "Clean up source maps from docker image"
            find $(params.source_subpath)/. -name "*.map" -type f -delete
          fi
        fi
{{ end }}