# Default values for tekton-pipelines.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# -- default images used in our solution
# @default -- See below
images:
  # -- argocd cli downdload URL
  argocd_cli: https://github.com/argoproj/argo-cd/releases/download/v2.3.4/argocd-linux-amd64
  # -- bash image (used for various ops in steps)
  bash: docker.io/library/bash:5.1.8
  # -- aws cli image (used for aws ecr auth)
  awscli: docker.io/amazon/aws-cli:2.7.4
  # -- kaniko image used to build containers containing docker files - v1.8.1, uploaded April 5 2022
  kaniko: gcr.io/kaniko-project/executor@sha256:b44b0744b450e731b5a5213058792cd8d3a6a14c119cf6b1f143704f22a7c650
  # -- git image
  git: alpine/git:v2.32.0
  # -- kustomize cli
  kustomize: registry.k8s.io/kustomize/kustomize:v5.0.0  # https://kubectl.docs.kubernetes.io/installation/kustomize/docker/
  # -- kubectl cli
  kubectl: bitnami/kubectl:1.22.10
  # -- slack notifier
  slack: cloudposse/slack-notifier:0.4.0
  # -- python image
  python: saritasallc/python3:0.4     # https://github.com/saritasa-nest/saritasa-devops-docker-images/tree/main/public/python/python3-alpine-boto
  # -- yamlfix image - format yaml files
  yamlfix: public.ecr.aws/saritasa/yamlfix:1.8.1    # https://lyz-code.github.io/yamlfix/
  # -- kubeval image - validate Kubernetes manifests
  kubeval: public.ecr.aws/saritasa/kubeval:0.16.1    # https://kubeval.instrumenta.dev/
  # -- sentry cli image - needs to prepare Sentry releases
  sentry_cli: getsentry/sentry-cli:2.19.1    # https://github.com/getsentry/sentry-cli/


# ┌──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
# │ BUILDPACKS                                                                                                           │
# │                                                                                                                      │
# └──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘

buildpacks:
  # -- should we enable buildpack based pipelines
  enabled: false
  # -- cnb (cloud native buildpacks) platform API to support
  # see more details [here](https://buildpacks.io/docs/reference/spec/platform-api/) and [here](https://github.com/buildpacks/spec/blob/main/platform.md)
  cnbPlatformAPI: '0.4'
  generate:
# ┌──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
# │ BUILDPACK: FRONTEND                                                                                                  │
# │ Purpose:                                                                                                             │
# │ This generated buildpack should be used by SPA apps, like angular/react                                              │
# │ It will build static based on `build:ENV` command declared in the package.json file and then copy buildpack related  │
# │ files into the resulting folder, which then is going to be detected by the buildpack.                                │
# │                                                                                                                      │
# └──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
    buildpackFrontendBuildPipeline:
      # -- the name of the generated pipeline
      name: buildpack-frontend-build-pipeline
      # -- should we enable the frontend buildpack pipeline
      enabled: false
      # -- the generated name of the tekton task implementing the "build" step
      buildTaskName: buildpack-frontend
      # -- buildpack `build` step can be overridden to be able to perform custom
      # docker auth or add other required functionality
      overrideBuildStep: {}
      # -- steps to run in the `buildpack-frontend` task prior to executing /cnb/lifecycle/creator CLI
      # @default -- see values.yaml for the default values of it
      buildTaskSteps:
        - name: build-static
          image: node:$(params.node_version)
          imagePullPolicy: IfNotPresent
          resources: {}
          workingDir: $(resources.inputs.app.path)
          script: |
            #!/usr/bin/env bash
            set -o pipefail

            if [[ ! -f package.json ]]; then
              echo "No package.json found, stepping out"
            else
              echo "Installing node.js dependencies"
              # set cache
              npm config set cache $(workspaces.source.path)/.npm --global
              npm ci
              if [[ $? -ne 0 ]]; then
                echo "unable to install dependencies, exit_code: $?"
                exit 1
              fi
              echo "Building $(params.environment) target"
              npm run build:$(params.environment)
              if [[ $? -ne 0 ]];  then
                echo "unable to build $(params.environment) exit_code: $?"
                exit 1
              fi
              echo "Cleaning up"
              rm -rf node_modules
              echo "Preparing for buildpack build"
              cp -rf {project.toml,nginx.conf,buildpack.yml,nginx.d,.nginx.d,nginx.*,httpd.conf,.http.d,httpd.d,Procfile} $(params.source_subpath)  2>/dev/null
              chown -R $(params.user_id):$(params.group_id) $(params.source_subpath)

              # copy built dir to workspace for further usage in sentry-release task (source maps release)
              echo "Save source maps"
              mkdir -p $(workspaces.source.path)/$(params.sourcemaps_dir)
              cp -rf $(params.source_subpath)/. $(workspaces.source.path)/$(params.sourcemaps_dir)

              # needs to clean up created source maps for envs != `dev` to not show it on `staging` and `prod` envs,
              # so now to be able to upload source maps to Sentry for all existing envs, `frontend` should be ALWAYS
              # built with source maps for any env (dev / staging / prod)
              if [[ "$(params.environment)" != "dev" ]]; then
                echo "Clean up source maps from docker image"
                find $(params.source_subpath)/. -name "*.map" -type f -delete
              fi
            fi
          securityContext:
            privileged: true

# ┌──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
# │ BUILDPACK: PHP                                                                                                       │
# │ Purpose:                                                                                                             │
# │ This generated buildpack should be used by our PHP / Laravel apps where we may have package.json (i.e. frontend      │
# │ solution as part of the PHP code repository. It will compile static files if package.json is present and then will   │
# │ remove generated folders so that buildpack does not detect it as nodejs code                                         │
# │                                                                                                                      │
# └──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
    buildpackPhpBuildPipeline:
      # -- the name of the generated pipeline
      name: buildpack-php-build-pipeline
      # -- should we enable the php buildpack pipeline
      enabled: false
      description: |-
        Additional steps in the build task are required for
        - compile static with node.js (old legacy projects, where static html is bundled with the PHP repo)
        - fix PHP detection if repo contains buth node.js and php code
      # -- the generated name of the tekton task implementing the "build" step
      buildTaskName: buildpack-php
      # -- buildpack `build` step can be overridden to be able to perform custom
      # docker auth or add other required functionality
      overrideBuildStep: {}
      # -- steps to run in the `buildpack-php` task prior to executing /cnb/lifecycle/creator CLI
      # @default -- see values.yaml for the default values of it
      buildTaskSteps:
        - name: build-static
          image: node:$(params.node_version)
          imagePullPolicy: IfNotPresent
          resources: {}
          workingDir: $(resources.inputs.app.path)
          script: |
            #!/bin/bash
            set -e
            [ -f package.json ] && {
              echo "install node.js dependencies"

              # set cache
              npm config set cache $(workspaces.source.path)/.npm --global
              npm ci

              npm run build:$(params.environment) || echo "unable to build $(params.environment)"
              rm -rf node_modules && echo "remove node_modules dir"
            } || echo "No package.json found"
          securityContext:
            privileged: true

        - name: fix-php-detection
          image: docker.io/library/bash:5.1.8
          imagePullPolicy: IfNotPresent
          resources: {}
          workingDir: $(resources.inputs.app.path)
          script: |
            #!/usr/bin/env bash
            # workaround to fix no PHP detection, when package.json presents
            # so that we don't get nodejs buildpack detected, but instead the PHP
            # buildpack is detected and used
            set -e
            [[ -f composer.json && -f package.json ]] && (rm -f package.json; ls -la .;) || echo "no php-fix is needed"

# ┌──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
# │ BUILDPACK: DJANGO                                                                                                    │
# │ Purpose:                                                                                                             │
# │ This generated buildpack pipeline should be used by our Python team using sa3p templated solution, where the         │
# │ requirements.txt is named after the environment and stored inside the requirements folder                            │
# │                                                                                                                      │
# └──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
    buildpackDjangoBuildPipeline:
      # -- the name of the generated pipeline
      name: buildpack-django-build-pipeline
      # -- should we enable the django buildpack pipeline
      enabled: false
      # -- the generated name of the tekton task implementing the "build" step
      buildTaskName: buildpack-django
      # -- buildpack `build` step can be overridden to be able to perform custom
      # docker auth or add other required functionality
      overrideBuildStep: {}
      # -- steps to run in the `buildpack-django` task prior to executing /cnb/lifecycle/creator CLI
      # @default -- see values.yaml for the default values of it
      buildTaskSteps:
        - name: build-static
          image: node:$(params.node_version)
          imagePullPolicy: IfNotPresent
          resources: {}
          workingDir: $(resources.inputs.app.path)
          script: |
            #!/bin/bash
            set -e
            [ -f package.json ] && {
              echo "install node.js dependencies"

              # set cache
              npm config set cache $(workspaces.source.path)/.npm --global
              npm ci

              npm run build:$(params.environment) || echo "unable to build $(params.environment)"
              rm -rf node_modules && echo "remove node_modules dir"
            } || echo "No package.json found"
          securityContext:
            privileged: true
        - name: copy-requirements
          image: docker.io/saritasallc/poetry:1.8.2
          imagePullPolicy: IfNotPresent
          resources: {}
          workingDir: $(resources.inputs.app.path)
          script: |
            #!/usr/bin/env bash
            set -eo pipefail

            if [[ -f poetry.lock ]]; then
              echo "'poetry.lock' is found, preparing requirements.txt"
              TARGET="main"
              if [[ "$(params.environment)" == "dev" ]]; then
                TARGET="${TARGET},dev"
              fi
              echo "Export '${TARGET}' targets dependencies"
              poetry export --without-hashes --with ${TARGET} --output requirements.txt
              exit 0
            fi

            if ls requirements/$(params.environment)*.txt >/dev/null 2>&1; then
              echo "'requirements' folder is found, preparing requirements.txt"
              cp requirements/$(params.environment)*.txt requirements.txt
              exit 0
            fi

            if [[ -f requirements.txt ]]; then
              echo "'requirements.txt' found"
              exit 0
            fi

            # otherwise raise error, because no requirements were found
            echo "requirements.txt is not found! Halting execution."
            exit 1

# ┌──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
# │ BUILDPACK: DOTNET                                                                                                    │
# │ This generated buildpack pipeline is used by our dotnet team and has a custom step that is used to obtain semantic   │
# │ version based on git tags of the repository utilizing GitVersion cli. It updates dotnet related source files with    │
# │ semantic version that is then displayed in API calls, like this https://api.site.com/api/meta/version                │
# │                                                                                                                      │
# └──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
    buildpackDotnetBuildPipeline:
      # -- the name of the generated pipeline
      name: buildpack-dotnet-build-pipeline
      # -- should we enable the dotnet buildpack pipeline
      enabled: false
      # -- the generated name of the tekton task implementing the "build" step
      buildTaskName: buildpack-dotnet
      # -- buildpack `build` step can be overridden to be able to perform custom
      # docker auth or add other required functionality
      overrideBuildStep: {}
      # -- steps to run in the `buildpack-dotnet` task prior to executing /cnb/lifecycle/creator CLI
      # @default -- see values.yaml for the default values of it
      buildTaskSteps:
        - name: git-fetch-tags
          image: alpine/git:v2.32.0
          imagePullPolicy: IfNotPresent
          resources: {}
          workingDir: $(resources.inputs.app.path)
          script: |
            git fetch --tags --unshallow
          securityContext:
            privileged: true
            runAsUser: 0

        - name: get-semantic-version
          workingDir: $(resources.inputs.app.path)
          image: gittools/gitversion:5.8.3-alpine.3.12-5.0-amd64
          imagePullPolicy: IfNotPresent
          resources: {}
          script: |
            #!/usr/bin/env ash
            # so we are making a hack, that if we try to merge hotfix branch into main we should
            [ -e GitVersion-hotfix.yml ] && /tools/dotnet-gitversion | grep hotfix 1>/dev/null && (echo "hotfix"; rm -rf GitVersion.yml; cp GitVersion-hotfix.yml GitVersion.yml)

            BRANCH=$(params.branch)

            # since this is a busybox we can't use bash regexp here
            if echo $BRANCH | grep -E '^refs/heads/(main|release/[0-9.]+)$' > /dev/null;
            then
              local_tags=$(git tag --points-at HEAD)
              echo "remove local head tags"
              echo $local_tags
              git tag -d $local_tags
            fi

            pure_branch=`echo $BRANCH | sed 's/refs\/heads\///'`
            echo "PURE BRANCH:" $pure_branch

            # make sure we're not in detached head status
            git symbolic-ref -q HEAD || git checkout $pure_branch
            git branch

            /tools/dotnet-gitversion /updateprojectfiles
            git status
            chown -R "$(params.user_id):$(params.group_id)" "$(workspaces.source.path)"
            chown -R "$(params.user_id):$(params.group_id)" "$(resources.inputs.app.path)"
            echo "semantic version updated"

        - name: remove-dcproj-files
          workingDir: $(resources.inputs.app.path)
          image: docker.io/library/bash:5.1.8
          imagePullPolicy: IfNotPresent
          resources: {}
          script: |
            #!/usr/bin/env bash
            # clean `.dcproj` files related to local development docker .NET project
            cd $(resources.inputs.app.path)
            find . -name '*.dcproj' -type f -delete

        - name: build-static
          image: node:$(params.node_version)
          imagePullPolicy: IfNotPresent
          resources: {}
          workingDir: $(resources.inputs.app.path)
          script: |
            #!/bin/bash
            set -Eeo pipefail

            if [ ! -f buildpack.yml ]; then
              echo "no buildpack.yml file found"
              exit 0
            fi

            # download jq
            # install js-yaml, which converts yaml to json
            npm i -g js-yaml
            wget https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 -O ./jq
            chmod +x jq

            # the package.json is expected to be in that folder that we get from
            # buildpack.yml file
            package_path=$(js-yaml buildpack.yml | ./jq -r '."dotnet-build"."project-path"')
            cd "$package_path"

            # if that folder has package.json then run build:ENV task
            [ -f package.json ] && {
              echo "install node.js dependencies"

              # set cache
              npm config set cache $(workspaces.source.path)/.npm --global
              npm ci

              (npm run build:$(params.environment) && rm -rf node_modules && echo "remove node_modules dir") || (echo "unable to build $(params.environment)" && exit 1)
              chown -R "$(params.user_id):$(params.group_id)" "$(workspaces.source.path)"
              chown -R "$(params.user_id):$(params.group_id)" "$(resources.inputs.app.path)"
            } || echo "No package.json found"

            echo "done"
          securityContext:
            privileged: true

# ┌──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
# │ BUILDPACK: NODEJS                                                                                                    │
# │ Various Nodejs legacy projects                                                                                       │
# │                                                                                                                      │
# └──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
    buildpackNodejsBuildPipeline:
      # -- the name of the generated pipeline
      name: buildpack-nodejs-build-pipeline
      # -- should we enable the nodejs buildpack pipeline
      enabled: false
      # -- the generated name of the tekton task implementing the "build" step
      buildTaskName: buildpack-nodejs
      # -- buildpack `build` step can be overridden to be able to perform custom
      # docker auth or add other required functionality
      overrideBuildStep: {}

# ┌──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
# │ BUILDPACK: GO                                                                                                        │
# │ Various GO apps                                                                                                      │
# │                                                                                                                      │
# └──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
    buildpackGoBuildPipeline:
      # -- the name of the generated pipeline
      name: buildpack-go-build-pipeline
      # -- should we enable the GO buildpack pipeline
      enabled: false
      # -- the generated name of the tekton task implementing the "build" step
      buildTaskName: buildpack-go
      # -- buildpack `build` step can be overridden to be able to perform custom
      # docker auth or add other required functionality
      overrideBuildStep: {}

# ┌──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
# │ BUILDPACK: RUBY                                                                                                      │
# │ Used mostly by our wiki docs (frontend & devops teams)                                                               │
# │                                                                                                                      │
# └──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
    buildpackRubyBuildPipeline:
      # -- the name of the generated pipeline
      name: buildpack-ruby-build-pipeline
      # -- should we enable the ruby buildpack pipeline
      enabled: false
      # -- the generated name of the tekton task implementing the "build" step
      buildTaskName: buildpack-ruby
      # -- buildpack `build` step can be overridden to be able to perform custom
      # docker auth or add other required functionality
      overrideBuildStep: {}

# ┌──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
# │ BUILDPACK: JAVA                                                                                                      │
# │ Various Java apps                                                                                                    │
# │                                                                                                                      │
# └──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
    buildpackJavaBuildPipeline:
      # -- the name of the generated pipeline
      name: buildpack-java-build-pipeline
      # -- should we enable the java buildpack pipeline
      enabled: false
      # -- the generated name of the tekton task implementing the "build" step
      buildTaskName: buildpack-java
      # -- buildpack `build` step can be overridden to be able to perform custom
      # docker auth or add other required functionality
      overrideBuildStep: {}

kaniko:
  # -- should we enable the kaniko pipeline
  enabled: false

wordpress:
  # -- should we enable the wordpress pipeline
  enabled: false

# -- default imagePullPolicy to be used for images pulled in tekton task steps
imagePullPolicy: IfNotPresent

# -- default configuration to be added into each pod created by tekton engine
# we want to plave them in a specific node with added tolerations/taints.
# @default -- see values.yaml
podTemplate:
  # -- node selector for pods spawned by tekton
  nodeSelector:
    ci: 'true'
  # -- tolerations
  tolerations:
    - key: ci
      operator: Equal
      value: 'true'
      effect: NoSchedule


# ┌──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
# │ Install the saritasa-tekton helm chart (tekton engine, triggers, dashboard, webhooks etc)                            │
# │                                                                                                                      │
# └──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
saritasa-tekton:
  # -- should we configure dependency chart here.
  enabled: false


# ┌──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
# │ Sentry                                                                                                               │
# │                                                                                                                      │
# └──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
sentry:
  enabled: false
  authTokenSecret: "sentry-auth-token"  # auth token to connect to Sentry API
  authTokenSecretKey: "auth-token"
  org: "saritasa"
  url: https://sentry.saritasa.rocks/
