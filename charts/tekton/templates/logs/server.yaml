{{- if and (.Values.dashboard.enabled)
           (.Values.logsOperator.enabled)
           (.Values.logsServer.enabled)
}}
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Values.logsServer.name }}-sa
  namespace: {{ .Values.logsOperator.logging.controlNamespace | default "ci" }}
  {{- with .Values.logsServer.serviceAccount }}
  annotations:
    {{ .metadata.annotations | toYaml | nindent 4 }}
  {{- end }}
  labels:
    app.kubernetes.io/name: {{ .Values.logsServer.name }}
    app.kubernetes.io/part-of: tekton
    app.kubernetes.io/component: dashboard
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.logsServer.name }}
  namespace: {{ .Values.logsOperator.logging.controlNamespace | default "ci" }}
  labels:
    app.kubernetes.io/name: {{ .Values.logsServer.name }}
    app.kubernetes.io/part-of: tekton
    app.kubernetes.io/component: dashboard
  annotations:
    explanation: |
      Stream logs stored on s3 bucket
    reloader.stakater.com/secret: {{ .Values.logsServer.name }}-tls
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Values.logsServer.name }}
      app.kubernetes.io/part-of: tekton
      app.kubernetes.io/component: dashboard
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .Values.logsServer.name }}
        app.kubernetes.io/part-of: tekton
        app.kubernetes.io/component: dashboard
    spec:
      serviceAccount: {{ .Values.logsServer.name }}-sa
      {{- with .Values.logsServer.affinity }}
      affinity:
      {{ . | toYaml | nindent 8 -}}
      {{- end }}
      {{- with .Values.logsServer.nodeSelector }}
      nodeSelector:
      {{ . | toYaml | nindent 8 -}}
      {{- end }}
      {{- with .Values.logsServer.tolerations }}
      tolerations:
      {{ . | toYaml | nindent 8 -}}
      {{- end }}
      containers:
        - name: stream
          image: {{ .Values.logsServer.image | default "python:3.12-alpine" }}
          command:
            - sh
            - -c
            - |
              pip install boto3==1.35.38 flask==3.0.0

              cat <<EOF > server.py
              import boto3
              import os, sys, ssl
              from flask import Flask, Response, jsonify
              from io import BytesIO

              s3 = boto3.client(
                  "s3",
                  region_name="us-east-1",
                  use_ssl=True,
              )

              app = Flask(__name__)
              bucket = os.getenv("STREAM_S3_BUCKET")

              if not bucket:
                  print("Error: STREAM_S3_BUCKET environment variable is not defined.")
                  sys.exit(1)


              def check_bucket_accessible():
                  """Check if s3 bucket is accessible"""
                  try:
                      s3.head_bucket(Bucket=bucket)
                      return True
                  except Exception as e:
                      print(f"Bucket access error: {e}")
                      return False


              def stream_logs(namespace, pod, container):
                  """Stream s3 files
                  Will get all files under specific folder, path namespace/pod/container/
                  Sort by their names and return their content in text format

                  Args:
                      namespace (str): kubernetes namespace
                      pod (str): pod name
                      container (str): container name

                  Returns:
                      Response: flask Response with the content of the file in text form
                  """
                  s3_response = s3.list_objects_v2(
                      Bucket=bucket, Prefix=f"{namespace}/{pod}/{container}/"
                  )

                  files = sorted(s3_response.get("Contents", []), key=lambda x: x["Key"])

                  def generate():
                      for file in files:
                          obj = s3.get_object(Bucket=bucket, Key=file["Key"])
                          body = obj["Body"].read()
                          yield body

                  return Response(generate(), content_type="text/plain")


              @app.route("/livez", methods=["GET"])
              def live_check():
                  if check_bucket_accessible():
                      return jsonify({"status": "OK"}), 200
                  else:
                      return jsonify({"status": "Bucket not accessible"}), 503


              @app.route("/readyz", methods=["GET"])
              def ready_check():
                  if check_bucket_accessible():
                      return jsonify({"status": "OK"}), 200
                  else:
                      return jsonify({"status": "Bucket not accessible"}), 503


              @app.route("/logs/<namespace>/<pod>/<container>", methods=["GET"])
              def get_logs(namespace, pod, container):
                  """Our logs are stored in S3 bucket using logging-operator
                  See an example here: https://kube-logging.dev/docs/examples/example-s3/
                  We fetch them and expose in text form.
                  """
                  return stream_logs(namespace, pod, container)


              if __name__ == "__main__":
                  cert_file = "/ssl/tls.crt"
                  key_file = "/ssl/tls.key"
                  ca_cert_file = "/ssl/ca.crt"

                  ssl_context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)
                  ssl_context.load_cert_chain(certfile=cert_file, keyfile=key_file)
                  ssl_context.load_verify_locations(cafile=ca_cert_file)

                  if not os.path.exists(cert_file) or not os.path.exists(key_file) or not os.path.exists(ca_cert_file):
                      print("Error: SSL certificate or key file not found.")
                      sys.exit(1)

                  app.run(host="0.0.0.0", port=8443, ssl_context=ssl_context)

              EOF
              python server.py
          env:
            - name: STREAM_S3_BUCKET
              value: {{ .Values.logsOperator.output.s3_bucket | required "S3 bucket should be defined, see .Values.logsOperator.output.s3_bucket"}}
          ports:
            - containerPort: 8443
          livenessProbe:
            httpGet:
              path: /livez
              port: 8443
              scheme: HTTPS
            initialDelaySeconds: 10
            periodSeconds: 300
            timeoutSeconds: 15
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /readyz
              port: 8443
              scheme: HTTPS
            initialDelaySeconds: 10
            periodSeconds: 300
            timeoutSeconds: 15
            failureThreshold: 3
          resources:
            {{ .Values.logsServer.resources | toYaml | nindent 14 }}
          securityContext:
            {{ .Values.logsServer.securityContext | toYaml |  nindent 14 }}
          volumeMounts:
            - name: tls
              mountPath: /ssl
              readOnly: true
      volumes:
        - name: tls
          secret:
            secretName: {{ .Values.logsServer.name }}-tls
---
kind: Service
apiVersion: v1
metadata:
  name: {{ .Values.logsServer.name }}
  namespace: {{ .Values.logsOperator.logging.controlNamespace | default "ci" }}
  labels:
    app.kubernetes.io/name: {{ .Values.logsServer.name }}
spec:
  ports:
  - port: 443
    targetPort: 8443
  selector:
    app.kubernetes.io/name: {{ .Values.logsServer.name }}
{{- end }}
