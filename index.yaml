apiVersion: v1
entries:
  demo:
  - apiVersion: v2
    appVersion: 1.16.0
    created: "2022-07-21T21:13:14.703840762Z"
    description: A Helm chart for Kubernetes
    digest: f5ccbc0557712862929d8c2cf75e51e806873edf6775bd09c9216ed4ba61d412
    name: demo
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/demo-0.0.5/demo-0.0.5.tgz
    version: 0.0.5
  - apiVersion: v2
    appVersion: 1.16.0
    created: "2022-07-21T20:55:48.962491387Z"
    description: A Helm chart for Kubernetes
    digest: 03b53242c5f9638af63450fc7665682fe503b570d2506a6fc1e3c217b35e38a7
    name: demo
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/demo-0.0.4/demo-0.0.4.tgz
    version: 0.0.4
  - apiVersion: v2
    appVersion: 1.16.0
    created: "2021-11-08T23:31:50.551420552Z"
    description: A Helm chart for Kubernetes
    digest: 379f16e79eba3af6fdd88b2669c553266376b45e4fd27110bf8e4572c6d59d01
    name: demo
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/demo-0.0.3/demo-0.0.3.tgz
    version: 0.0.3
  - apiVersion: v2
    appVersion: 1.16.0
    created: "2021-11-03T03:13:37.168122765Z"
    description: A Helm chart for Kubernetes
    digest: 129c051fd857f2b78b8f552977879caf20bdb2d80fc22150bc678214e91e6031
    name: demo
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/demo-0.0.2/demo-0.0.2.tgz
    version: 0.0.2
  - apiVersion: v2
    appVersion: 1.16.0
    created: "2021-08-22T22:05:07.507318901Z"
    description: A Helm chart for Kubernetes
    digest: f0f6cf0eca8d577c172d94069d690f86d92d3346933659dfbe5cb2a3fcf8b49b
    name: demo
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/demo-0.0.1/demo-0.0.1.tgz
    version: 0.0.1
  jitsi-meet:
  - apiVersion: v2
    appVersion: stable-6865
    created: "2022-03-25T05:38:50.271899356Z"
    dependencies:
    - condition: prosody.enabled
      name: prosody
      repository: ""
      version: 1.2.2
    description: A Helm chart for Kubernetes
    digest: ca1951306580638b6fd48b2762748295d7a21eca37df14e3554e8cc987d10762
    name: jitsi-meet
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/jitsi-meet-1.2.2/jitsi-meet-1.2.2.tgz
    version: 1.2.2
  - apiVersion: v2
    appVersion: stable-5963
    created: "2021-10-25T08:01:39.84945535Z"
    dependencies:
    - condition: prosody.enabled
      name: prosody
      repository: ""
      version: 0.2.2
    description: A Helm chart for Kubernetes
    digest: 610b26a8f01062957f4599536f437a7cc783e7b5f3a5ca33bf36e6024d9cca08
    name: jitsi-meet
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/jitsi-meet-0.2.4/jitsi-meet-0.2.4.tgz
    version: 0.2.4
  - apiVersion: v2
    appVersion: stable-5963
    created: "2021-10-25T06:36:56.211618841Z"
    dependencies:
    - condition: prosody.enabled
      name: prosody
      repository: ""
      version: 0.2.2
    description: A Helm chart for Kubernetes
    digest: 886d1a770011b3d46695176683ba0d89ce3aa9929a1027803311c98bc0b38c01
    name: jitsi-meet
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/jitsi-meet-0.2.3/jitsi-meet-0.2.3.tgz
    version: 0.2.3
  - apiVersion: v2
    appVersion: stable-5963
    created: "2021-10-21T01:33:46.151831176Z"
    dependencies:
    - condition: prosody.enabled
      name: prosody
      repository: ""
      version: 0.2.2
    description: A Helm chart for Kubernetes
    digest: bbcc7e51bf01e6261f636aaae9b5e0006e2fdb296f8d79ea79cd636fea683f94
    name: jitsi-meet
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/jitsi-meet-0.2.2/jitsi-meet-0.2.2.tgz
    version: 0.2.2
  - apiVersion: v2
    appVersion: stable-5963
    created: "2021-10-21T01:13:25.392793798Z"
    dependencies:
    - condition: prosody.enabled
      name: prosody
      repository: ""
      version: 0.2.0
    description: A Helm chart for Kubernetes
    digest: 175daf77ed361e146c7194fc529e7ea9552b9609890772a972a686df0ae33040
    name: jitsi-meet
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/jitsi-meet-0.2.1/jitsi-meet-0.2.1.tgz
    version: 0.2.1
  - apiVersion: v2
    appVersion: stable-5963
    created: "2021-09-04T01:18:36.427039231Z"
    dependencies:
    - condition: prosody.enabled
      name: prosody
      repository: ""
      version: 0.2.0
    description: A Helm chart for Kubernetes
    digest: 18239080d63e3538eb221b9f18b618f776c265607310eebb0eb75997e0fe32f8
    name: jitsi-meet
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/jitsi-meet-0.2.0/jitsi-meet-0.2.0.tgz
    version: 0.2.0
  maintenance-page:
  - apiVersion: v2
    created: "2022-08-11T18:51:03.74992863Z"
    description: 'A Helm chart for Kubernetes to display a simple maintenance page.
      By default it displays the following content: [https://codepen.io/dmitry-mightydevops/pen/poLaZqO](https://codepen.io/dmitry-mightydevops/pen/poLaZqO)  You
      can adjust the look by setting up the following values in the values.yaml file:   ```yaml
      message:   backgroundColor: "#d6433b"   textColor: "#fff"   title: "Site Maintenance"   header:
      "We&rsquo;ll be back soon!"   body: |     <p>Sorry for the inconvenience. We&rsquo;re
      performing some maintenance at the moment. We&rsquo;ll be back up shortly!</p>   footer:
      |     <p>&mdash; The DevOps Team</p> ```  or by supplying an entire HTML for
      the maintenance page via  ```yaml html: |   hello, the maintenance page HTML
      + CSS code is here ```'
    digest: 85be09a540003577998cc0f14ec77a3d335960f949d90ca3c384ea0e2c2be529
    maintainers:
    - email: nospam@saritasa.com
      name: Saritasa
      url: https://www.saritasa.com/
    name: maintenance-page
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/maintenance-page-0.0.2/maintenance-page-0.0.2.tgz
    version: 0.0.2
  - apiVersion: v2
    created: "2022-08-03T21:37:29.869821938Z"
    description: 'A Helm chart for Kubernetes to display a simple maintenance page.
      By default it displays the following content: [https://codepen.io/dmitry-mightydevops/pen/poLaZqO](https://codepen.io/dmitry-mightydevops/pen/poLaZqO) '
    digest: 3a0d294e1654bd8df227bdbe1b45ab907e0cbf91ef4eae49af53e69d333a85d2
    maintainers:
    - email: nospam@saritasa.com
      name: Saritasa
      url: https://www.saritasa.com/
    name: maintenance-page
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/maintenance-page-0.0.1/maintenance-page-0.0.1.tgz
    version: 0.0.1
  opsgenie-heartbeat:
  - apiVersion: v2
    created: "2022-05-06T00:38:15.366225237Z"
    description: 'Chart that installs our solution to send heartbeat pings via OpsGenie
      API automatically  You will need to create the secret containing opsgenie APIKEY
      first:  ```sh kubectl -n opsgenie create secret generic opsgenie-apikey-secret
      \   --from-literal=apikey=YOUR_APIKEY ```  Keep in mind that the name of your
      heartbeat in opsgenie should be the exact name of your kubernetes cluster '
    digest: 7158c0bc9f87ae84f7011afdefe25524e725cb6ae750773da19d92e02a054242
    maintainers:
    - email: nospam@saritasa.com
      name: Saritasa
      url: https://www.saritasa.com/
    name: opsgenie-heartbeat
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/opsgenie-heartbeat-0.0.2/opsgenie-heartbeat-0.0.2.tgz
    version: 0.0.2
  - apiVersion: v2
    created: "2022-04-12T21:48:07.147637368Z"
    description: 'Chart that installs our solution to send heartbeat pings via OpsGenie
      API automatically  You will need to create the secret containing opsgenie APIKEY
      first:  ```sh kubectl -n opsgenie create secret generic opsgenie-apikey-secret
      \   --from-literal=apikey=YOUR_APIKEY ```  Keep in mind that the name of your
      heartbeat in opsgenie should be the exact name of your kubernetes cluster '
    digest: b9fa616f4fcea6f1f5852c4c4c780a10d30c1535538dad9b7c8f408059c2096f
    maintainers:
    - email: nospam@saritasa.com
      name: Saritasa
      url: https://www.saritasa.com/
    name: opsgenie-heartbeat
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/opsgenie-heartbeat-0.0.1/opsgenie-heartbeat-0.0.1.tgz
    version: 0.0.1
  saritasa-rbac:
  - apiVersion: v2
    created: "2022-08-03T21:38:39.503720485Z"
    description: 'A Helm chart for Kubernetes implementing RBAC rules for saritasa
      developers, devops and client''s team members  You can see role bindings this
      way:   ```sh ➜ k krew install rbac-lookup ➜ k rbac-lookup --kind group G saritasa   saritasa:sso:developers    ci                 Role/saritasa-developers-role   saritasa:sso:developers    ingress-nginx      Role/saritasa-developers-role   saritasa:sso:developers    utils              Role/saritasa-developers-role   saritasa:sso:developers    prod               Role/saritasa-developers-readonly-role   saritasa:sso:developers    cluster-wide       ClusterRole/saritasa-developers-readonly-clusterrole
      ````  ## `example usage with agocd`  Install the chart:  ``` helm repo add saritasa
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/ ```  Make the argocd
      manifest  ```yaml apiVersion: argoproj.io/v1alpha1 kind: Application metadata:   name:
      rbac   namespace: argo-cd   finalizers:   - resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "1000" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: prod   project: default   source:     chart:
      saritasa-rbac     helm:       values: |         rbac:           client:             name:
      "example"             apps: true           developers:             ci: true             ingressNginx:
      true             postgres: true           devops: true     repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.7"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ````  You can also add any ad-hoc RBAC role/bindings via
      .Values.extraRbac multiline string  For `example` client:  ```yaml extraRbac:
      |   kind: Role   apiVersion: rbac.authorization.k8s.io/v1   metadata:    name:
      example-users-readonly-role    namespace: {{ .Release.Namespace }}   rules:     -
      apiGroups: [""]       resources:  ["services", "pods", "pods/log", "configmaps"]       verbs:
      ["get", "list", "watch"]     - apiGroups: [""]       resources:  ["pods"]       verbs:
      ["delete"]     - apiGroups: [""]       resources: ["pods/portforward", "services/portforward",
      "pods/exec"]       verbs: ["create"]     - apiGroups: ["extensions"]       resources:  ["*"]       verbs:
      ["get", "list", "watch"]     - apiGroups: ["batch"]       resources:  ["*"]       verbs:
      ["get", "list", "watch"]     - apiGroups: ["apps"]       resources:  ["*"]       verbs:
      ["get", "list", "watch"]     - apiGroups: ["tekton.dev"]       resources:  ["*"]       verbs:  ["taskruns",
      "pipelineruns", "pipelines", "tasks"]    ---   kind: RoleBinding   apiVersion:
      rbac.authorization.k8s.io/v1   metadata:     name: example:users     namespace:
      {{ .Release.Namespace }}   roleRef:     apiGroup: rbac.authorization.k8s.io     kind:
      Role     name: example-users-readonly-role   subjects:   - apiGroup: rbac.authorization.k8s.io     kind:
      Group     name: example:users ```` '
    digest: b3290f8364fac5afb32e4e3a184501947a97d9733359b9cee8441a66de53fbfb
    maintainers:
    - email: nospam@saritasa.com
      name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-rbac
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-rbac-0.1.10/saritasa-rbac-0.1.10.tgz
    version: 0.1.10
  - apiVersion: v2
    created: "2022-07-21T20:35:24.759369719Z"
    description: 'A Helm chart for Kubernetes implementing RBAC rules for saritasa
      developers, devops and client''s team members  You can see role bindings this
      way:   ```sh ➜ k krew install rbac-lookup ➜ k rbac-lookup --kind group G saritasa   saritasa:sso:developers    ci                 Role/saritasa-developers-role   saritasa:sso:developers    ingress-nginx      Role/saritasa-developers-role   saritasa:sso:developers    utils              Role/saritasa-developers-role   saritasa:sso:developers    prod               Role/saritasa-developers-readonly-role   saritasa:sso:developers    cluster-wide       ClusterRole/saritasa-developers-readonly-clusterrole
      ````  ## `example usage with agocd`  Install the chart:  ``` helm repo add saritasa
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/ ```  Make the argocd
      manifest  ```yaml apiVersion: argoproj.io/v1alpha1 kind: Application metadata:   name:
      rbac   namespace: argo-cd   finalizers:   - resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "1000" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: prod   project: default   source:     chart:
      saritasa-rbac     helm:       values: |         rbac:           client:             name:
      "example"             apps: true           developers:             ci: true             ingressNginx:
      true             postgres: true           devops: true     repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.7"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ````  You can also add any ad-hoc RBAC role/bindings via
      .Values.extraRbac multiline string  For `example` client:  ```yaml extraRbac:
      |   kind: Role   apiVersion: rbac.authorization.k8s.io/v1   metadata:    name:
      example-users-readonly-role    namespace: {{ .Release.Namespace }}   rules:     -
      apiGroups: [""]       resources:  ["services", "pods", "pods/log", "configmaps"]       verbs:
      ["get", "list", "watch"]     - apiGroups: [""]       resources:  ["pods"]       verbs:
      ["delete"]     - apiGroups: [""]       resources: ["pods/portforward", "services/portforward",
      "pods/exec"]       verbs: ["create"]     - apiGroups: ["extensions"]       resources:  ["*"]       verbs:
      ["get", "list", "watch"]     - apiGroups: ["batch"]       resources:  ["*"]       verbs:
      ["get", "list", "watch"]     - apiGroups: ["apps"]       resources:  ["*"]       verbs:
      ["get", "list", "watch"]     - apiGroups: ["tekton.dev"]       resources:  ["*"]       verbs:  ["taskruns",
      "pipelineruns", "pipelines", "tasks"]    ---   kind: RoleBinding   apiVersion:
      rbac.authorization.k8s.io/v1   metadata:     name: example:users     namespace:
      {{ .Release.Namespace }}   roleRef:     apiGroup: rbac.authorization.k8s.io     kind:
      Role     name: example-users-readonly-role   subjects:   - apiGroup: rbac.authorization.k8s.io     kind:
      Group     name: example:users ```` '
    digest: e6ea05fdaf9d3d38c63e5b1927f8ad9bbaf1854719b721b59e753ace15c964c9
    maintainers:
    - email: nospam@saritasa.com
      name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-rbac
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-rbac-0.1.9/saritasa-rbac-0.1.9.tgz
    version: 0.1.9
  - apiVersion: v2
    created: "2022-05-27T21:10:34.089208989Z"
    description: 'A Helm chart for Kubernetes implementing RBAC rules for saritasa
      developers, devops and client''s team members  You can see role bindings this
      way:   ```sh ➜ k krew install rbac-lookup ➜ k rbac-lookup --kind group G saritasa   saritasa:sso:developers    ci                 Role/saritasa-developers-role   saritasa:sso:developers    ingress-nginx      Role/saritasa-developers-role   saritasa:sso:developers    utils              Role/saritasa-developers-role   saritasa:sso:developers    prod               Role/saritasa-developers-readonly-role   saritasa:sso:developers    cluster-wide       ClusterRole/saritasa-developers-readonly-clusterrole
      ````  ## `example usage with agocd`  Install the chart:  ``` helm repo add saritasa
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/ ```  Make the argocd
      manifest  ```yaml apiVersion: argoproj.io/v1alpha1 kind: Application metadata:   name:
      rbac   namespace: argo-cd   finalizers:   - resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "1000" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: prod   project: default   source:     chart:
      saritasa-rbac     helm:       values: |         rbac:           client:             name:
      "producebox"             apps: true           developers:             ci: true             ingressNginx:
      true             postgres: true           devops: true     repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.0"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ````  You can also add any ad-hoc RBAC role/bindings via
      .Values.extraRbac multiline string  For example:  ```yaml extraRbac: |   kind:
      Role   apiVersion: rbac.authorization.k8s.io/v1   metadata:    name: cheesecake-users-readonly-role    namespace:
      {{ .Release.Namespace }}   rules:     - apiGroups: [""]       resources:  ["services",
      "pods", "pods/log", "configmaps"]       verbs: ["get", "list", "watch"]     -
      apiGroups: [""]       resources:  ["pods"]       verbs: ["delete"]     - apiGroups:
      [""]       resources: ["pods/portforward", "services/portforward", "pods/exec"]       verbs:
      ["create"]     - apiGroups: ["extensions"]       resources:  ["*"]       verbs:
      ["get", "list", "watch"]     - apiGroups: ["batch"]       resources:  ["*"]       verbs:
      ["get", "list", "watch"]     - apiGroups: ["apps"]       resources:  ["*"]       verbs:
      ["get", "list", "watch"]     - apiGroups: ["tekton.dev"]       resources:  ["*"]       verbs:  ["taskruns",
      "pipelineruns", "pipelines", "tasks"]    ---   kind: RoleBinding   apiVersion:
      rbac.authorization.k8s.io/v1   metadata:     name: cheesecake:users     namespace:
      {{ .Release.Namespace }}   roleRef:     apiGroup: rbac.authorization.k8s.io     kind:
      Role     name: cheesecake-users-readonly-role   subjects:   - apiGroup: rbac.authorization.k8s.io     kind:
      Group     name: cheesecake:users ```` '
    digest: 21b5f0ae0f4db36ec220c2b3d28cf4ea7d00804c678f22b15442d64adc1cff42
    maintainers:
    - email: nospam@saritasa.com
      name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-rbac
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-rbac-0.1.6/saritasa-rbac-0.1.6.tgz
    version: 0.1.6
  - apiVersion: v2
    created: "2022-05-18T14:01:10.647190724Z"
    description: 'A Helm chart for Kubernetes implementing RBAC rules for saritasa
      developers, devops and client''s team members  You can see role bindings this
      way:   ```sh ➜ k krew install rbac-lookup ➜ k rbac-lookup --kind group G saritasa   saritasa:sso:developers    ci                 Role/saritasa-developers-role   saritasa:sso:developers    ingress-nginx      Role/saritasa-developers-role   saritasa:sso:developers    utils              Role/saritasa-developers-role   saritasa:sso:developers    prod               Role/saritasa-developers-readonly-role   saritasa:sso:developers    cluster-wide       ClusterRole/saritasa-developers-readonly-clusterrole
      ````  ## `example usage with agocd`  Install the chart:  ``` helm repo add saritasa
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/ ```  Make the argocd
      manifest  ```yaml apiVersion: argoproj.io/v1alpha1 kind: Application metadata:   name:
      rbac   namespace: argo-cd   finalizers:   - resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "1000" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: prod   project: default   source:     chart:
      saritasa-rbac     helm:       values: |         rbac:           client:             name:
      "producebox"             apps: true           developers:             ci: true             ingressNginx:
      true             postgres: true           devops: true     repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.0"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ````  You can also add any ad-hoc RBAC role/bindings via
      .Values.extraRbac multiline string  For example:  ```yaml extraRbac: |   kind:
      Role   apiVersion: rbac.authorization.k8s.io/v1   metadata:    name: cheesecake-users-readonly-role    namespace:
      {{ .Release.Namespace }}   rules:     - apiGroups: [""]       resources:  ["services",
      "pods", "pods/log", "configmaps"]       verbs: ["get", "list", "watch"]     -
      apiGroups: [""]       resources:  ["pods"]       verbs: ["delete"]     - apiGroups:
      [""]       resources: ["pods/portforward", "services/portforward", "pods/exec"]       verbs:
      ["create"]     - apiGroups: ["extensions"]       resources:  ["*"]       verbs:
      ["get", "list", "watch"]     - apiGroups: ["batch"]       resources:  ["*"]       verbs:
      ["get", "list", "watch"]     - apiGroups: ["apps"]       resources:  ["*"]       verbs:
      ["get", "list", "watch"]     - apiGroups: ["tekton.dev"]       resources:  ["*"]       verbs:  ["taskruns",
      "pipelineruns", "pipelines", "tasks"]    ---   kind: RoleBinding   apiVersion:
      rbac.authorization.k8s.io/v1   metadata:     name: cheesecake:users     namespace:
      {{ .Release.Namespace }}   roleRef:     apiGroup: rbac.authorization.k8s.io     kind:
      Role     name: cheesecake-users-readonly-role   subjects:   - apiGroup: rbac.authorization.k8s.io     kind:
      Group     name: cheesecake:users ```` '
    digest: 90064964e4eb279a81b16348778e55c5657e1907c01f7772bdc6b8e165ff93a3
    maintainers:
    - email: nospam@saritasa.com
      name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-rbac
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-rbac-0.1.5/saritasa-rbac-0.1.5.tgz
    version: 0.1.5
  - apiVersion: v2
    created: "2022-02-28T10:21:18.995187393Z"
    description: 'A Helm chart for Kubernetes implementing RBAC rules for saritasa
      developers, devops and client''s team members  You can see role bindings this
      way   ```sh ➜ k krew install rbac-lookup ➜ k rbac-lookup --kind group G saritasa   saritasa:sso:developers    ci                 Role/saritasa-developers-role   saritasa:sso:developers    ingress-nginx      Role/saritasa-developers-role   saritasa:sso:developers    postgres           Role/saritasa-developers-role   saritasa:sso:developers    prod               Role/saritasa-developers-readonly-role   saritasa:sso:developers    cluster-wide       ClusterRole/saritasa-developers-readonly-clusterrole
      ````  ## `example usage with agocd`  Install the chart:  ``` helm repo add saritasa
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/ ```  Make the argocd
      manifest  ```yaml apiVersion: argoproj.io/v1alpha1 kind: Application metadata:   name:
      rbac   namespace: argo-cd   finalizers:   - resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "1000" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: prod   project: default   source:     chart:
      saritasa-rbac     helm:       values: |         rbac:           client:             name:
      "producebox"             apps: true           developers:             ci: true             ingressNginx:
      true             postgres: true           devops: true     repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.0"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ````  You can also add any ad-hoc RBAC role/bindings via
      .Values.extraRbac multiline string  For example:  ```yaml extraRbac: |   kind:
      Role   apiVersion: rbac.authorization.k8s.io/v1   metadata:    name: cheesecake-users-readonly-role    namespace:
      {{ .Release.Namespace }}   rules:     - apiGroups: [""]       resources:  ["services",
      "pods", "pods/log", "configmaps"]       verbs: ["get", "list", "watch"]     -
      apiGroups: [""]       resources:  ["pods"]       verbs: ["delete"]     - apiGroups:
      [""]       resources: ["pods/portforward", "services/portforward", "pods/exec"]       verbs:
      ["create"]     - apiGroups: ["extensions"]       resources:  ["*"]       verbs:
      ["get", "list", "watch"]     - apiGroups: ["batch"]       resources:  ["*"]       verbs:
      ["get", "list", "watch"]     - apiGroups: ["apps"]       resources:  ["*"]       verbs:
      ["get", "list", "watch"]     - apiGroups: ["tekton.dev"]       resources:  ["*"]       verbs:  ["taskruns",
      "pipelineruns", "pipelines", "tasks"]    ---   kind: RoleBinding   apiVersion:
      rbac.authorization.k8s.io/v1   metadata:     name: cheesecake:users     namespace:
      {{ .Release.Namespace }}   roleRef:     apiGroup: rbac.authorization.k8s.io     kind:
      Role     name: cheesecake-users-readonly-role   subjects:   - apiGroup: rbac.authorization.k8s.io     kind:
      Group     name: cheesecake:users ```` '
    digest: b232f3afdc5210b4f89d32e45b63520e09816e5fa56f7cdba3521e7a1da6addc
    maintainers:
    - email: nospam@saritasa.com
      name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-rbac
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-rbac-0.1.4/saritasa-rbac-0.1.4.tgz
    version: 0.1.4
  - apiVersion: v2
    created: "2022-02-01T21:35:34.326954593Z"
    description: 'A Helm chart for Kubernetes implementing RBAC rules for saritasa
      developers, devops and client''s team members  You can see role bindings this
      way   ```sh ➜ k krew install rbac-lookup ➜ k rbac-lookup --kind group G saritasa   saritasa:sso:developers    ci                 Role/saritasa-developers-role   saritasa:sso:developers    ingress-nginx      Role/saritasa-developers-role   saritasa:sso:developers    postgres           Role/saritasa-developers-role   saritasa:sso:developers    prod               Role/saritasa-developers-readonly-role   saritasa:sso:developers    cluster-wide       ClusterRole/saritasa-developers-readonly-clusterrole
      ````  ## `example usage with agocd`  Install the chart:  ``` helm repo add saritasa
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/ ```  Make the argocd
      manifest  ```yaml apiVersion: argoproj.io/v1alpha1 kind: Application metadata:   name:
      rbac   namespace: argo-cd   finalizers:   - resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "1000" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: prod   project: default   source:     chart:
      saritasa-rbac     helm:       values: |         rbac:           client:             name:
      "producebox"             apps: true           developers:             ci: true             ingressNginx:
      true             postgres: true           devops: true     repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.0"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ````  You can also add any ad-hoc RBAC role/bindings via
      .Values.extraRbac multiline string  For example:  ```yaml extraRbac: |   kind:
      Role   apiVersion: rbac.authorization.k8s.io/v1   metadata:    name: cheesecake-users-readonly-role    namespace:
      {{ .Release.Namespace }}   rules:     - apiGroups: [""]       resources:  ["services",
      "pods", "pods/log", "configmaps"]       verbs: ["get", "list", "watch"]     -
      apiGroups: [""]       resources:  ["pods"]       verbs: ["delete"]     - apiGroups:
      [""]       resources: ["pods/portforward", "services/portforward", "pods/exec"]       verbs:
      ["create"]     - apiGroups: ["extensions"]       resources:  ["*"]       verbs:
      ["get", "list", "watch"]     - apiGroups: ["batch"]       resources:  ["*"]       verbs:
      ["get", "list", "watch"]     - apiGroups: ["apps"]       resources:  ["*"]       verbs:
      ["get", "list", "watch"]     - apiGroups: ["tekton.dev"]       resources:  ["*"]       verbs:  ["taskruns",
      "pipelineruns", "pipelines", "tasks"]    ---   kind: RoleBinding   apiVersion:
      rbac.authorization.k8s.io/v1   metadata:     name: cheesecake:users     namespace:
      {{ .Release.Namespace }}   roleRef:     apiGroup: rbac.authorization.k8s.io     kind:
      Role     name: cheesecake-users-readonly-role   subjects:   - apiGroup: rbac.authorization.k8s.io     kind:
      Group     name: cheesecake:users ```` '
    digest: 33a9e6c2cfc4470a29d96062afacf70f30e7a3dd87d43963d655861a116f1e3e
    maintainers:
    - email: nospam@saritasa.com
      name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-rbac
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-rbac-0.1.3/saritasa-rbac-0.1.3.tgz
    version: 0.1.3
  - apiVersion: v2
    created: "2022-01-08T02:05:49.710379502Z"
    description: 'A Helm chart for Kubernetes implementing RBAC rules for saritasa
      developers, devops and client''s team members  You can see role bindings this
      way   ```sh ➜ k krew install rbac-lookup ➜ k rbac-lookup --kind group G saritasa   saritasa:sso:developers    ci                 Role/saritasa-developers-role   saritasa:sso:developers    ingress-nginx      Role/saritasa-developers-role   saritasa:sso:developers    postgres           Role/saritasa-developers-role   saritasa:sso:developers    prod               Role/saritasa-developers-readonly-role   saritasa:sso:developers    cluster-wide       ClusterRole/saritasa-developers-readonly-clusterrole
      ````  ## `example usage with agocd`  Install the chart:  ``` helm repo add saritasa
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/ ```  Make the argocd
      manifest  ```yaml apiVersion: argoproj.io/v1alpha1 kind: Application metadata:   name:
      rbac   namespace: argo-cd   finalizers:   - resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "1000" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: prod   project: default   source:     chart:
      saritasa-rbac     helm:       values: |         rbac:           client:             name:
      "producebox"             apps: true           developers:             ci: true             ingressNginx:
      true             postgres: true           devops: true     repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.0"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ````  You can also add any ad-hoc RBAC role/bindings via
      .Values.extraRbac multiline string  For example:  ```yaml extraRbac: |   kind:
      Role   apiVersion: rbac.authorization.k8s.io/v1   metadata:    name: cheesecake-users-readonly-role    namespace:
      {{ .Release.Namespace }}   rules:     - apiGroups: [""]       resources:  ["services",
      "pods", "pods/log", "configmaps"]       verbs: ["get", "list", "watch"]     -
      apiGroups: [""]       resources:  ["pods"]       verbs: ["delete"]     - apiGroups:
      [""]       resources: ["pods/portforward", "services/portforward", "pods/exec"]       verbs:
      ["create"]     - apiGroups: ["extensions"]       resources:  ["*"]       verbs:
      ["get", "list", "watch"]     - apiGroups: ["batch"]       resources:  ["*"]       verbs:
      ["get", "list", "watch"]     - apiGroups: ["apps"]       resources:  ["*"]       verbs:
      ["get", "list", "watch"]     - apiGroups: ["tekton.dev"]       resources:  ["*"]       verbs:  ["taskruns",
      "pipelineruns", "pipelines", "tasks"]    ---   kind: RoleBinding   apiVersion:
      rbac.authorization.k8s.io/v1   metadata:     name: cheesecake:users     namespace:
      {{ .Release.Namespace }}   roleRef:     apiGroup: rbac.authorization.k8s.io     kind:
      Role     name: cheesecake-users-readonly-role   subjects:   - apiGroup: rbac.authorization.k8s.io     kind:
      Group     name: cheesecake:users ```` '
    digest: 0a7b3b87282fabcf9677c27d8581af69887332b045e0669dceacad4da5f075f6
    maintainers:
    - email: nospam@saritasa.com
      name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-rbac
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-rbac-0.1.2/saritasa-rbac-0.1.2.tgz
    version: 0.1.2
  - apiVersion: v2
    created: "2021-11-19T22:46:36.062834549Z"
    description: 'A Helm chart for Kubernetes implementing RBAC rules  You can see
      role bindings this way   ```sh ➜ k krew install rbac-lookup ➜ k rbac-lookup
      --kind group G saritasa   saritasa:sso:developers    ci                 Role/saritasa-developers-role   saritasa:sso:developers    ingress-nginx      Role/saritasa-developers-role   saritasa:sso:developers    postgres           Role/saritasa-developers-role   saritasa:sso:developers    prod               Role/saritasa-developers-readonly-role   saritasa:sso:developers    cluster-wide       ClusterRole/saritasa-developers-readonly-clusterrole
      ````  ## `example usage with agocd`  Install the chart:  ``` helm repo add saritasa
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/ ```  Make the argocd
      manifest  ```yaml apiVersion: argoproj.io/v1alpha1 kind: Application metadata:   name:
      rbac   namespace: argo-cd   finalizers:   - resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "1000" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: prod   project: default   source:     chart:
      saritasa-rbac     helm:       values: |         rbac:           developers:             ci:
      true             ingressNginx: true             postgres: true           devops:
      true     repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.0"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ````  You can also add any ad-hoc RBAC role/bindings via
      .Values.extraRbac multiline string  For example:  ```yaml extraRbac: |   kind:
      Role   apiVersion: rbac.authorization.k8s.io/v1   metadata:    name: cheesecake-users-readonly-role    namespace:
      {{ .Release.Namespace }}   rules:     - apiGroups: [""]       resources:  ["services",
      "pods", "pods/log", "configmaps"]       verbs: ["get", "list", "watch"]     -
      apiGroups: [""]       resources:  ["pods"]       verbs: ["delete"]     - apiGroups:
      [""]       resources: ["pods/portforward", "services/portforward", "pods/exec"]       verbs:
      ["create"]     - apiGroups: ["extensions"]       resources:  ["*"]       verbs:
      ["get", "list", "watch"]     - apiGroups: ["batch"]       resources:  ["*"]       verbs:
      ["get", "list", "watch"]     - apiGroups: ["apps"]       resources:  ["*"]       verbs:
      ["get", "list", "watch"]     - apiGroups: ["tekton.dev"]       resources:  ["*"]       verbs:  ["taskruns",
      "pipelineruns", "pipelines", "tasks"]    ---   kind: RoleBinding   apiVersion:
      rbac.authorization.k8s.io/v1   metadata:     name: cheesecake:users     namespace:
      {{ .Release.Namespace }}   roleRef:     apiGroup: rbac.authorization.k8s.io     kind:
      Role     name: cheesecake-users-readonly-role   subjects:   - apiGroup: rbac.authorization.k8s.io     kind:
      Group     name: cheesecake:users ```` '
    digest: 1a81d0ef0b023d7433d0af171f2cd6da4aa0c349efb6da51057d76b64d50e2d4
    maintainers:
    - email: nospam@saritasa.com
      name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-rbac
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-rbac-0.1.1/saritasa-rbac-0.1.1.tgz
    version: 0.1.1
  - apiVersion: v2
    created: "2021-11-09T01:38:40.494906828Z"
    description: 'A Helm chart for Kubernetes implementing RBAC rules  You can see
      role bindings this way   ```sh ➜ k crew install rbac-lookup ➜ k rbac-lookup
      --kind group G saritasa   saritasa:sso:developers    ci                 Role/saritasa-developers-role   saritasa:sso:developers    ingress-nginx      Role/saritasa-developers-role   saritasa:sso:developers    postgres           Role/saritasa-developers-role   saritasa:sso:developers    prod               Role/saritasa-developers-readonly-role   saritasa:sso:developers    cluster-wide       ClusterRole/saritasa-developers-readonly-clusterrole
      ````  ## `example usage with agocd`  Install the chart:  ``` helm repo add saritasa
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/ ```  Make the argocd
      manifest  ```yaml apiVersion: argoproj.io/v1alpha1 kind: Application metadata:   name:
      rbac   namespace: argo-cd   finalizers:   - resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "1000" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: prod   project: default   source:     chart:
      saritasa-rbac     helm:       values: |         chartVersion: 0.1.0         developers:           ci:
      true           ingressNginx: true           postgres: true         devops: true         enabled:
      true     repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.0"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ````  You can also add any ad-hoc RBAC role/bindings via
      .Values.extraRbac multiline string  For example:  ```yaml extraRbac: |   kind:
      Role   apiVersion: rbac.authorization.k8s.io/v1   metadata:    name: cheesecake-users-readonly-role    namespace:
      {{ .Release.Namespace }}   rules:     - apiGroups: [""]       resources:  ["services",
      "pods", "pods/log", "configmaps"]       verbs: ["get", "list", "watch"]     -
      apiGroups: [""]       resources:  ["pods"]       verbs: ["delete"]     - apiGroups:
      [""]       resources: ["pods/portforward", "services/portforward", "pods/exec"]       verbs:
      ["create"]     - apiGroups: ["extensions"]       resources:  ["*"]       verbs:
      ["get", "list", "watch"]     - apiGroups: ["batch"]       resources:  ["*"]       verbs:
      ["get", "list", "watch"]     - apiGroups: ["apps"]       resources:  ["*"]       verbs:
      ["get", "list", "watch"]     - apiGroups: ["tekton.dev"]       resources:  ["*"]       verbs:  ["taskruns",
      "pipelineruns", "pipelines", "tasks"]    ---   kind: RoleBinding   apiVersion:
      rbac.authorization.k8s.io/v1   metadata:     name: cheesecake:users     namespace:
      {{ .Release.Namespace }}   roleRef:     apiGroup: rbac.authorization.k8s.io     kind:
      Role     name: cheesecake-users-readonly-role   subjects:   - apiGroup: rbac.authorization.k8s.io     kind:
      Group     name: cheesecake:users ```` '
    digest: c9438bc2a77898c2f50dce320a07e1173bb9fbfdc53215084b9c7504f5a49f2f
    maintainers:
    - email: nospam@saritasa.com
      name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-rbac
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-rbac-0.1.0/saritasa-rbac-0.1.0.tgz
    version: 0.1.0
  saritasa-tekton:
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2022-06-16T23:05:50.197999312Z"
    description: 'A Helm chart for Tekton.  Implements: - tekton engine - tekton dashboard
      - tekton triggers - tekton dashboard ingress - webhook ingress  ## `example
      usage with argocd`  Install the chart:  ``` helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then create the manifest and apply:   ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-engine   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "40" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: tekton-pipelines   project: default   source:     chart:
      saritasa-tekton     helm:       values: |         domainZone: staging.site.com          #
      install engine         engine:           enabled: true           config:             defaultServiceAccount:
      "build-bot-sa"             defaultTimeoutMinutes: "60"             defaultPodTemplate:
      |               nodeSelector:                 ci: "true"          # install
      triggers         triggers:           enabled: true          # install dashboard
      with a public ingress         dashboard:           enabled: true           ingress:             enabled:
      true             annotations:               kubernetes.io/ingress.class: "nginx"               nginx.ingress.kubernetes.io/proxy-body-size:
      100m               cert-manager.io/cluster-issuer: "letsencrypt-prod"               nginx.ingress.kubernetes.io/auth-type:
      basic               nginx.ingress.kubernetes.io/auth-secret: tekton-basic-auth               nginx.ingress.kubernetes.io/auth-realm:
      "Authentication Required"               argocd.argoproj.io/sync-wave: "1"             hosts:               -
      host: tekton.staging.site.com                 paths:                   - path:
      /                     pathType: Prefix                     backend:                       service:                         name:
      tekton-dashboard                         port:                           number:
      9097             tls:              - secretName: tekton.staging.site.com-crt                hosts:                  -
      tekton.staging.site.com          # install github webhook ingress that invokes
      tekton''s eventlistener         webhook:           enabled: true           namespace:
      "ci"           ingress:             enabled: true             annotations:               kubernetes.io/ingress.class:
      "nginx"               nginx.ingress.kubernetes.io/proxy-body-size: 100m               cert-manager.io/cluster-issuer:
      "letsencrypt-prod"               argocd.argoproj.io/sync-wave: "10"             hosts:               -
      host: webhook.staging.site.com                 paths:                   - path:
      /                     pathType: Prefix                     backend:                       service:                         name:
      el-build-pipeline-event-listener                         port:                           number:
      8080             tls:              - secretName: webhook.staging.site.com-crt                hosts:                  -
      webhook.staging.site.com          serviceAccount:           create: true           name:
      "build-bot-sa"          nodeSelector:           tekton_builder: "true"      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true  ```  Keep in mind that tekton has config-default configmap,
      an example you can see [here](https://github.com/tektoncd/pipeline/blob/main/config/config-defaults.yaml).
      You can customize it values in this map `engine.config: {}`.  Just add keys
      in the map and they will be added into the tekton-pipelines/config-defaults
      configmap.  ```yaml engine:   config:     defaultServiceAccount: "build-bot-sa"     defaultTimeoutMinutes:
      "60"     defaultPodTemplate: |       nodeSelector:         ci: "true" ```  If
      you want to pull images from a private registry (or if you want to skip 200
      pulls on dockerhub)  ``` imagePullSecrets:   - name: "your-docker-secret-name"
      ```  You can generate that secret by doing the following  ``` kubectl create
      secret -n argo-cd generic docker-saritasa-infra-v2-ro \   --from-file=.dockerconfigjson=~/.docker/config.json
      \   --type=kubernetes.io/dockerconfigjson ```  Make dure this `~/.docker/config.json`
      is cleaned from non-infra-v2 registries first. '
    digest: 53e48b59d350e4c41c1de3f9267972d0877c6ead8e56ffaee7f1cf5a69ee4bb1
    maintainers:
    - email: nospam@saritasa.com
      name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-0.1.7/saritasa-tekton-0.1.7.tgz
    version: 0.1.7
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2022-02-10T09:57:26.180130097Z"
    description: 'A Helm chart for Tekton.  Implements: - tekton engine - tekton dashboard
      - tekton triggers - tekton dashboard ingress - webhook ingress  ## `example
      usage with argocd`  Install the chart:  ``` helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then create the manifest and apply:   ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-engine   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "40" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: tekton-pipelines   project: default   source:     chart:
      saritasa-tekton     helm:       values: |         domainZone: staging.site.com          #
      install engine         engine:           enabled: true           config:             defaultServiceAccount:
      "build-bot-sa"             defaultTimeoutMinutes: "60"             defaultPodTemplate:
      |               nodeSelector:                 ci: "true"          # install
      triggers         triggers:           enabled: true          # install dashboard
      with a public ingress         dashboard:           enabled: true           ingress:             enabled:
      true             annotations:               kubernetes.io/ingress.class: "nginx"               nginx.ingress.kubernetes.io/proxy-body-size:
      100m               cert-manager.io/cluster-issuer: "letsencrypt-prod"               nginx.ingress.kubernetes.io/auth-type:
      basic               nginx.ingress.kubernetes.io/auth-secret: tekton-basic-auth               nginx.ingress.kubernetes.io/auth-realm:
      "Authentication Required"               argocd.argoproj.io/sync-wave: "1"             hosts:               -
      host: tekton.staging.site.com                 paths:                   - path:
      /                     pathType: Prefix                     backend:                       service:                         name:
      tekton-dashboard                         port:                           number:
      9097             tls:              - secretName: tekton.staging.site.com-crt                hosts:                  -
      tekton.staging.site.com          # install github webhook ingress that invokes
      tekton''s eventlistener         webhook:           enabled: true           namespace:
      "ci"           ingress:             enabled: true             annotations:               kubernetes.io/ingress.class:
      "nginx"               nginx.ingress.kubernetes.io/proxy-body-size: 100m               cert-manager.io/cluster-issuer:
      "letsencrypt-prod"               argocd.argoproj.io/sync-wave: "10"             hosts:               -
      host: webhook.staging.site.com                 paths:                   - path:
      /                     pathType: Prefix                     backend:                       service:                         name:
      el-build-pipeline-event-listener                         port:                           number:
      8080             tls:              - secretName: webhook.staging.site.com-crt                hosts:                  -
      webhook.staging.site.com          serviceAccount:           create: true           name:
      "build-bot-sa"          nodeSelector:           tekton_builder: "true"      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true  ```  Keep in mind that tekton has config-default configmap,
      an example you can see [here](https://github.com/tektoncd/pipeline/blob/main/config/config-defaults.yaml).
      You can customize it values in this map `engine.config: {}`.  Just add keys
      in the map and they will be added into the tekton-pipelines/config-defaults
      configmap.  ```yaml engine:   config:     defaultServiceAccount: "build-bot-sa"     defaultTimeoutMinutes:
      "60"     defaultPodTemplate: |       nodeSelector:         ci: "true" ```  If
      you want to pull images from a private registry (or if you want to skip 200
      pulls on dockerhub)  ``` imagePullSecrets:   - name: "your-docker-secret-name"
      ```  You can generate that secret by doing the following  ``` kubectl create
      secret -n argo-cd generic docker-saritasa-infra-v2-ro \   --from-file=.dockerconfigjson=~/.docker/config.json
      \   --type=kubernetes.io/dockerconfigjson ```  Make dure this `~/.docker/config.json`
      is cleaned from non-infra-v2 registries first. '
    digest: 2b740a4ae302f28c6d71199c9cd6e117b377b5a8a35320cd50e1f2888e648840
    maintainers:
    - email: nospam@saritasa.com
      name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-0.1.5/saritasa-tekton-0.1.5.tgz
    version: 0.1.5
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2021-11-03T03:13:37.48809032Z"
    description: 'A Helm chart for Tekton.  Implements: - tekton engine - tekton dashboard
      - tekton triggers - tekton dashboard ingress - webhook ingress  ## `example
      usage with argocd`  Install the chart:  ``` helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then create the manifest and apply:   ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-engine   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "40" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: tekton-pipelines   project: default   source:     chart:
      saritasa-tekton     helm:       values: |         domainZone: staging.site.com          #
      install engine         engine:           enabled: true           config:             defaultServiceAccount:
      "build-bot-sa"             defaultTimeoutMinutes: "60"             defaultPodTemplate:
      |               nodeSelector:                 ci: "true"          # install
      triggers         triggers:           enabled: true          # install dashboard
      with a public ingress         dashboard:           enabled: true           ingress:             enabled:
      true             annotations:               kubernetes.io/ingress.class: "nginx"               nginx.ingress.kubernetes.io/proxy-body-size:
      100m               cert-manager.io/cluster-issuer: "letsencrypt-prod"               nginx.ingress.kubernetes.io/auth-type:
      basic               nginx.ingress.kubernetes.io/auth-secret: tekton-basic-auth               nginx.ingress.kubernetes.io/auth-realm:
      "Authentication Required"               argocd.argoproj.io/sync-wave: "1"             hosts:               -
      host: tekton.staging.site.com                 paths:                   - path:
      /                     pathType: Prefix                     backend:                       service:                         name:
      tekton-dashboard                         port:                           number:
      9097             tls:              - secretName: tekton.staging.site.com-crt                hosts:                  -
      tekton.staging.site.com          # install github webhook ingress that invokes
      tekton''s eventlistener         webhook:           enabled: true           namespace:
      "ci"           ingress:             enabled: true             annotations:               kubernetes.io/ingress.class:
      "nginx"               nginx.ingress.kubernetes.io/proxy-body-size: 100m               cert-manager.io/cluster-issuer:
      "letsencrypt-prod"               argocd.argoproj.io/sync-wave: "10"             hosts:               -
      host: webhook.staging.site.com                 paths:                   - path:
      /                     pathType: Prefix                     backend:                       service:                         name:
      el-build-pipeline-event-listener                         port:                           number:
      8080             tls:              - secretName: webhook.staging.site.com-crt                hosts:                  -
      webhook.staging.site.com          serviceAccount:           create: true           name:
      "build-bot-sa"          nodeSelector:           tekton_builder: "true"      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true  ```  Keep in mind that tekton has config-default configmap,
      an example you can see [here](https://github.com/tektoncd/pipeline/blob/main/config/config-defaults.yaml).
      You can customize it values in this map `engine.config: {}`.  Just add keys
      in the map and they will be added into the tekton-pipelines/config-defaults
      configmap.  ```yaml engine:   config:     defaultServiceAccount: "build-bot-sa"     defaultTimeoutMinutes:
      "60"     defaultPodTemplate: |       nodeSelector:         ci: "true" ```  If
      you want to pull images from a private registry (or if you want to skip 200
      pulls on dockerhub)  ``` imagePullSecrets:   - name: "your-docker-secret-name"
      ```  You can generate that secret by doing the following  ``` kubectl create
      secret -n argo-cd generic docker-saritasa-infra-v2-ro \   --from-file=.dockerconfigjson=~/.docker/config.json
      \   --type=kubernetes.io/dockerconfigjson ```  Make dure this `~/.docker/config.json`
      is cleaned from non-infra-v2 registries first. '
    digest: edd807df11329e203e7ba37a05bf907eb992438297a33e243b53f8e058cb7f04
    maintainers:
    - email: nospam@saritasa.com
      name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-0.1.4/saritasa-tekton-0.1.4.tgz
    version: 0.1.4
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2021-10-31T16:24:07.699080661Z"
    description: A Helm chart for Tekton
    digest: 11fea928ff6833ade2780b0fbd541ae23ec6f3c281a8318c8212532e2f11b380
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-0.1.3/saritasa-tekton-0.1.3.tgz
    version: 0.1.3
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2021-10-31T15:57:38.031144454Z"
    description: A Helm chart for Tekton
    digest: 6f92c0d41aa18849e71780fb883cd2974d7e614ced0c8232f579df75134357c1
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-0.1.2/saritasa-tekton-0.1.2.tgz
    version: 0.1.2
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2021-10-26T00:30:40.529102821Z"
    description: A Helm chart for Tekton
    digest: 0d65c0d60014854c3cf783cfec110fc388eb2294d0a97bd277399736383ab668
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-0.1.1/saritasa-tekton-0.1.1.tgz
    version: 0.1.1
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2021-10-25T23:32:29.866405033Z"
    description: A Helm chart for Tekton
    digest: 088ed5b3762b329aed44c248eb060823919423b232d9b7ec3ac08c92ee84dd84
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-0.1.0/saritasa-tekton-0.1.0.tgz
    version: 0.1.0
  saritasa-tekton-apps:
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2022-09-25T22:41:08.081403312Z"
    description: 'A Helm chart for tekton apps (rbac, eventlistener)  Implements:
      - dynamic records for eventlistener - PVCs - RBAC - configmaps for each app
      - triggerbindings for each app - kubernetes job to make sure the PVCs are bound
      and argocd marks the app as healthy - argocd project for each app - argocd application
      for each app component  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then declare dynamic list of projects (and associated components of that
      project like backend, api, frontend, etc) that would be dynamically added into
      the tekton''s eventlistener manifest.  Each component should be a separate git
      repository.  ```yaml --- apiVersion: argoproj.io/v1alpha1 kind: Application
      metadata:   name: tekton-apps   namespace: argo-cd   finalizers:   - resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "41" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-apps     helm:       values: |         environment: staging         gitBranchPrefixes:           -
      staging         storageClassName: gp3         nodeSelector:           ops: ''true''         aws:           region:
      "us-west-2"           dns: staging.site.com         defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com         argocd:           server:
      deploy.staging.site.com         eventlistener:           enableWebhookSecret:
      true         apps:           - project: vp             enabled: true             argocd:               labels:                 created-by:
      xxx                 ops-main: xxx                 ops-secondary: xxx                 pm:
      xxx                 tm: xxx               namespace: prod             mailList:
      vp@site.com             devopsMailList: devops+vp@site.com             jiraURL:
      https://site.atlassian.net/browse/vp             tektonURL: https://tekton.staging.site.com/#/namespaces/ci/pipelineruns             slack:
      client-vp-ci             kubernetesRepository:               name: vp-kubernetes-aws               branch:
      main               url: git@github.com:org-name/vp-kubernetes-aws.git              components:               -
      name: backend                 repository: vp-backend                 pipeline:
      buildpack-django-build-pipeline                 applicationURL: https://api.staging.site.com                 eventlistener:                   template:
      buildpack-django-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/backend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/builder:v1                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/runner:v1               -
      name: frontend                 repository: vp-frontend                 pipeline:
      buildpack-frontend-build-pipeline                 applicationURL: https://staging.site.com                 eventlistener:                   template:
      buildpack-frontend-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/frontend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/builder:full                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/runner:full                   -
      name: source_subpath                     value: dist/web          # make sure
      PVCs are bound after the chart is synced         # by temporarily mount them
      into short-live job.         runPostInstallMountPvcJob: false      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.16"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true    ```    Above helm chart creates a new ArgoCD project
      for each project in values, for each component in project''s components there
      is created a separate ArgoCD   application and required for Tekton ci/cd resources
      (triggerbindings, roles, configmaps, jobs, serviceaccounts, pvcs and etc).    #
      fill below parameters for each `project` block    - apps[PROJECT].environment
      - possbility to define custom project''s environment, needed for cases when
      need to deploy `dev` and `prod` envs to the same cluster. For example `xxx`
      dev     and prod both deployed in rocks EKS (not required)   - apps[PROJECT].enabled
      - boolean value to define whether the project enabled or not (required)   -
      apps[PROJECT].argocd.labels - labels which are added to ArgoCD project (required)   -
      apps[PROJECT].argocd.namespace - allowed for ArgoCD project namespace (required)   -
      apps[PROJECT].argocd.syncWave - ArgoCD project sync wave, i.e. sequence in which
      project should be synced (not required, default: "200")   - apps[PROJECT].argocd.sourceRepos[]
      - source repositories added to ArgoCD project (not required, default: [<apps[PROJECT].kubernetesRepository.url>])   -
      apps[PROJECT].argocd.extraDestinationNamespaces[] - adds extra destination namespaces
      for ArgoCD project to be able to create custom apps within project''s kubernetes
      repo (not required, default: null)   - apps[PROJECT].mailList - project''s team
      email address (required)   - apps[PROJECT].devopsMailList - project''s devops
      team email address (required)   - apps[PROJECT].jiraURL - project''s JIRA url
      (required)   - apps[PROJECT].tektonURL - link to Tekton pipelineruns used in
      Tekton ConfigMap as `TEKTON_URL` during Slack notification send (required)   -
      apps[PROJECT].slack - project''s Slack channel name (required)   - apps[PROJECT].kubernetesRepository.name
      - project''s kubernetes repository name used in ArgoCD application and Tekton
      TriggerBinding (may be absent and replaced with     `apps[PROJECT].components[NAME].argocd`
      and `apps[PROJECT].argocd.sourceRepos[]` blocks in case if project has no kubernetes
      repo)   - apps[PROJECT].kubernetesRepository.branch - project''s kubernetes
      repository branch used in ArgoCD application and Tekton TriggerBinding (may
      be absent and replaced     with `apps[PROJECT].components[NAME].argocd` and
      `apps[PROJECT].argocd.sourceRepos[]` blocks in case if project has no kubernetes
      repo)   - apps[PROJECT].kubernetesRepository.url - project''s kubernetes repository
      url used in ArgoCD application and Tekton TriggerBinding (may be absent and
      replaced with     `apps[PROJECT].components[NAME].argocd` and `apps[PROJECT].argocd.sourceRepos[]`
      blocks in case if project has no kubernetes repo)    Basically we have 2 different
      types of ci/cd - basic (buildpacks, kaniko) and wordpress ones. So depending
      on project''s component type you will need to fill different parameters.    #
      fill below parameters for each `component` block    - apps[PROJECT].components[NAME].repository
      - the name of the repository containing the code (may be absent in case of wordpress
      application without deployment, i.e. bolrdswp, taco,     saritasa-wordpress-demo)   -
      apps[PROJECT].components[NAME].pipeline - the name of the pipeline building
      the code from the repository above   - apps[PROJECT].components[NAME].argocd.source.syncWave
      - custom component ArgoCD application sync wave (default: "210")   - apps[PROJECT].components[NAME].argocd.source.path
      - path to directory responsible for kubernetes resources creation of the ArgoCD
      Application (default: kubernetes repo path for basic     projects "apps/<apps[PROJECT].components[NAME].name>/manifests/<environment>"
      or "null" for wordpress projects)   - apps[PROJECT].components[NAME].argocd.source.repoUrl
      - url of repository which should be used for ArgoCD Application (default: kubernetes
      repo for basic projects     "<apps[PROJECT].kubernetesRepository.url>" or `https://charts.bitnami.com/bitnami`
      for wordpress projects)   - apps[PROJECT].components[NAME].argocd.source.targetRevision
      - tag or branch in the repository for ArgoCD Application (default: kubernetes
      branch for basic projects     "<apps[PROJECT].kubernetesRepository.branch>"
      or "11.0.14" for wordpress projects)   - apps[PROJECT].components[NAME].argocd.ignoreDeploymentReplicasDiff
      - flag whether this exact ArgoCD application should ignore `Replicas` count
      differences for deployments. It may be needed for `staging` and `prod` environments
      which use HPA (default: false)   - apps[PROJECT].components[NAME].applicationURL
      - url that should be used in tekton build ConfigMap `APPLICATION_URL` param   -
      apps[PROJECT].components[NAME].tektonKubernetesRepoDeployKeyName - name of existing
      in kubernetes cluster secret with SSH key to kubernetes repository, used in
      `kustomize` deployment     step (i.e. addon-backend-deploy-key). This param
      sets by default to `<project>-kubernetes-aws-deploy-key` if project has `kubernetesRepository`
      param in values (actual only for basic     components, not wordpress)   - apps[PROJECT].components[NAME].eventlistener.template
      - the name of the trigger template for the component to be used   - apps[PROJECT].components[NAME].eventlistener.enableWebhookSecret
      - should you enable the git web hook for this particular app/component in the
      eventlistener configuration   - apps[PROJECT].components[NAME].eventlistener.filter
      - custom filter for the component of the eventlistener   - apps[PROJECT].components[NAME].eventlistener.extraOverlays
      - extra overlays to be added into the eventlistener for the component   - apps[PROJECT].components[NAME].eventlistener.eventTypes
      - github event types to trigger the ci/cd   - apps[PROJECT].components[NAME].eventlistener.gitWebhookBranches[]
      - list of branches, push to which triggers ci/cd   - apps[PROJECT].components[NAME].extraBuildConfigParams
      - additional key/values to be added into `build-pipeline-config configmap` ConfigMap
      associated with the app   - apps[PROJECT].components[NAME].triggerBinding -
      values to be added into the TriggerBinding manifest except default ones    What
      is important to know is that any key defined in apps[PROJECT].components[NAME].triggerBinding
      would be added as is   into the generated triggerbinding associated with your
      app. However the chart renders some default values based on the values   in
      this values.yaml file:      - application, project, environment, docker_registry,
      kubernetes_repository_ssh_url, kubernetes_branch, kubernetes_repository_kustomize_path,
      source_subpath (for basic components)     - application, project, environment,
      namespace (for wordpress components)     # fill below parameters block only
      for `wordpress` components    - apps[PROJECT].components[NAME].wordpress.imageTag
      - tag of the wordpress image (default: "5.7.2")   - apps[PROJECT].components[NAME].wordpress.repository_ssh_url
      - project''s wordpress repository SSH url (default: null, may be absent if project
      has no wordpress repo)   - apps[PROJECT].components[NAME].wordpress.resources
      - wordpress pod resources params (default: requests.cpu: 100m, requests.memory:
      128Mi)   - apps[PROJECT].components[NAME].wordpress.commonLabels - wordpress
      pod common labels (default: commonLabels.tech_stack: php, commonLabels.application:
      wordpress)   - apps[PROJECT].components[NAME].wordpress.wordpressTablePrefix
      - wordpress DB tables prefix (default: wp_)   - apps[PROJECT].components[NAME].wordpress.existingSecret
      - name of existing in kubernetes secret with wp admin auth info (default: "<project_name>-<component_name>-<env>",     i.e.
      "taco-wordpress-dev")   - apps[PROJECT].components[NAME].wordpress.updateStrategy
      - strategy that should be used for wordpress pod update (default: updateStrategy.type:
      RollingUpdate,     updateStrategy.rollingUpdate.maxSurge: 0%, updateStrategy.rollingUpdate.maxUnavailable:
      100%, i.e. stop old pod and then create a new one)   - apps[PROJECT].components[NAME].wordpress.smtp.host
      - SMTP host for sending emails (default: mailhog.mailhog.svc.cluster.local)   -
      apps[PROJECT].components[NAME].wordpress.smtp.port - SMTP port for sending emails
      (default: 1025)   - apps[PROJECT].components[NAME].wordpress.smtp.user - SMTP
      user for sending emails (default: <project_name>, i.e. taco)   - apps[PROJECT].components[NAME].wordpress.smtp.password
      - SMTP password for sending emails (default: anypassword)   - apps[PROJECT].components[NAME].wordpress.nodeSelector
      - wordpress pod node selector params (default: nodeSelector.tech_stack: php,
      nodeSelector.pvc: "true")   - apps[PROJECT].components[NAME].wordpress.podSecurityContext
      - wordpress pod''s security context params (default: podSecurityContext.enabled:
      true, podSecurityContext.fsGroup: 1000)   - apps[PROJECT].components[NAME].wordpress.containerSecurityContext
      - wordpress pod container''s security context params (default: containerSecurityContext.enabled:
      true,     containerSecurityContext.runAsUser: 1000)   - apps[PROJECT].components[NAME].wordpress.ci
      - boolean flag which defines whether wordpress project has ci/cd or not (default:
      true)   - apps[PROJECT].components[NAME].wordpress.extraInitContainers - extra
      ci/cd init containers if needed, enabled only if wordpress component has `ci`
      flag enabled (default: null)   - apps[PROJECT].components[NAME].wordpress.extraVolumesSshKeySecret
      - name of a secret with wordpress repository SSH url (default: "<project_name>-<component_name>-deploy-key",     i.e.
      "taco-wordpress-deploy-key")   - apps[PROJECT].components[NAME].wordpress.extraVolumes
      - extra volumes that might be needed to wordpress pod (default: null)   - apps[PROJECT].components[NAME].wordpress.ingress.hostname
      - wordpress ingress hostname (default: "<project_name>.saritasa.rocks", i.e.
      "taco.saritasa.rocks")   - apps[PROJECT].components[NAME].wordpress.ingress.annotations
      - wordpress ingress annotations (default: kubernetes.io/ingress.class: "nginx",
      cert-manager.io/cluster-issuer: "letsencrypt-prod",     nginx.ingress.kubernetes.io/proxy-body-size:
      100m, nginx.ingress.kubernetes.io/proxy-connect-timeout: "300", nginx.ingress.kubernetes.io/proxy-next-upstream-timeout:
      "300",     nginx.ingress.kubernetes.io/auth-type: basic, nginx.ingress.kubernetes.io/auth-secret:
      <ingress.authSecret>, nginx.ingress.kubernetes.io/auth-realm: "Authentication
      Required",     nginx.ingress.kubernetes.io/server-snippet: |-,   add_header
      X-Robots-Tag "noindex, nofollow, nosnippet, noarchive")   - apps[PROJECT].components[NAME].wordpress.ingress.authSecret
      - name of kubernetes secret that should be used in ingress for basic auth (default:
      "<project_name>-<compinent_name>-<env>-basic-auth",     i.e. "taco-wordpress-dev-basic-auth")   -
      apps[PROJECT].components[NAME].wordpress.ingress.extraHosts - list of extra
      hosts that may be defined in ingress (default: null)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.host
      - wordpress DB host (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.user
      - wordpress DB user (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.existingSecret
      - name of existing in kubernetes secret with DB user password (required)   -
      apps[PROJECT].components[NAME].wordpress.externalDatabase.database - wordpress
      DB name (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.port
      - wordpress DB port (default: 3306)   - apps[PROJECT].components[NAME].wordpress.wordpressExtraConfigContent
      - wordpress extra configs if needed (default: null)   - apps[PROJECT].components[NAME].wordpress.extraEnvVars
      - wordpress extra env vars if needed (default: null)    Example of values with
      extra `eventlistener` and `extraBuildConfigParams` in component:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           gitBranchPrefixes:             -
      staging           storageClassName: gp2           aws:             region: "us-west-2"             dns:
      staging.site.com           defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com           argocd:             server:
      deploy.staging.site.com           eventlistener:             enableWebhookSecret:
      true           apps:             - project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: prod               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.site.com/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack                   applicationURL: https://api.site.com                   eventlistener:                     template:
      buildpack-backend-build-pipeline-trigger-template                   extraBuildConfigParams:
      # what additional K/V pairs you want to add into the build-pipeline-config configmap                     KEY:
      value                   triggerBinding:                     - name: docker_registry_repository                       value:
      XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/backend                     - name:
      buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/runner:v1                 -
      name: frontend                   repository: xxx-frontend                   pipeline:
      buildpack                   applicationURL: https://site.com                   eventlistener:                     enableWebhookSecret:
      false                     filter: (body.ref.startsWith(''refs/heads/develop'')
      || body.ref.startsWith(''refs/heads/release/''))                     template:
      buildpack-frontend-build-pipeline-trigger-template                     extraOverlays:
      []                     # - key: truncated_sha                     #   expression:
      "body.head_commit.id.truncate(7)"                     eventTypes: ["pull_request",
      "push"]                   extraBuildConfigParams: {}                   triggerBinding:                     -
      name: docker_registry_repository                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/frontend                     -
      name: buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web            # make
      sure PVCs are bound after the chart is synced           # by temporarily mount
      them into short-live job.           runPostInstallMountPvcJob: false        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true    ```    Example of
      old application from `saritasa-clients` repo, which has no separate `kubernetes`
      repository. Here we replace `apps[PROJECT].kubernetesRepository` block with   `apps[PROJECT].argocd.sourceRepos`
      and `apps[PROJECT].components[NAME].argocd` block, also it is required to set
      `apps[PROJECT].components[NAME].tektonKubernetesRepoDeployKeyName`   in such
      a case to use correct secret with deploy key as far as there is no kubernetes
      repo that is used by default.    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      git@github.com:saritasa-nest/xxx-backend.git                   - git@github.com:saritasa-nest/xxx-frontend.git               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: backend                   repository:
      xxx-backend                   pipeline: buildpack-django-build-pipeline                   applicationURL:
      https://api.xxx.site.url                   argocd:                     source:                       path:
      .kubernetes/manifests/dev                       repoUrl: git@github.com:saritasa-nest/xxx-backend.git                       targetRevision:
      develop                   eventlistener:                     template: buildpack-django-build-pipeline-trigger-template                   tektonKubernetesRepoDeployKeyName:
      xxx-backend-deploy-key                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1                 -
      name: frontend                   repository: xxx-frontend                   pipeline:
      buildpack-frontend-build-pipeline                   applicationURL: https://xxx.site.url                   argocd:                     source:                       path:
      .kubernetes/manifests/dev                       repoUrl: git@github.com:saritasa-nest/xxx-frontend.git                       targetRevision:
      develop                   eventlistener:                     template: buildpack-frontend-build-pipeline-trigger-template                   tektonKubernetesRepoDeployKeyName:
      xxx-frontend-deploy-key                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/frontend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Example with
      creating an ArgoCD project and application with its custom `environment` (case
      when in common `staging` environment we need to create for some reason project
      with   `dev` environment). Here is added an extra `apps[PROJECT].environment`
      param, which overrides default `environment` in helm values for this project,
      and   `apps[PROJECT].components[NAME].eventlistener.gitWebhookBranches` param,
      which defines that ci/cd should be trigger on push to `develop` branch.    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack-django-build-pipeline                   applicationURL: https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Also there might
      a situation that you would like to provision custom utility ArgoCD Application
      in argo-cd from project''s kubernetes repo (for example VP project provisions   like
      this `jitsi` application). To reach this you might need to add an extra destination
      namespace to ArgoCD Project, you should use   `apps[PROJECT].argocd.extraDestinationNamespaces[]`
      param for that like in below example.    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev                 extraDestinationNamespaces:                   -
      argo-cd               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack-django-build-pipeline                   applicationURL: https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    If you want
      to enable ignoring deployment replicas count differences in ArgoCD application
      of your component add `apps[PROJECT].components[NAME].argocd.ignoreDeploymentReplicasDiff:
      true` flag like in the below example (it may be needed for `staging` and `prod`
      envs, where you have horizontal pod autoscheduling - HPA):    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev                 extraDestinationNamespaces:                   -
      argo-cd               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   argocd:                     ignoreDeploymentReplicasDiff:
      true                   pipeline: buildpack-django-build-pipeline                   applicationURL:
      https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Simple wordpress
      application example filled by default:    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: wordpress                   repository:
      xxx-wordpress                   pipeline: wordpress-build-pipeline                   applicationURL:
      https://xxx.site.url                   argocd:                     ignoreDeploymentReplicasDiff:
      true                     source:                       targetRevision: 15.0.16                   wordpress:                     repository_ssh_url:
      git@github.com:saritasa-nest/xxx-wordpress.git                     externalDatabase:                       host:
      xxx.xxx.us-west-2.rds.amazonaws.com                       user: xxx-wordpress-user-dev                       existingSecret:
      xxx-wordpress-dev-externaldb                       database: xxx-wordpress-dev                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Simple wordpress
      application example filled by default, but without ci/cd:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: wordpress                   repository:
      xxx-wordpress                   pipeline: wordpress-build-pipeline                   applicationURL:
      https://xxx.site.url                   wordpress:                     ci: false                     externalDatabase:                       host:
      xxx.xxx.us-west-2.rds.amazonaws.com                       user: xxx-wordpress-user-dev                       existingSecret:
      xxx-wordpress-dev-externaldb                       database: xxx-wordpress-dev                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    More difficult
      example of project containing `wordpress` and `frontend` component. Also defined
      for example all extra wordpress params that could be set:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami                   - git@github.com:saritasa-nest/xxx-kubernetes-aws.git               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: wordpress                   repository: xxx-wordpress                   pipeline:
      wordpress-build-pipeline                   applicationURL: https://xxx.site.url                   wordpress:                     imageTag:
      "5.8.1"                     repository_ssh_url: "git@github.com:saritasa-nest/xxx-wordpress.git"                     resources:                       requests:                         memory:
      512Mi                         cpu: 100m                     commonLabels:                       tech_stack:
      php                       application: wordpress                     wordpressTablePrefix:
      "qbf_"                     existingSecret: xxx-wordpress                     updateStrategy:                       type:
      RollingUpdate                       rollingUpdate:                         maxSurge:
      25%                         maxUnavailable: 25%                     smtp:                       host:
      mysmtp.site.url                       port: 1010                       user:
      myuser                       password: mypassword                     nodeSelector:                       tech_stack:
      php                       pvc: "true"                     podSecurityContext:                       enabled:
      true                       fsGroup: 1001                     containerSecurityContext:                       enabled:
      true                       runAsUser: 1001                     ci: true                     extraInitContainers:                       -
      name: build-frontend                         image: node:14                         imagePullPolicy:
      Always                         command:                           - bash                           -
      -c                           - |                             git -c core.sshCommand="ssh
      -i ~/.ssh/id_rsa" clone git@github.com:saritasa-nest/xxx.git -b develop ~/xxx                             cd
      ~/xxx                             npm install                             npm
      run build:embedded-questionnaire                             cp -Rf $(pwd)/dist/*
      /bitnami/wordpress/wp-content/                             echo "Copied built
      files into /bitnami/wordpress/wp-content/"                             ls -la
      /bitnami/wordpress/wp-content/                             echo "Done BUILD
      FRONTEND"                         volumeMounts:                         - mountPath:
      /bitnami/wordpress                           name: wordpress-data                           subPath:
      wordpress                         - mountPath: /home/node/.ssh/id_rsa                           name:
      xxx-ssh-key                           subPath: ssh-privatekey                         -
      mountPath: /home/node/.ssh/known_hosts                           name: github-known-hosts                           subPath:
      config.ssh                         securityContext:                           runAsNonRoot:
      true                           runAsUser: 1000                           allowPrivilegeEscalation:
      false                     extraVolumesSshKeySecret: xxx-wordpress-deploy-key                     extraVolumes:                     -
      name: xxx-ssh-key                       secret:                         secretName:
      xxx-deploy-key                     ingress:                       hostname:
      test.xxx.site.url                       annotations:                         kubernetes.io/ingress.class:
      "nginx"                         cert-manager.io/cluster-issuer: "letsencrypt-prod"                         nginx.ingress.kubernetes.io/proxy-body-size:
      100m                         nginx.ingress.kubernetes.io/client-max-body-size:
      100m                         nginx.ingress.kubernetes.io/server-snippet: |-                           add_header
      X-Robots-Tag "noindex, nofollow, nosnippet, noarchive";                         nginx.ingress.kubernetes.io/whitelist-source-range:
      |                           35.85.92.224/32,                           100.21.244.185/32                       extraHosts:                         -
      name: test.xxx.site.url                           path: /wp-admin                     externalDatabase:                       host:
      "xxx.xxx.us-west-2.rds.amazonaws.com"                       user: "xxx-wp-user-dev"                       existingSecret:
      "xxx-wordpress-dev-externaldb"                       database: "xxx-wp-dev"                     wordpressExtraConfigContent:
      |                       @ini_set(''WP_MEMORY_LIMIT'', ''512M'');                       @ini_set(''ALLOW_UNFILTERED_UPLOADS'',
      true);                     extraEnvVars:                       KEY: VALUE                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template                  - name: frontend                   repository:
      xxx-frontend                   pipeline: buildpack-frontend-build-pipeline                   applicationURL:
      https://app.xxx.site.url                   eventlistener:                     template:
      buildpack-frontend-build-pipeline-trigger-template                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/frontend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ``` '
    digest: 02d71027fdc8af3150a28e9de44ab8f4437191cf68e5abe0ea36437d761f9e66
    maintainers:
    - email: nospam@saritasa.com
      name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-apps
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-apps-0.1.23/saritasa-tekton-apps-0.1.23.tgz
    version: 0.1.23
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2022-09-21T09:03:22.150212791Z"
    description: 'A Helm chart for tekton apps (rbac, eventlistener)  Implements:
      - dynamic records for eventlistener - PVCs - RBAC - configmaps for each app
      - triggerbindings for each app - kubernetes job to make sure the PVCs are bound
      and argocd marks the app as healthy - argocd project for each app - argocd application
      for each app component  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then declare dynamic list of projects (and associated components of that
      project like backend, api, frontend, etc) that would be dynamically added into
      the tekton''s eventlistener manifest.  Each component should be a separate git
      repository.  ```yaml --- apiVersion: argoproj.io/v1alpha1 kind: Application
      metadata:   name: tekton-apps   namespace: argo-cd   finalizers:   - resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "41" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-apps     helm:       values: |         environment: staging         gitBranchPrefixes:           -
      staging         storageClassName: gp3         nodeSelector:           ops: ''true''         aws:           region:
      "us-west-2"           dns: staging.site.com         defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com         argocd:           server:
      deploy.staging.site.com         eventlistener:           enableWebhookSecret:
      true         apps:           - project: vp             enabled: true             argocd:               labels:                 created-by:
      xxx                 ops-main: xxx                 ops-secondary: xxx                 pm:
      xxx                 tm: xxx               namespace: prod             mailList:
      vp@site.com             devopsMailList: devops+vp@site.com             jiraURL:
      https://site.atlassian.net/browse/vp             tektonURL: https://tekton.staging.site.com/#/namespaces/ci/pipelineruns             slack:
      client-vp-ci             kubernetesRepository:               name: vp-kubernetes-aws               branch:
      main               url: git@github.com:org-name/vp-kubernetes-aws.git              components:               -
      name: backend                 repository: vp-backend                 pipeline:
      buildpack-django-build-pipeline                 applicationURL: https://api.staging.site.com                 eventlistener:                   template:
      buildpack-django-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/backend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/builder:v1                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/runner:v1               -
      name: frontend                 repository: vp-frontend                 pipeline:
      buildpack-frontend-build-pipeline                 applicationURL: https://staging.site.com                 eventlistener:                   template:
      buildpack-frontend-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/frontend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/builder:full                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/runner:full                   -
      name: source_subpath                     value: dist/web          # make sure
      PVCs are bound after the chart is synced         # by temporarily mount them
      into short-live job.         runPostInstallMountPvcJob: false      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.16"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true    ```    Above helm chart creates a new ArgoCD project
      for each project in values, for each component in project''s components there
      is created a separate ArgoCD   application and required for Tekton ci/cd resources
      (triggerbindings, roles, configmaps, jobs, serviceaccounts, pvcs and etc).    #
      fill below parameters for each `project` block    - apps[PROJECT].environment
      - possbility to define custom project''s environment, needed for cases when
      need to deploy `dev` and `prod` envs to the same cluster. For example `xxx`
      dev     and prod both deployed in rocks EKS (not required)   - apps[PROJECT].enabled
      - boolean value to define whether the project enabled or not (required)   -
      apps[PROJECT].argocd.labels - labels which are added to ArgoCD project (required)   -
      apps[PROJECT].argocd.namespace - allowed for ArgoCD project namespace (required)   -
      apps[PROJECT].argocd.syncWave - ArgoCD project sync wave, i.e. sequence in which
      project should be synced (not required, default: "200")   - apps[PROJECT].argocd.sourceRepos[]
      - source repositories added to ArgoCD project (not required, default: [<apps[PROJECT].kubernetesRepository.url>])   -
      apps[PROJECT].argocd.extraDestinationNamespaces[] - adds extra destination namespaces
      for ArgoCD project to be able to create custom apps within project''s kubernetes
      repo (not required, default: null)   - apps[PROJECT].mailList - project''s team
      email address (required)   - apps[PROJECT].devopsMailList - project''s devops
      team email address (required)   - apps[PROJECT].jiraURL - project''s JIRA url
      (required)   - apps[PROJECT].tektonURL - link to Tekton pipelineruns used in
      Tekton ConfigMap as `TEKTON_URL` during Slack notification send (required)   -
      apps[PROJECT].slack - project''s Slack channel name (required)   - apps[PROJECT].kubernetesRepository.name
      - project''s kubernetes repository name used in ArgoCD application and Tekton
      TriggerBinding (may be absent and replaced with     `apps[PROJECT].components[NAME].argocd`
      and `apps[PROJECT].argocd.sourceRepos[]` blocks in case if project has no kubernetes
      repo)   - apps[PROJECT].kubernetesRepository.branch - project''s kubernetes
      repository branch used in ArgoCD application and Tekton TriggerBinding (may
      be absent and replaced     with `apps[PROJECT].components[NAME].argocd` and
      `apps[PROJECT].argocd.sourceRepos[]` blocks in case if project has no kubernetes
      repo)   - apps[PROJECT].kubernetesRepository.url - project''s kubernetes repository
      url used in ArgoCD application and Tekton TriggerBinding (may be absent and
      replaced with     `apps[PROJECT].components[NAME].argocd` and `apps[PROJECT].argocd.sourceRepos[]`
      blocks in case if project has no kubernetes repo)    Basically we have 2 different
      types of ci/cd - basic (buildpacks, kaniko) and wordpress ones. So depending
      on project''s component type you will need to fill different parameters.    #
      fill below parameters for each `component` block    - apps[PROJECT].components[NAME].repository
      - the name of the repository containing the code (may be absent in case of wordpress
      application without deployment, i.e. bolrdswp, taco,     saritasa-wordpress-demo)   -
      apps[PROJECT].components[NAME].pipeline - the name of the pipeline building
      the code from the repository above   - apps[PROJECT].components[NAME].argocd.source.syncWave
      - custom component ArgoCD application sync wave (default: "210")   - apps[PROJECT].components[NAME].argocd.source.path
      - path to directory responsible for kubernetes resources creation of the ArgoCD
      Application (default: kubernetes repo path for basic     projects "apps/<apps[PROJECT].components[NAME].name>/manifests/<environment>"
      or "null" for wordpress projects)   - apps[PROJECT].components[NAME].argocd.source.repoUrl
      - url of repository which should be used for ArgoCD Application (default: kubernetes
      repo for basic projects     "<apps[PROJECT].kubernetesRepository.url>" or `https://charts.bitnami.com/bitnami`
      for wordpress projects)   - apps[PROJECT].components[NAME].argocd.source.targetRevision
      - tag or branch in the repository for ArgoCD Application (default: kubernetes
      branch for basic projects     "<apps[PROJECT].kubernetesRepository.branch>"
      or "11.0.14" for wordpress projects)   - apps[PROJECT].components[NAME].argocd.ignoreDeploymentReplicasDiff
      - flag whether this exact ArgoCD application should ignore `Replicas` count
      differences for deployments. It may be needed for `staging` and `prod` environments
      which use HPA (default: false)   - apps[PROJECT].components[NAME].applicationURL
      - url that should be used in tekton build ConfigMap `APPLICATION_URL` param   -
      apps[PROJECT].components[NAME].tektonKubernetesRepoDeployKeyName - name of existing
      in kubernetes cluster secret with SSH key to kubernetes repository, used in
      `kustomize` deployment     step (i.e. addon-backend-deploy-key). This param
      sets by default to `<project>-kubernetes-aws-deploy-key` if project has `kubernetesRepository`
      param in values (actual only for basic     components, not wordpress)   - apps[PROJECT].components[NAME].eventlistener.template
      - the name of the trigger template for the component to be used   - apps[PROJECT].components[NAME].eventlistener.enableWebhookSecret
      - should you enable the git web hook for this particular app/component in the
      eventlistener configuration   - apps[PROJECT].components[NAME].eventlistener.filter
      - custom filter for the component of the eventlistener   - apps[PROJECT].components[NAME].eventlistener.extraOverlays
      - extra overlays to be added into the eventlistener for the component   - apps[PROJECT].components[NAME].eventlistener.eventTypes
      - github event types to trigger the ci/cd   - apps[PROJECT].components[NAME].eventlistener.gitWebhookBranches[]
      - list of branches, push to which triggers ci/cd   - apps[PROJECT].components[NAME].extraBuildConfigParams
      - additional key/values to be added into `build-pipeline-config configmap` ConfigMap
      associated with the app   - apps[PROJECT].components[NAME].triggerBinding -
      values to be added into the TriggerBinding manifest except default ones    What
      is important to know is that any key defined in apps[PROJECT].components[NAME].triggerBinding
      would be added as is   into the generated triggerbinding associated with your
      app. However the chart renders some default values based on the values   in
      this values.yaml file:      - application, project, environment, docker_registry,
      kubernetes_repository_ssh_url, kubernetes_branch, kubernetes_repository_kustomize_path,
      source_subpath (for basic components)     - application, project, environment,
      namespace (for wordpress components)     # fill below parameters block only
      for `wordpress` components    - apps[PROJECT].components[NAME].wordpress.imageTag
      - tag of the wordpress image (default: "5.7.2")   - apps[PROJECT].components[NAME].wordpress.repository_ssh_url
      - project''s wordpress repository SSH url (default: null, may be absent if project
      has no wordpress repo)   - apps[PROJECT].components[NAME].wordpress.resources
      - wordpress pod resources params (default: requests.cpu: 100m, requests.memory:
      128Mi)   - apps[PROJECT].components[NAME].wordpress.commonLabels - wordpress
      pod common labels (default: commonLabels.tech_stack: php, commonLabels.application:
      wordpress)   - apps[PROJECT].components[NAME].wordpress.wordpressTablePrefix
      - wordpress DB tables prefix (default: wp_)   - apps[PROJECT].components[NAME].wordpress.existingSecret
      - name of existing in kubernetes secret with wp admin auth info (default: "<project_name>-<component_name>-<env>",     i.e.
      "taco-wordpress-dev")   - apps[PROJECT].components[NAME].wordpress.updateStrategy
      - strategy that should be used for wordpress pod update (default: updateStrategy.type:
      RollingUpdate,     updateStrategy.rollingUpdate.maxSurge: 0%, updateStrategy.rollingUpdate.maxUnavailable:
      100%, i.e. stop old pod and then create a new one)   - apps[PROJECT].components[NAME].wordpress.smtp.host
      - SMTP host for sending emails (default: mailhog.mailhog.svc.cluster.local)   -
      apps[PROJECT].components[NAME].wordpress.smtp.port - SMTP port for sending emails
      (default: 1025)   - apps[PROJECT].components[NAME].wordpress.smtp.user - SMTP
      user for sending emails (default: <project_name>, i.e. taco)   - apps[PROJECT].components[NAME].wordpress.smtp.password
      - SMTP password for sending emails (default: anypassword)   - apps[PROJECT].components[NAME].wordpress.nodeSelector
      - wordpress pod node selector params (default: nodeSelector.tech_stack: php,
      nodeSelector.pvc: "true")   - apps[PROJECT].components[NAME].wordpress.podSecurityContext
      - wordpress pod''s security context params (default: podSecurityContext.enabled:
      true, podSecurityContext.fsGroup: 1000)   - apps[PROJECT].components[NAME].wordpress.containerSecurityContext
      - wordpress pod container''s security context params (default: containerSecurityContext.enabled:
      true,     containerSecurityContext.runAsUser: 1000)   - apps[PROJECT].components[NAME].wordpress.ci
      - boolean flag which defines whether wordpress project has ci/cd or not (default:
      true)   - apps[PROJECT].components[NAME].wordpress.extraInitContainers - extra
      ci/cd init containers if needed, enabled only if wordpress component has `ci`
      flag enabled (default: null)   - apps[PROJECT].components[NAME].wordpress.extraVolumesSshKeySecret
      - name of a secret with wordpress repository SSH url (default: "<project_name>-<component_name>-deploy-key",     i.e.
      "taco-wordpress-deploy-key")   - apps[PROJECT].components[NAME].wordpress.extraVolumes
      - extra volumes that might be needed to wordpress pod (default: null)   - apps[PROJECT].components[NAME].wordpress.ingress.hostname
      - wordpress ingress hostname (default: "<project_name>.saritasa.rocks", i.e.
      "taco.saritasa.rocks")   - apps[PROJECT].components[NAME].wordpress.ingress.annotations
      - wordpress ingress annotations (default: kubernetes.io/ingress.class: "nginx",
      cert-manager.io/cluster-issuer: "letsencrypt-prod",     nginx.ingress.kubernetes.io/proxy-body-size:
      100m, nginx.ingress.kubernetes.io/proxy-connect-timeout: "300", nginx.ingress.kubernetes.io/proxy-next-upstream-timeout:
      "300",     nginx.ingress.kubernetes.io/auth-type: basic, nginx.ingress.kubernetes.io/auth-secret:
      <ingress.authSecret>, nginx.ingress.kubernetes.io/auth-realm: "Authentication
      Required",     nginx.ingress.kubernetes.io/server-snippet: |-,   add_header
      X-Robots-Tag "noindex, nofollow, nosnippet, noarchive")   - apps[PROJECT].components[NAME].wordpress.ingress.authSecret
      - name of kubernetes secret that should be used in ingress for basic auth (default:
      "<project_name>-<compinent_name>-<env>-basic-auth",     i.e. "taco-wordpress-dev-basic-auth")   -
      apps[PROJECT].components[NAME].wordpress.ingress.extraHosts - list of extra
      hosts that may be defined in ingress (default: null)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.host
      - wordpress DB host (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.user
      - wordpress DB user (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.existingSecret
      - name of existing in kubernetes secret with DB user password (required)   -
      apps[PROJECT].components[NAME].wordpress.externalDatabase.database - wordpress
      DB name (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.port
      - wordpress DB port (default: 3306)   - apps[PROJECT].components[NAME].wordpress.wordpressExtraConfigContent
      - wordpress extra configs if needed (default: null)   - apps[PROJECT].components[NAME].wordpress.extraEnvVars
      - wordpress extra env vars if needed (default: null)    Example of values with
      extra `eventlistener` and `extraBuildConfigParams` in component:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           gitBranchPrefixes:             -
      staging           storageClassName: gp2           aws:             region: "us-west-2"             dns:
      staging.site.com           defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com           argocd:             server:
      deploy.staging.site.com           eventlistener:             enableWebhookSecret:
      true           apps:             - project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: prod               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.site.com/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack                   applicationURL: https://api.site.com                   eventlistener:                     template:
      buildpack-backend-build-pipeline-trigger-template                   extraBuildConfigParams:
      # what additional K/V pairs you want to add into the build-pipeline-config configmap                     KEY:
      value                   triggerBinding:                     - name: docker_registry_repository                       value:
      XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/backend                     - name:
      buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/runner:v1                 -
      name: frontend                   repository: xxx-frontend                   pipeline:
      buildpack                   applicationURL: https://site.com                   eventlistener:                     enableWebhookSecret:
      false                     filter: (body.ref.startsWith(''refs/heads/develop'')
      || body.ref.startsWith(''refs/heads/release/''))                     template:
      buildpack-frontend-build-pipeline-trigger-template                     extraOverlays:
      []                     # - key: truncated_sha                     #   expression:
      "body.head_commit.id.truncate(7)"                     eventTypes: ["pull_request",
      "push"]                   extraBuildConfigParams: {}                   triggerBinding:                     -
      name: docker_registry_repository                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/frontend                     -
      name: buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web            # make
      sure PVCs are bound after the chart is synced           # by temporarily mount
      them into short-live job.           runPostInstallMountPvcJob: false        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true    ```    Example of
      old application from `saritasa-clients` repo, which has no separate `kubernetes`
      repository. Here we replace `apps[PROJECT].kubernetesRepository` block with   `apps[PROJECT].argocd.sourceRepos`
      and `apps[PROJECT].components[NAME].argocd` block, also it is required to set
      `apps[PROJECT].components[NAME].tektonKubernetesRepoDeployKeyName`   in such
      a case to use correct secret with deploy key as far as there is no kubernetes
      repo that is used by default.    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      git@github.com:saritasa-nest/xxx-backend.git                   - git@github.com:saritasa-nest/xxx-frontend.git               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: backend                   repository:
      xxx-backend                   pipeline: buildpack-django-build-pipeline                   applicationURL:
      https://api.xxx.site.url                   argocd:                     source:                       path:
      .kubernetes/manifests/dev                       repoUrl: git@github.com:saritasa-nest/xxx-backend.git                       targetRevision:
      develop                   eventlistener:                     template: buildpack-django-build-pipeline-trigger-template                   tektonKubernetesRepoDeployKeyName:
      xxx-backend-deploy-key                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1                 -
      name: frontend                   repository: xxx-frontend                   pipeline:
      buildpack-frontend-build-pipeline                   applicationURL: https://xxx.site.url                   argocd:                     source:                       path:
      .kubernetes/manifests/dev                       repoUrl: git@github.com:saritasa-nest/xxx-frontend.git                       targetRevision:
      develop                   eventlistener:                     template: buildpack-frontend-build-pipeline-trigger-template                   tektonKubernetesRepoDeployKeyName:
      xxx-frontend-deploy-key                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/frontend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Example with
      creating an ArgoCD project and application with its custom `environment` (case
      when in common `staging` environment we need to create for some reason project
      with   `dev` environment). Here is added an extra `apps[PROJECT].environment`
      param, which overrides default `environment` in helm values for this project,
      and   `apps[PROJECT].components[NAME].eventlistener.gitWebhookBranches` param,
      which defines that ci/cd should be trigger on push to `develop` branch.    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack-django-build-pipeline                   applicationURL: https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Also there might
      a situation that you would like to provision custom utility ArgoCD Application
      in argo-cd from project''s kubernetes repo (for example VP project provisions   like
      this `jitsi` application). To reach this you might need to add an extra destination
      namespace to ArgoCD Project, you should use   `apps[PROJECT].argocd.extraDestinationNamespaces[]`
      param for that like in below example.    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev                 extraDestinationNamespaces:                   -
      argo-cd               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack-django-build-pipeline                   applicationURL: https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    If you want
      to enable ignoring deployment replicas count differences in ArgoCD application
      of your component add `apps[PROJECT].components[NAME].argocd.ignoreDeploymentReplicasDiff:
      true` flag like in the below example (it may be needed for `staging` and `prod`
      envs, where you have horizontal pod autoscheduling - HPA):    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev                 extraDestinationNamespaces:                   -
      argo-cd               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   argocd:                     ignoreDeploymentReplicasDiff:
      true                   pipeline: buildpack-django-build-pipeline                   applicationURL:
      https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Simple wordpress
      application example filled by default:    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: wordpress                   repository:
      xxx-wordpress                   pipeline: wordpress-build-pipeline                   applicationURL:
      https://xxx.site.url                   wordpress:                     repository_ssh_url:
      git@github.com:saritasa-nest/xxx-wordpress.git                     externalDatabase:                       host:
      xxx.xxx.us-west-2.rds.amazonaws.com                       user: xxx-wordpress-user-dev                       existingSecret:
      xxx-wordpress-dev-externaldb                       database: xxx-wordpress-dev                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Simple wordpress
      application example filled by default, but without ci/cd:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: wordpress                   repository:
      xxx-wordpress                   pipeline: wordpress-build-pipeline                   applicationURL:
      https://xxx.site.url                   wordpress:                     ci: false                     externalDatabase:                       host:
      xxx.xxx.us-west-2.rds.amazonaws.com                       user: xxx-wordpress-user-dev                       existingSecret:
      xxx-wordpress-dev-externaldb                       database: xxx-wordpress-dev                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    More difficult
      example of project containing `wordpress` and `frontend` component. Also defined
      for example all extra wordpress params that could be set:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami                   - git@github.com:saritasa-nest/xxx-kubernetes-aws.git               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: wordpress                   repository: xxx-wordpress                   pipeline:
      wordpress-build-pipeline                   applicationURL: https://xxx.site.url                   wordpress:                     imageTag:
      "5.8.1"                     repository_ssh_url: "git@github.com:saritasa-nest/xxx-wordpress.git"                     resources:                       requests:                         memory:
      512Mi                         cpu: 100m                     commonLabels:                       tech_stack:
      php                       application: wordpress                     wordpressTablePrefix:
      "qbf_"                     existingSecret: xxx-wordpress                     updateStrategy:                       type:
      RollingUpdate                       rollingUpdate:                         maxSurge:
      25%                         maxUnavailable: 25%                     smtp:                       host:
      mysmtp.site.url                       port: 1010                       user:
      myuser                       password: mypassword                     nodeSelector:                       tech_stack:
      php                       pvc: "true"                     podSecurityContext:                       enabled:
      true                       fsGroup: 1001                     containerSecurityContext:                       enabled:
      true                       runAsUser: 1001                     ci: true                     extraInitContainers:                       -
      name: build-frontend                         image: node:14                         imagePullPolicy:
      Always                         command:                           - bash                           -
      -c                           - |                             git -c core.sshCommand="ssh
      -i ~/.ssh/id_rsa" clone git@github.com:saritasa-nest/xxx.git -b develop ~/xxx                             cd
      ~/xxx                             npm install                             npm
      run build:embedded-questionnaire                             cp -Rf $(pwd)/dist/*
      /bitnami/wordpress/wp-content/                             echo "Copied built
      files into /bitnami/wordpress/wp-content/"                             ls -la
      /bitnami/wordpress/wp-content/                             echo "Done BUILD
      FRONTEND"                         volumeMounts:                         - mountPath:
      /bitnami/wordpress                           name: wordpress-data                           subPath:
      wordpress                         - mountPath: /home/node/.ssh/id_rsa                           name:
      xxx-ssh-key                           subPath: ssh-privatekey                         -
      mountPath: /home/node/.ssh/known_hosts                           name: github-known-hosts                           subPath:
      config.ssh                         securityContext:                           runAsNonRoot:
      true                           runAsUser: 1000                           allowPrivilegeEscalation:
      false                     extraVolumesSshKeySecret: xxx-wordpress-deploy-key                     extraVolumes:                     -
      name: xxx-ssh-key                       secret:                         secretName:
      xxx-deploy-key                     ingress:                       hostname:
      test.xxx.site.url                       annotations:                         kubernetes.io/ingress.class:
      "nginx"                         cert-manager.io/cluster-issuer: "letsencrypt-prod"                         nginx.ingress.kubernetes.io/proxy-body-size:
      100m                         nginx.ingress.kubernetes.io/client-max-body-size:
      100m                         nginx.ingress.kubernetes.io/server-snippet: |-                           add_header
      X-Robots-Tag "noindex, nofollow, nosnippet, noarchive";                         nginx.ingress.kubernetes.io/whitelist-source-range:
      |                           35.85.92.224/32,                           100.21.244.185/32                       extraHosts:                         -
      name: test.xxx.site.url                           path: /wp-admin                     externalDatabase:                       host:
      "xxx.xxx.us-west-2.rds.amazonaws.com"                       user: "xxx-wp-user-dev"                       existingSecret:
      "xxx-wordpress-dev-externaldb"                       database: "xxx-wp-dev"                     wordpressExtraConfigContent:
      |                       @ini_set(''WP_MEMORY_LIMIT'', ''512M'');                       @ini_set(''ALLOW_UNFILTERED_UPLOADS'',
      true);                     extraEnvVars:                       KEY: VALUE                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template                  - name: frontend                   repository:
      xxx-frontend                   pipeline: buildpack-frontend-build-pipeline                   applicationURL:
      https://app.xxx.site.url                   eventlistener:                     template:
      buildpack-frontend-build-pipeline-trigger-template                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/frontend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ``` '
    digest: 2ab2d2bcb2254fcf19ae3377d44a77e0ada4d4ffc4c18ef9796e8cda38db7de0
    maintainers:
    - email: nospam@saritasa.com
      name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-apps
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-apps-0.1.23-dev/saritasa-tekton-apps-0.1.23-dev.tgz
    version: 0.1.23-dev
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2022-09-21T07:05:27.546797939Z"
    description: 'A Helm chart for tekton apps (rbac, eventlistener)  Implements:
      - dynamic records for eventlistener - PVCs - RBAC - configmaps for each app
      - triggerbindings for each app - kubernetes job to make sure the PVCs are bound
      and argocd marks the app as healthy - argocd project for each app - argocd application
      for each app component  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then declare dynamic list of projects (and associated components of that
      project like backend, api, frontend, etc) that would be dynamically added into
      the tekton''s eventlistener manifest.  Each component should be a separate git
      repository.  ```yaml --- apiVersion: argoproj.io/v1alpha1 kind: Application
      metadata:   name: tekton-apps   namespace: argo-cd   finalizers:   - resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "41" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-apps     helm:       values: |         environment: staging         gitBranchPrefixes:           -
      staging         storageClassName: gp3         nodeSelector:           ops: ''true''         aws:           region:
      "us-west-2"           dns: staging.site.com         defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com         argocd:           server:
      deploy.staging.site.com         eventlistener:           enableWebhookSecret:
      true         apps:           - project: vp             enabled: true             argocd:               labels:                 created-by:
      xxx                 ops-main: xxx                 ops-secondary: xxx                 pm:
      xxx                 tm: xxx               namespace: prod             mailList:
      vp@site.com             devopsMailList: devops+vp@site.com             jiraURL:
      https://site.atlassian.net/browse/vp             tektonURL: https://tekton.staging.site.com/#/namespaces/ci/pipelineruns             slack:
      client-vp-ci             kubernetesRepository:               name: vp-kubernetes-aws               branch:
      main               url: git@github.com:org-name/vp-kubernetes-aws.git              components:               -
      name: backend                 repository: vp-backend                 pipeline:
      buildpack-django-build-pipeline                 applicationURL: https://api.staging.site.com                 eventlistener:                   template:
      buildpack-django-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/backend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/builder:v1                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/runner:v1               -
      name: frontend                 repository: vp-frontend                 pipeline:
      buildpack-frontend-build-pipeline                 applicationURL: https://staging.site.com                 eventlistener:                   template:
      buildpack-frontend-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/frontend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/builder:full                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/runner:full                   -
      name: source_subpath                     value: dist/web          # make sure
      PVCs are bound after the chart is synced         # by temporarily mount them
      into short-live job.         runPostInstallMountPvcJob: false      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.16"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true    ```    Above helm chart creates a new ArgoCD project
      for each project in values, for each component in project''s components there
      is created a separate ArgoCD   application and required for Tekton ci/cd resources
      (triggerbindings, roles, configmaps, jobs, serviceaccounts, pvcs and etc).    #
      fill below parameters for each `project` block    - apps[PROJECT].environment
      - possbility to define custom project''s environment, needed for cases when
      need to deploy `dev` and `prod` envs to the same cluster. For example `xxx`
      dev     and prod both deployed in rocks EKS (not required)   - apps[PROJECT].enabled
      - boolean value to define whether the project enabled or not (required)   -
      apps[PROJECT].argocd.labels - labels which are added to ArgoCD project (required)   -
      apps[PROJECT].argocd.namespace - allowed for ArgoCD project namespace (required)   -
      apps[PROJECT].argocd.syncWave - ArgoCD project sync wave, i.e. sequence in which
      project should be synced (not required, default: "200")   - apps[PROJECT].argocd.sourceRepos[]
      - source repositories added to ArgoCD project (not required, default: [<apps[PROJECT].kubernetesRepository.url>])   -
      apps[PROJECT].argocd.extraDestinationNamespaces[] - adds extra destination namespaces
      for ArgoCD project to be able to create custom apps within project''s kubernetes
      repo (not required, default: null)   - apps[PROJECT].mailList - project''s team
      email address (required)   - apps[PROJECT].devopsMailList - project''s devops
      team email address (required)   - apps[PROJECT].jiraURL - project''s JIRA url
      (required)   - apps[PROJECT].tektonURL - link to Tekton pipelineruns used in
      Tekton ConfigMap as `TEKTON_URL` during Slack notification send (required)   -
      apps[PROJECT].slack - project''s Slack channel name (required)   - apps[PROJECT].kubernetesRepository.name
      - project''s kubernetes repository name used in ArgoCD application and Tekton
      TriggerBinding (may be absent and replaced with     `apps[PROJECT].components[NAME].argocd`
      and `apps[PROJECT].argocd.sourceRepos[]` blocks in case if project has no kubernetes
      repo)   - apps[PROJECT].kubernetesRepository.branch - project''s kubernetes
      repository branch used in ArgoCD application and Tekton TriggerBinding (may
      be absent and replaced     with `apps[PROJECT].components[NAME].argocd` and
      `apps[PROJECT].argocd.sourceRepos[]` blocks in case if project has no kubernetes
      repo)   - apps[PROJECT].kubernetesRepository.url - project''s kubernetes repository
      url used in ArgoCD application and Tekton TriggerBinding (may be absent and
      replaced with     `apps[PROJECT].components[NAME].argocd` and `apps[PROJECT].argocd.sourceRepos[]`
      blocks in case if project has no kubernetes repo)    Basically we have 2 different
      types of ci/cd - basic (buildpacks, kaniko) and wordpress ones. So depending
      on project''s component type you will need to fill different parameters.    #
      fill below parameters for each `component` block    - apps[PROJECT].components[NAME].repository
      - the name of the repository containing the code (may be absent in case of wordpress
      application without deployment, i.e. bolrdswp, taco,     saritasa-wordpress-demo)   -
      apps[PROJECT].components[NAME].pipeline - the name of the pipeline building
      the code from the repository above   - apps[PROJECT].components[NAME].argocd.source.syncWave
      - custom component ArgoCD application sync wave (default: "210")   - apps[PROJECT].components[NAME].argocd.source.path
      - path to directory responsible for kubernetes resources creation of the ArgoCD
      Application (default: kubernetes repo path for basic     projects "apps/<apps[PROJECT].components[NAME].name>/manifests/<environment>"
      or "null" for wordpress projects)   - apps[PROJECT].components[NAME].argocd.source.repoUrl
      - url of repository which should be used for ArgoCD Application (default: kubernetes
      repo for basic projects     "<apps[PROJECT].kubernetesRepository.url>" or `https://charts.bitnami.com/bitnami`
      for wordpress projects)   - apps[PROJECT].components[NAME].argocd.source.targetRevision
      - tag or branch in the repository for ArgoCD Application (default: kubernetes
      branch for basic projects     "<apps[PROJECT].kubernetesRepository.branch>"
      or "11.0.14" for wordpress projects)   - apps[PROJECT].components[NAME].argocd.ignoreDeploymentReplicasDiff
      - flag whether this exact ArgoCD application should ignore `Replicas` count
      differences for deployments. It may be needed for `staging` and `prod` environments
      which use HPA (default: false)   - apps[PROJECT].components[NAME].applicationURL
      - url that should be used in tekton build ConfigMap `APPLICATION_URL` param   -
      apps[PROJECT].components[NAME].tektonKubernetesRepoDeployKeyName - name of existing
      in kubernetes cluster secret with SSH key to kubernetes repository, used in
      `kustomize` deployment     step (i.e. addon-backend-deploy-key). This param
      sets by default to `<project>-kubernetes-aws-deploy-key` if project has `kubernetesRepository`
      param in values (actual only for basic     components, not wordpress)   - apps[PROJECT].components[NAME].eventlistener.template
      - the name of the trigger template for the component to be used   - apps[PROJECT].components[NAME].eventlistener.enableWebhookSecret
      - should you enable the git web hook for this particular app/component in the
      eventlistener configuration   - apps[PROJECT].components[NAME].eventlistener.filter
      - custom filter for the component of the eventlistener   - apps[PROJECT].components[NAME].eventlistener.extraOverlays
      - extra overlays to be added into the eventlistener for the component   - apps[PROJECT].components[NAME].eventlistener.eventTypes
      - github event types to trigger the ci/cd   - apps[PROJECT].components[NAME].eventlistener.gitWebhookBranches[]
      - list of branches, push to which triggers ci/cd   - apps[PROJECT].components[NAME].extraBuildConfigParams
      - additional key/values to be added into `build-pipeline-config configmap` ConfigMap
      associated with the app   - apps[PROJECT].components[NAME].triggerBinding -
      values to be added into the TriggerBinding manifest except default ones    What
      is important to know is that any key defined in apps[PROJECT].components[NAME].triggerBinding
      would be added as is   into the generated triggerbinding associated with your
      app. However the chart renders some default values based on the values   in
      this values.yaml file:      - application, project, environment, docker_registry,
      kubernetes_repository_ssh_url, kubernetes_branch, kubernetes_repository_kustomize_path,
      source_subpath (for basic components)     - application, project, environment,
      namespace (for wordpress components)     # fill below parameters block only
      for `wordpress` components    - apps[PROJECT].components[NAME].wordpress.imageTag
      - tag of the wordpress image (default: "5.7.2")   - apps[PROJECT].components[NAME].wordpress.repository_ssh_url
      - project''s wordpress repository SSH url (default: null, may be absent if project
      has no wordpress repo)   - apps[PROJECT].components[NAME].wordpress.resources
      - wordpress pod resources params (default: requests.cpu: 100m, requests.memory:
      128Mi)   - apps[PROJECT].components[NAME].wordpress.commonLabels - wordpress
      pod common labels (default: commonLabels.tech_stack: php, commonLabels.application:
      wordpress)   - apps[PROJECT].components[NAME].wordpress.wordpressTablePrefix
      - wordpress DB tables prefix (default: wp_)   - apps[PROJECT].components[NAME].wordpress.existingSecret
      - name of existing in kubernetes secret with wp admin auth info (default: "<project_name>-<component_name>-<env>",     i.e.
      "taco-wordpress-dev")   - apps[PROJECT].components[NAME].wordpress.updateStrategy
      - strategy that should be used for wordpress pod update (default: updateStrategy.type:
      RollingUpdate,     updateStrategy.rollingUpdate.maxSurge: 0%, updateStrategy.rollingUpdate.maxUnavailable:
      100%, i.e. stop old pod and then create a new one)   - apps[PROJECT].components[NAME].wordpress.smtp.host
      - SMTP host for sending emails (default: mailhog.mailhog.svc.cluster.local)   -
      apps[PROJECT].components[NAME].wordpress.smtp.port - SMTP port for sending emails
      (default: 1025)   - apps[PROJECT].components[NAME].wordpress.smtp.user - SMTP
      user for sending emails (default: <project_name>, i.e. taco)   - apps[PROJECT].components[NAME].wordpress.smtp.password
      - SMTP password for sending emails (default: anypassword)   - apps[PROJECT].components[NAME].wordpress.nodeSelector
      - wordpress pod node selector params (default: nodeSelector.tech_stack: php,
      nodeSelector.pvc: "true")   - apps[PROJECT].components[NAME].wordpress.podSecurityContext
      - wordpress pod''s security context params (default: podSecurityContext.enabled:
      true, podSecurityContext.fsGroup: 1000)   - apps[PROJECT].components[NAME].wordpress.containerSecurityContext
      - wordpress pod container''s security context params (default: containerSecurityContext.enabled:
      true,     containerSecurityContext.runAsUser: 1000)   - apps[PROJECT].components[NAME].wordpress.ci
      - boolean flag which defines whether wordpress project has ci/cd or not (default:
      true)   - apps[PROJECT].components[NAME].wordpress.extraInitContainers - extra
      ci/cd init containers if needed, enabled only if wordpress component has `ci`
      flag enabled (default: null)   - apps[PROJECT].components[NAME].wordpress.extraVolumesSshKeySecret
      - name of a secret with wordpress repository SSH url (default: "<project_name>-<component_name>-deploy-key",     i.e.
      "taco-wordpress-deploy-key")   - apps[PROJECT].components[NAME].wordpress.extraVolumes
      - extra volumes that might be needed to wordpress pod (default: null)   - apps[PROJECT].components[NAME].wordpress.ingress.hostname
      - wordpress ingress hostname (default: "<project_name>.saritasa.rocks", i.e.
      "taco.saritasa.rocks")   - apps[PROJECT].components[NAME].wordpress.ingress.annotations
      - wordpress ingress annotations (default: kubernetes.io/ingress.class: "nginx",
      cert-manager.io/cluster-issuer: "letsencrypt-prod",     nginx.ingress.kubernetes.io/proxy-body-size:
      100m, nginx.ingress.kubernetes.io/proxy-connect-timeout: "300", nginx.ingress.kubernetes.io/proxy-next-upstream-timeout:
      "300",     nginx.ingress.kubernetes.io/auth-type: basic, nginx.ingress.kubernetes.io/auth-secret:
      <ingress.authSecret>, nginx.ingress.kubernetes.io/auth-realm: "Authentication
      Required",     nginx.ingress.kubernetes.io/server-snippet: |-,   add_header
      X-Robots-Tag "noindex, nofollow, nosnippet, noarchive")   - apps[PROJECT].components[NAME].wordpress.ingress.authSecret
      - name of kubernetes secret that should be used in ingress for basic auth (default:
      "<project_name>-<compinent_name>-<env>-basic-auth",     i.e. "taco-wordpress-dev-basic-auth")   -
      apps[PROJECT].components[NAME].wordpress.ingress.extraHosts - list of extra
      hosts that may be defined in ingress (default: null)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.host
      - wordpress DB host (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.user
      - wordpress DB user (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.existingSecret
      - name of existing in kubernetes secret with DB user password (required)   -
      apps[PROJECT].components[NAME].wordpress.externalDatabase.database - wordpress
      DB name (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.port
      - wordpress DB port (default: 3306)   - apps[PROJECT].components[NAME].wordpress.wordpressExtraConfigContent
      - wordpress extra configs if needed (default: null)   - apps[PROJECT].components[NAME].wordpress.extraEnvVars
      - wordpress extra env vars if needed (default: null)    Example of values with
      extra `eventlistener` and `extraBuildConfigParams` in component:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           gitBranchPrefixes:             -
      staging           storageClassName: gp2           aws:             region: "us-west-2"             dns:
      staging.site.com           defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com           argocd:             server:
      deploy.staging.site.com           eventlistener:             enableWebhookSecret:
      true           apps:             - project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: prod               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.site.com/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack                   applicationURL: https://api.site.com                   eventlistener:                     template:
      buildpack-backend-build-pipeline-trigger-template                   extraBuildConfigParams:
      # what additional K/V pairs you want to add into the build-pipeline-config configmap                     KEY:
      value                   triggerBinding:                     - name: docker_registry_repository                       value:
      XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/backend                     - name:
      buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/runner:v1                 -
      name: frontend                   repository: xxx-frontend                   pipeline:
      buildpack                   applicationURL: https://site.com                   eventlistener:                     enableWebhookSecret:
      false                     filter: (body.ref.startsWith(''refs/heads/develop'')
      || body.ref.startsWith(''refs/heads/release/''))                     template:
      buildpack-frontend-build-pipeline-trigger-template                     extraOverlays:
      []                     # - key: truncated_sha                     #   expression:
      "body.head_commit.id.truncate(7)"                     eventTypes: ["pull_request",
      "push"]                   extraBuildConfigParams: {}                   triggerBinding:                     -
      name: docker_registry_repository                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/frontend                     -
      name: buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web            # make
      sure PVCs are bound after the chart is synced           # by temporarily mount
      them into short-live job.           runPostInstallMountPvcJob: false        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true    ```    Example of
      old application from `saritasa-clients` repo, which has no separate `kubernetes`
      repository. Here we replace `apps[PROJECT].kubernetesRepository` block with   `apps[PROJECT].argocd.sourceRepos`
      and `apps[PROJECT].components[NAME].argocd` block, also it is required to set
      `apps[PROJECT].components[NAME].tektonKubernetesRepoDeployKeyName`   in such
      a case to use correct secret with deploy key as far as there is no kubernetes
      repo that is used by default.    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      git@github.com:saritasa-nest/xxx-backend.git                   - git@github.com:saritasa-nest/xxx-frontend.git               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: backend                   repository:
      xxx-backend                   pipeline: buildpack-django-build-pipeline                   applicationURL:
      https://api.xxx.site.url                   argocd:                     source:                       path:
      .kubernetes/manifests/dev                       repoUrl: git@github.com:saritasa-nest/xxx-backend.git                       targetRevision:
      develop                   eventlistener:                     template: buildpack-django-build-pipeline-trigger-template                   tektonKubernetesRepoDeployKeyName:
      xxx-backend-deploy-key                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1                 -
      name: frontend                   repository: xxx-frontend                   pipeline:
      buildpack-frontend-build-pipeline                   applicationURL: https://xxx.site.url                   argocd:                     source:                       path:
      .kubernetes/manifests/dev                       repoUrl: git@github.com:saritasa-nest/xxx-frontend.git                       targetRevision:
      develop                   eventlistener:                     template: buildpack-frontend-build-pipeline-trigger-template                   tektonKubernetesRepoDeployKeyName:
      xxx-frontend-deploy-key                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/frontend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Example with
      creating an ArgoCD project and application with its custom `environment` (case
      when in common `staging` environment we need to create for some reason project
      with   `dev` environment). Here is added an extra `apps[PROJECT].environment`
      param, which overrides default `environment` in helm values for this project,
      and   `apps[PROJECT].components[NAME].eventlistener.gitWebhookBranches` param,
      which defines that ci/cd should be trigger on push to `develop` branch.    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack-django-build-pipeline                   applicationURL: https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Also there might
      a situation that you would like to provision custom utility ArgoCD Application
      in argo-cd from project''s kubernetes repo (for example VP project provisions   like
      this `jitsi` application). To reach this you might need to add an extra destination
      namespace to ArgoCD Project, you should use   `apps[PROJECT].argocd.extraDestinationNamespaces[]`
      param for that like in below example.    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev                 extraDestinationNamespaces:                   -
      argo-cd               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack-django-build-pipeline                   applicationURL: https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    If you want
      to enable ignoring deployment replicas count differences in ArgoCD application
      of your component add `apps[PROJECT].components[NAME].argocd.ignoreDeploymentReplicasDiff:
      true` flag like in the below example (it may be needed for `staging` and `prod`
      envs, where you have horizontal pod autoscheduling - HPA):    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev                 extraDestinationNamespaces:                   -
      argo-cd               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   argocd:                     ignoreDeploymentReplicasDiff:
      true                   pipeline: buildpack-django-build-pipeline                   applicationURL:
      https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Simple wordpress
      application example filled by default:    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: wordpress                   repository:
      xxx-wordpress                   pipeline: wordpress-build-pipeline                   applicationURL:
      https://xxx.site.url                   wordpress:                     repository_ssh_url:
      git@github.com:saritasa-nest/xxx-wordpress.git                     externalDatabase:                       host:
      xxx.xxx.us-west-2.rds.amazonaws.com                       user: xxx-wordpress-user-dev                       existingSecret:
      xxx-wordpress-dev-externaldb                       database: xxx-wordpress-dev                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Simple wordpress
      application example filled by default, but without ci/cd:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: wordpress                   repository:
      xxx-wordpress                   pipeline: wordpress-build-pipeline                   applicationURL:
      https://xxx.site.url                   wordpress:                     ci: false                     externalDatabase:                       host:
      xxx.xxx.us-west-2.rds.amazonaws.com                       user: xxx-wordpress-user-dev                       existingSecret:
      xxx-wordpress-dev-externaldb                       database: xxx-wordpress-dev                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    More difficult
      example of project containing `wordpress` and `frontend` component. Also defined
      for example all extra wordpress params that could be set:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami                   - git@github.com:saritasa-nest/xxx-kubernetes-aws.git               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: wordpress                   repository: xxx-wordpress                   pipeline:
      wordpress-build-pipeline                   applicationURL: https://xxx.site.url                   wordpress:                     imageTag:
      "5.8.1"                     repository_ssh_url: "git@github.com:saritasa-nest/xxx-wordpress.git"                     resources:                       requests:                         memory:
      512Mi                         cpu: 100m                     commonLabels:                       tech_stack:
      php                       application: wordpress                     wordpressTablePrefix:
      "qbf_"                     existingSecret: xxx-wordpress                     updateStrategy:                       type:
      RollingUpdate                       rollingUpdate:                         maxSurge:
      25%                         maxUnavailable: 25%                     smtp:                       host:
      mysmtp.site.url                       port: 1010                       user:
      myuser                       password: mypassword                     nodeSelector:                       tech_stack:
      php                       pvc: "true"                     podSecurityContext:                       enabled:
      true                       fsGroup: 1001                     containerSecurityContext:                       enabled:
      true                       runAsUser: 1001                     ci: true                     extraInitContainers:                       -
      name: build-frontend                         image: node:14                         imagePullPolicy:
      Always                         command:                           - bash                           -
      -c                           - |                             git -c core.sshCommand="ssh
      -i ~/.ssh/id_rsa" clone git@github.com:saritasa-nest/xxx.git -b develop ~/xxx                             cd
      ~/xxx                             npm install                             npm
      run build:embedded-questionnaire                             cp -Rf $(pwd)/dist/*
      /bitnami/wordpress/wp-content/                             echo "Copied built
      files into /bitnami/wordpress/wp-content/"                             ls -la
      /bitnami/wordpress/wp-content/                             echo "Done BUILD
      FRONTEND"                         volumeMounts:                         - mountPath:
      /bitnami/wordpress                           name: wordpress-data                           subPath:
      wordpress                         - mountPath: /home/node/.ssh/id_rsa                           name:
      xxx-ssh-key                           subPath: ssh-privatekey                         -
      mountPath: /home/node/.ssh/known_hosts                           name: github-known-hosts                           subPath:
      config.ssh                         securityContext:                           runAsNonRoot:
      true                           runAsUser: 1000                           allowPrivilegeEscalation:
      false                     extraVolumesSshKeySecret: xxx-wordpress-deploy-key                     extraVolumes:                     -
      name: xxx-ssh-key                       secret:                         secretName:
      xxx-deploy-key                     ingress:                       hostname:
      test.xxx.site.url                       annotations:                         kubernetes.io/ingress.class:
      "nginx"                         cert-manager.io/cluster-issuer: "letsencrypt-prod"                         nginx.ingress.kubernetes.io/proxy-body-size:
      100m                         nginx.ingress.kubernetes.io/client-max-body-size:
      100m                         nginx.ingress.kubernetes.io/server-snippet: |-                           add_header
      X-Robots-Tag "noindex, nofollow, nosnippet, noarchive";                         nginx.ingress.kubernetes.io/whitelist-source-range:
      |                           35.85.92.224/32,                           100.21.244.185/32                       extraHosts:                         -
      name: test.xxx.site.url                           path: /wp-admin                     externalDatabase:                       host:
      "xxx.xxx.us-west-2.rds.amazonaws.com"                       user: "xxx-wp-user-dev"                       existingSecret:
      "xxx-wordpress-dev-externaldb"                       database: "xxx-wp-dev"                     wordpressExtraConfigContent:
      |                       @ini_set(''WP_MEMORY_LIMIT'', ''512M'');                       @ini_set(''ALLOW_UNFILTERED_UPLOADS'',
      true);                     extraEnvVars:                       KEY: VALUE                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template                  - name: frontend                   repository:
      xxx-frontend                   pipeline: buildpack-frontend-build-pipeline                   applicationURL:
      https://app.xxx.site.url                   eventlistener:                     template:
      buildpack-frontend-build-pipeline-trigger-template                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/frontend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ``` '
    digest: 4a486329998e2443e739e4096451953a211158a561db094dbb67f63e67564d61
    maintainers:
    - email: nospam@saritasa.com
      name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-apps
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-apps-0.1.23-dev/saritasa-tekton-apps-0.1.23-dev.tgz
    version: 0.1.23-dev
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2022-09-21T07:11:59.911897735Z"
    description: 'A Helm chart for tekton apps (rbac, eventlistener)  Implements:
      - dynamic records for eventlistener - PVCs - RBAC - configmaps for each app
      - triggerbindings for each app - kubernetes job to make sure the PVCs are bound
      and argocd marks the app as healthy - argocd project for each app - argocd application
      for each app component  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then declare dynamic list of projects (and associated components of that
      project like backend, api, frontend, etc) that would be dynamically added into
      the tekton''s eventlistener manifest.  Each component should be a separate git
      repository.  ```yaml --- apiVersion: argoproj.io/v1alpha1 kind: Application
      metadata:   name: tekton-apps   namespace: argo-cd   finalizers:   - resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "41" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-apps     helm:       values: |         environment: staging         gitBranchPrefixes:           -
      staging         storageClassName: gp3         nodeSelector:           ops: ''true''         aws:           region:
      "us-west-2"           dns: staging.site.com         defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com         argocd:           server:
      deploy.staging.site.com         eventlistener:           enableWebhookSecret:
      true         apps:           - project: vp             enabled: true             argocd:               labels:                 created-by:
      xxx                 ops-main: xxx                 ops-secondary: xxx                 pm:
      xxx                 tm: xxx               namespace: prod             mailList:
      vp@site.com             devopsMailList: devops+vp@site.com             jiraURL:
      https://site.atlassian.net/browse/vp             tektonURL: https://tekton.staging.site.com/#/namespaces/ci/pipelineruns             slack:
      client-vp-ci             kubernetesRepository:               name: vp-kubernetes-aws               branch:
      main               url: git@github.com:org-name/vp-kubernetes-aws.git              components:               -
      name: backend                 repository: vp-backend                 pipeline:
      buildpack-django-build-pipeline                 applicationURL: https://api.staging.site.com                 eventlistener:                   template:
      buildpack-django-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/backend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/builder:v1                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/runner:v1               -
      name: frontend                 repository: vp-frontend                 pipeline:
      buildpack-frontend-build-pipeline                 applicationURL: https://staging.site.com                 eventlistener:                   template:
      buildpack-frontend-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/frontend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/builder:full                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/runner:full                   -
      name: source_subpath                     value: dist/web          # make sure
      PVCs are bound after the chart is synced         # by temporarily mount them
      into short-live job.         runPostInstallMountPvcJob: false      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.16"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true    ```    Above helm chart creates a new ArgoCD project
      for each project in values, for each component in project''s components there
      is created a separate ArgoCD   application and required for Tekton ci/cd resources
      (triggerbindings, roles, configmaps, jobs, serviceaccounts, pvcs and etc).    #
      fill below parameters for each `project` block    - apps[PROJECT].environment
      - possbility to define custom project''s environment, needed for cases when
      need to deploy `dev` and `prod` envs to the same cluster. For example `xxx`
      dev     and prod both deployed in rocks EKS (not required)   - apps[PROJECT].enabled
      - boolean value to define whether the project enabled or not (required)   -
      apps[PROJECT].argocd.labels - labels which are added to ArgoCD project (required)   -
      apps[PROJECT].argocd.namespace - allowed for ArgoCD project namespace (required)   -
      apps[PROJECT].argocd.syncWave - ArgoCD project sync wave, i.e. sequence in which
      project should be synced (not required, default: "200")   - apps[PROJECT].argocd.sourceRepos[]
      - source repositories added to ArgoCD project (not required, default: [<apps[PROJECT].kubernetesRepository.url>])   -
      apps[PROJECT].argocd.extraDestinationNamespaces[] - adds extra destination namespaces
      for ArgoCD project to be able to create custom apps within project''s kubernetes
      repo (not required, default: null)   - apps[PROJECT].mailList - project''s team
      email address (required)   - apps[PROJECT].devopsMailList - project''s devops
      team email address (required)   - apps[PROJECT].jiraURL - project''s JIRA url
      (required)   - apps[PROJECT].tektonURL - link to Tekton pipelineruns used in
      Tekton ConfigMap as `TEKTON_URL` during Slack notification send (required)   -
      apps[PROJECT].slack - project''s Slack channel name (required)   - apps[PROJECT].kubernetesRepository.name
      - project''s kubernetes repository name used in ArgoCD application and Tekton
      TriggerBinding (may be absent and replaced with     `apps[PROJECT].components[NAME].argocd`
      and `apps[PROJECT].argocd.sourceRepos[]` blocks in case if project has no kubernetes
      repo)   - apps[PROJECT].kubernetesRepository.branch - project''s kubernetes
      repository branch used in ArgoCD application and Tekton TriggerBinding (may
      be absent and replaced     with `apps[PROJECT].components[NAME].argocd` and
      `apps[PROJECT].argocd.sourceRepos[]` blocks in case if project has no kubernetes
      repo)   - apps[PROJECT].kubernetesRepository.url - project''s kubernetes repository
      url used in ArgoCD application and Tekton TriggerBinding (may be absent and
      replaced with     `apps[PROJECT].components[NAME].argocd` and `apps[PROJECT].argocd.sourceRepos[]`
      blocks in case if project has no kubernetes repo)    Basically we have 2 different
      types of ci/cd - basic (buildpacks, kaniko) and wordpress ones. So depending
      on project''s component type you will need to fill different parameters.    #
      fill below parameters for each `component` block    - apps[PROJECT].components[NAME].repository
      - the name of the repository containing the code (may be absent in case of wordpress
      application without deployment, i.e. bolrdswp, taco,     saritasa-wordpress-demo)   -
      apps[PROJECT].components[NAME].pipeline - the name of the pipeline building
      the code from the repository above   - apps[PROJECT].components[NAME].argocd.source.syncWave
      - custom component ArgoCD application sync wave (default: "210")   - apps[PROJECT].components[NAME].argocd.source.path
      - path to directory responsible for kubernetes resources creation of the ArgoCD
      Application (default: kubernetes repo path for basic     projects "apps/<apps[PROJECT].components[NAME].name>/manifests/<environment>"
      or "null" for wordpress projects)   - apps[PROJECT].components[NAME].argocd.source.repoUrl
      - url of repository which should be used for ArgoCD Application (default: kubernetes
      repo for basic projects     "<apps[PROJECT].kubernetesRepository.url>" or `https://charts.bitnami.com/bitnami`
      for wordpress projects)   - apps[PROJECT].components[NAME].argocd.source.targetRevision
      - tag or branch in the repository for ArgoCD Application (default: kubernetes
      branch for basic projects     "<apps[PROJECT].kubernetesRepository.branch>"
      or "11.0.14" for wordpress projects)   - apps[PROJECT].components[NAME].argocd.ignoreDeploymentReplicasDiff
      - flag whether this exact ArgoCD application should ignore `Replicas` count
      differences for deployments. It may be needed for `staging` and `prod` environments
      which use HPA (default: false)   - apps[PROJECT].components[NAME].applicationURL
      - url that should be used in tekton build ConfigMap `APPLICATION_URL` param   -
      apps[PROJECT].components[NAME].tektonKubernetesRepoDeployKeyName - name of existing
      in kubernetes cluster secret with SSH key to kubernetes repository, used in
      `kustomize` deployment     step (i.e. addon-backend-deploy-key). This param
      sets by default to `<project>-kubernetes-aws-deploy-key` if project has `kubernetesRepository`
      param in values (actual only for basic     components, not wordpress)   - apps[PROJECT].components[NAME].eventlistener.template
      - the name of the trigger template for the component to be used   - apps[PROJECT].components[NAME].eventlistener.enableWebhookSecret
      - should you enable the git web hook for this particular app/component in the
      eventlistener configuration   - apps[PROJECT].components[NAME].eventlistener.filter
      - custom filter for the component of the eventlistener   - apps[PROJECT].components[NAME].eventlistener.extraOverlays
      - extra overlays to be added into the eventlistener for the component   - apps[PROJECT].components[NAME].eventlistener.eventTypes
      - github event types to trigger the ci/cd   - apps[PROJECT].components[NAME].eventlistener.gitWebhookBranches[]
      - list of branches, push to which triggers ci/cd   - apps[PROJECT].components[NAME].extraBuildConfigParams
      - additional key/values to be added into `build-pipeline-config configmap` ConfigMap
      associated with the app   - apps[PROJECT].components[NAME].triggerBinding -
      values to be added into the TriggerBinding manifest except default ones    What
      is important to know is that any key defined in apps[PROJECT].components[NAME].triggerBinding
      would be added as is   into the generated triggerbinding associated with your
      app. However the chart renders some default values based on the values   in
      this values.yaml file:      - application, project, environment, docker_registry,
      kubernetes_repository_ssh_url, kubernetes_branch, kubernetes_repository_kustomize_path,
      source_subpath (for basic components)     - application, project, environment,
      namespace (for wordpress components)     # fill below parameters block only
      for `wordpress` components    - apps[PROJECT].components[NAME].wordpress.imageTag
      - tag of the wordpress image (default: "5.7.2")   - apps[PROJECT].components[NAME].wordpress.repository_ssh_url
      - project''s wordpress repository SSH url (default: null, may be absent if project
      has no wordpress repo)   - apps[PROJECT].components[NAME].wordpress.resources
      - wordpress pod resources params (default: requests.cpu: 100m, requests.memory:
      128Mi)   - apps[PROJECT].components[NAME].wordpress.commonLabels - wordpress
      pod common labels (default: commonLabels.tech_stack: php, commonLabels.application:
      wordpress)   - apps[PROJECT].components[NAME].wordpress.wordpressTablePrefix
      - wordpress DB tables prefix (default: wp_)   - apps[PROJECT].components[NAME].wordpress.existingSecret
      - name of existing in kubernetes secret with wp admin auth info (default: "<project_name>-<component_name>-<env>",     i.e.
      "taco-wordpress-dev")   - apps[PROJECT].components[NAME].wordpress.updateStrategy
      - strategy that should be used for wordpress pod update (default: updateStrategy.type:
      RollingUpdate,     updateStrategy.rollingUpdate.maxSurge: 0%, updateStrategy.rollingUpdate.maxUnavailable:
      100%, i.e. stop old pod and then create a new one)   - apps[PROJECT].components[NAME].wordpress.smtp.host
      - SMTP host for sending emails (default: mailhog.mailhog.svc.cluster.local)   -
      apps[PROJECT].components[NAME].wordpress.smtp.port - SMTP port for sending emails
      (default: 1025)   - apps[PROJECT].components[NAME].wordpress.smtp.user - SMTP
      user for sending emails (default: <project_name>, i.e. taco)   - apps[PROJECT].components[NAME].wordpress.smtp.password
      - SMTP password for sending emails (default: anypassword)   - apps[PROJECT].components[NAME].wordpress.nodeSelector
      - wordpress pod node selector params (default: nodeSelector.tech_stack: php,
      nodeSelector.pvc: "true")   - apps[PROJECT].components[NAME].wordpress.podSecurityContext
      - wordpress pod''s security context params (default: podSecurityContext.enabled:
      true, podSecurityContext.fsGroup: 1000)   - apps[PROJECT].components[NAME].wordpress.containerSecurityContext
      - wordpress pod container''s security context params (default: containerSecurityContext.enabled:
      true,     containerSecurityContext.runAsUser: 1000)   - apps[PROJECT].components[NAME].wordpress.ci
      - boolean flag which defines whether wordpress project has ci/cd or not (default:
      true)   - apps[PROJECT].components[NAME].wordpress.extraInitContainers - extra
      ci/cd init containers if needed, enabled only if wordpress component has `ci`
      flag enabled (default: null)   - apps[PROJECT].components[NAME].wordpress.extraVolumesSshKeySecret
      - name of a secret with wordpress repository SSH url (default: "<project_name>-<component_name>-deploy-key",     i.e.
      "taco-wordpress-deploy-key")   - apps[PROJECT].components[NAME].wordpress.extraVolumes
      - extra volumes that might be needed to wordpress pod (default: null)   - apps[PROJECT].components[NAME].wordpress.ingress.hostname
      - wordpress ingress hostname (default: "<project_name>.saritasa.rocks", i.e.
      "taco.saritasa.rocks")   - apps[PROJECT].components[NAME].wordpress.ingress.annotations
      - wordpress ingress annotations (default: kubernetes.io/ingress.class: "nginx",
      cert-manager.io/cluster-issuer: "letsencrypt-prod",     nginx.ingress.kubernetes.io/proxy-body-size:
      100m, nginx.ingress.kubernetes.io/proxy-connect-timeout: "300", nginx.ingress.kubernetes.io/proxy-next-upstream-timeout:
      "300",     nginx.ingress.kubernetes.io/auth-type: basic, nginx.ingress.kubernetes.io/auth-secret:
      <ingress.authSecret>, nginx.ingress.kubernetes.io/auth-realm: "Authentication
      Required",     nginx.ingress.kubernetes.io/server-snippet: |-,   add_header
      X-Robots-Tag "noindex, nofollow, nosnippet, noarchive")   - apps[PROJECT].components[NAME].wordpress.ingress.authSecret
      - name of kubernetes secret that should be used in ingress for basic auth (default:
      "<project_name>-<compinent_name>-<env>-basic-auth",     i.e. "taco-wordpress-dev-basic-auth")   -
      apps[PROJECT].components[NAME].wordpress.ingress.extraHosts - list of extra
      hosts that may be defined in ingress (default: null)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.host
      - wordpress DB host (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.user
      - wordpress DB user (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.existingSecret
      - name of existing in kubernetes secret with DB user password (required)   -
      apps[PROJECT].components[NAME].wordpress.externalDatabase.database - wordpress
      DB name (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.port
      - wordpress DB port (default: 3306)   - apps[PROJECT].components[NAME].wordpress.wordpressExtraConfigContent
      - wordpress extra configs if needed (default: null)   - apps[PROJECT].components[NAME].wordpress.extraEnvVars
      - wordpress extra env vars if needed (default: null)    Example of values with
      extra `eventlistener` and `extraBuildConfigParams` in component:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           gitBranchPrefixes:             -
      staging           storageClassName: gp2           aws:             region: "us-west-2"             dns:
      staging.site.com           defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com           argocd:             server:
      deploy.staging.site.com           eventlistener:             enableWebhookSecret:
      true           apps:             - project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: prod               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.site.com/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack                   applicationURL: https://api.site.com                   eventlistener:                     template:
      buildpack-backend-build-pipeline-trigger-template                   extraBuildConfigParams:
      # what additional K/V pairs you want to add into the build-pipeline-config configmap                     KEY:
      value                   triggerBinding:                     - name: docker_registry_repository                       value:
      XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/backend                     - name:
      buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/runner:v1                 -
      name: frontend                   repository: xxx-frontend                   pipeline:
      buildpack                   applicationURL: https://site.com                   eventlistener:                     enableWebhookSecret:
      false                     filter: (body.ref.startsWith(''refs/heads/develop'')
      || body.ref.startsWith(''refs/heads/release/''))                     template:
      buildpack-frontend-build-pipeline-trigger-template                     extraOverlays:
      []                     # - key: truncated_sha                     #   expression:
      "body.head_commit.id.truncate(7)"                     eventTypes: ["pull_request",
      "push"]                   extraBuildConfigParams: {}                   triggerBinding:                     -
      name: docker_registry_repository                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/frontend                     -
      name: buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web            # make
      sure PVCs are bound after the chart is synced           # by temporarily mount
      them into short-live job.           runPostInstallMountPvcJob: false        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true    ```    Example of
      old application from `saritasa-clients` repo, which has no separate `kubernetes`
      repository. Here we replace `apps[PROJECT].kubernetesRepository` block with   `apps[PROJECT].argocd.sourceRepos`
      and `apps[PROJECT].components[NAME].argocd` block, also it is required to set
      `apps[PROJECT].components[NAME].tektonKubernetesRepoDeployKeyName`   in such
      a case to use correct secret with deploy key as far as there is no kubernetes
      repo that is used by default.    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      git@github.com:saritasa-nest/xxx-backend.git                   - git@github.com:saritasa-nest/xxx-frontend.git               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: backend                   repository:
      xxx-backend                   pipeline: buildpack-django-build-pipeline                   applicationURL:
      https://api.xxx.site.url                   argocd:                     source:                       path:
      .kubernetes/manifests/dev                       repoUrl: git@github.com:saritasa-nest/xxx-backend.git                       targetRevision:
      develop                   eventlistener:                     template: buildpack-django-build-pipeline-trigger-template                   tektonKubernetesRepoDeployKeyName:
      xxx-backend-deploy-key                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1                 -
      name: frontend                   repository: xxx-frontend                   pipeline:
      buildpack-frontend-build-pipeline                   applicationURL: https://xxx.site.url                   argocd:                     source:                       path:
      .kubernetes/manifests/dev                       repoUrl: git@github.com:saritasa-nest/xxx-frontend.git                       targetRevision:
      develop                   eventlistener:                     template: buildpack-frontend-build-pipeline-trigger-template                   tektonKubernetesRepoDeployKeyName:
      xxx-frontend-deploy-key                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/frontend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Example with
      creating an ArgoCD project and application with its custom `environment` (case
      when in common `staging` environment we need to create for some reason project
      with   `dev` environment). Here is added an extra `apps[PROJECT].environment`
      param, which overrides default `environment` in helm values for this project,
      and   `apps[PROJECT].components[NAME].eventlistener.gitWebhookBranches` param,
      which defines that ci/cd should be trigger on push to `develop` branch.    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack-django-build-pipeline                   applicationURL: https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Also there might
      a situation that you would like to provision custom utility ArgoCD Application
      in argo-cd from project''s kubernetes repo (for example VP project provisions   like
      this `jitsi` application). To reach this you might need to add an extra destination
      namespace to ArgoCD Project, you should use   `apps[PROJECT].argocd.extraDestinationNamespaces[]`
      param for that like in below example.    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev                 extraDestinationNamespaces:                   -
      argo-cd               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack-django-build-pipeline                   applicationURL: https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    If you want
      to enable ignoring deployment replicas count differences in ArgoCD application
      of your component add `apps[PROJECT].components[NAME].argocd.ignoreDeploymentReplicasDiff:
      true` flag like in the below example (it may be needed for `staging` and `prod`
      envs, where you have horizontal pod autoscheduling - HPA):    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev                 extraDestinationNamespaces:                   -
      argo-cd               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   argocd:                     ignoreDeploymentReplicasDiff:
      true                   pipeline: buildpack-django-build-pipeline                   applicationURL:
      https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Simple wordpress
      application example filled by default:    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: wordpress                   repository:
      xxx-wordpress                   pipeline: wordpress-build-pipeline                   applicationURL:
      https://xxx.site.url                   wordpress:                     repository_ssh_url:
      git@github.com:saritasa-nest/xxx-wordpress.git                     externalDatabase:                       host:
      xxx.xxx.us-west-2.rds.amazonaws.com                       user: xxx-wordpress-user-dev                       existingSecret:
      xxx-wordpress-dev-externaldb                       database: xxx-wordpress-dev                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Simple wordpress
      application example filled by default, but without ci/cd:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: wordpress                   repository:
      xxx-wordpress                   pipeline: wordpress-build-pipeline                   applicationURL:
      https://xxx.site.url                   wordpress:                     ci: false                     externalDatabase:                       host:
      xxx.xxx.us-west-2.rds.amazonaws.com                       user: xxx-wordpress-user-dev                       existingSecret:
      xxx-wordpress-dev-externaldb                       database: xxx-wordpress-dev                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    More difficult
      example of project containing `wordpress` and `frontend` component. Also defined
      for example all extra wordpress params that could be set:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami                   - git@github.com:saritasa-nest/xxx-kubernetes-aws.git               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: wordpress                   repository: xxx-wordpress                   pipeline:
      wordpress-build-pipeline                   applicationURL: https://xxx.site.url                   wordpress:                     imageTag:
      "5.8.1"                     repository_ssh_url: "git@github.com:saritasa-nest/xxx-wordpress.git"                     resources:                       requests:                         memory:
      512Mi                         cpu: 100m                     commonLabels:                       tech_stack:
      php                       application: wordpress                     wordpressTablePrefix:
      "qbf_"                     existingSecret: xxx-wordpress                     updateStrategy:                       type:
      RollingUpdate                       rollingUpdate:                         maxSurge:
      25%                         maxUnavailable: 25%                     smtp:                       host:
      mysmtp.site.url                       port: 1010                       user:
      myuser                       password: mypassword                     nodeSelector:                       tech_stack:
      php                       pvc: "true"                     podSecurityContext:                       enabled:
      true                       fsGroup: 1001                     containerSecurityContext:                       enabled:
      true                       runAsUser: 1001                     ci: true                     extraInitContainers:                       -
      name: build-frontend                         image: node:14                         imagePullPolicy:
      Always                         command:                           - bash                           -
      -c                           - |                             git -c core.sshCommand="ssh
      -i ~/.ssh/id_rsa" clone git@github.com:saritasa-nest/xxx.git -b develop ~/xxx                             cd
      ~/xxx                             npm install                             npm
      run build:embedded-questionnaire                             cp -Rf $(pwd)/dist/*
      /bitnami/wordpress/wp-content/                             echo "Copied built
      files into /bitnami/wordpress/wp-content/"                             ls -la
      /bitnami/wordpress/wp-content/                             echo "Done BUILD
      FRONTEND"                         volumeMounts:                         - mountPath:
      /bitnami/wordpress                           name: wordpress-data                           subPath:
      wordpress                         - mountPath: /home/node/.ssh/id_rsa                           name:
      xxx-ssh-key                           subPath: ssh-privatekey                         -
      mountPath: /home/node/.ssh/known_hosts                           name: github-known-hosts                           subPath:
      config.ssh                         securityContext:                           runAsNonRoot:
      true                           runAsUser: 1000                           allowPrivilegeEscalation:
      false                     extraVolumesSshKeySecret: xxx-wordpress-deploy-key                     extraVolumes:                     -
      name: xxx-ssh-key                       secret:                         secretName:
      xxx-deploy-key                     ingress:                       hostname:
      test.xxx.site.url                       annotations:                         kubernetes.io/ingress.class:
      "nginx"                         cert-manager.io/cluster-issuer: "letsencrypt-prod"                         nginx.ingress.kubernetes.io/proxy-body-size:
      100m                         nginx.ingress.kubernetes.io/client-max-body-size:
      100m                         nginx.ingress.kubernetes.io/server-snippet: |-                           add_header
      X-Robots-Tag "noindex, nofollow, nosnippet, noarchive";                         nginx.ingress.kubernetes.io/whitelist-source-range:
      |                           35.85.92.224/32,                           100.21.244.185/32                       extraHosts:                         -
      name: test.xxx.site.url                           path: /wp-admin                     externalDatabase:                       host:
      "xxx.xxx.us-west-2.rds.amazonaws.com"                       user: "xxx-wp-user-dev"                       existingSecret:
      "xxx-wordpress-dev-externaldb"                       database: "xxx-wp-dev"                     wordpressExtraConfigContent:
      |                       @ini_set(''WP_MEMORY_LIMIT'', ''512M'');                       @ini_set(''ALLOW_UNFILTERED_UPLOADS'',
      true);                     extraEnvVars:                       KEY: VALUE                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template                  - name: frontend                   repository:
      xxx-frontend                   pipeline: buildpack-frontend-build-pipeline                   applicationURL:
      https://app.xxx.site.url                   eventlistener:                     template:
      buildpack-frontend-build-pipeline-trigger-template                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/frontend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ``` '
    digest: 543136ed547ffd9e238712d5cf4ef8daf4a47ae4a09d221484c6682308a6edfb
    maintainers:
    - email: nospam@saritasa.com
      name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-apps
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-apps-0.1.23-dev/saritasa-tekton-apps-0.1.23-dev.tgz
    version: 0.1.23-dev
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2022-09-21T07:16:50.201172782Z"
    description: 'A Helm chart for tekton apps (rbac, eventlistener)  Implements:
      - dynamic records for eventlistener - PVCs - RBAC - configmaps for each app
      - triggerbindings for each app - kubernetes job to make sure the PVCs are bound
      and argocd marks the app as healthy - argocd project for each app - argocd application
      for each app component  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then declare dynamic list of projects (and associated components of that
      project like backend, api, frontend, etc) that would be dynamically added into
      the tekton''s eventlistener manifest.  Each component should be a separate git
      repository.  ```yaml --- apiVersion: argoproj.io/v1alpha1 kind: Application
      metadata:   name: tekton-apps   namespace: argo-cd   finalizers:   - resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "41" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-apps     helm:       values: |         environment: staging         gitBranchPrefixes:           -
      staging         storageClassName: gp3         nodeSelector:           ops: ''true''         aws:           region:
      "us-west-2"           dns: staging.site.com         defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com         argocd:           server:
      deploy.staging.site.com         eventlistener:           enableWebhookSecret:
      true         apps:           - project: vp             enabled: true             argocd:               labels:                 created-by:
      xxx                 ops-main: xxx                 ops-secondary: xxx                 pm:
      xxx                 tm: xxx               namespace: prod             mailList:
      vp@site.com             devopsMailList: devops+vp@site.com             jiraURL:
      https://site.atlassian.net/browse/vp             tektonURL: https://tekton.staging.site.com/#/namespaces/ci/pipelineruns             slack:
      client-vp-ci             kubernetesRepository:               name: vp-kubernetes-aws               branch:
      main               url: git@github.com:org-name/vp-kubernetes-aws.git              components:               -
      name: backend                 repository: vp-backend                 pipeline:
      buildpack-django-build-pipeline                 applicationURL: https://api.staging.site.com                 eventlistener:                   template:
      buildpack-django-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/backend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/builder:v1                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/runner:v1               -
      name: frontend                 repository: vp-frontend                 pipeline:
      buildpack-frontend-build-pipeline                 applicationURL: https://staging.site.com                 eventlistener:                   template:
      buildpack-frontend-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/frontend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/builder:full                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/runner:full                   -
      name: source_subpath                     value: dist/web          # make sure
      PVCs are bound after the chart is synced         # by temporarily mount them
      into short-live job.         runPostInstallMountPvcJob: false      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.16"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true    ```    Above helm chart creates a new ArgoCD project
      for each project in values, for each component in project''s components there
      is created a separate ArgoCD   application and required for Tekton ci/cd resources
      (triggerbindings, roles, configmaps, jobs, serviceaccounts, pvcs and etc).    #
      fill below parameters for each `project` block    - apps[PROJECT].environment
      - possbility to define custom project''s environment, needed for cases when
      need to deploy `dev` and `prod` envs to the same cluster. For example `xxx`
      dev     and prod both deployed in rocks EKS (not required)   - apps[PROJECT].enabled
      - boolean value to define whether the project enabled or not (required)   -
      apps[PROJECT].argocd.labels - labels which are added to ArgoCD project (required)   -
      apps[PROJECT].argocd.namespace - allowed for ArgoCD project namespace (required)   -
      apps[PROJECT].argocd.syncWave - ArgoCD project sync wave, i.e. sequence in which
      project should be synced (not required, default: "200")   - apps[PROJECT].argocd.sourceRepos[]
      - source repositories added to ArgoCD project (not required, default: [<apps[PROJECT].kubernetesRepository.url>])   -
      apps[PROJECT].argocd.extraDestinationNamespaces[] - adds extra destination namespaces
      for ArgoCD project to be able to create custom apps within project''s kubernetes
      repo (not required, default: null)   - apps[PROJECT].mailList - project''s team
      email address (required)   - apps[PROJECT].devopsMailList - project''s devops
      team email address (required)   - apps[PROJECT].jiraURL - project''s JIRA url
      (required)   - apps[PROJECT].tektonURL - link to Tekton pipelineruns used in
      Tekton ConfigMap as `TEKTON_URL` during Slack notification send (required)   -
      apps[PROJECT].slack - project''s Slack channel name (required)   - apps[PROJECT].kubernetesRepository.name
      - project''s kubernetes repository name used in ArgoCD application and Tekton
      TriggerBinding (may be absent and replaced with     `apps[PROJECT].components[NAME].argocd`
      and `apps[PROJECT].argocd.sourceRepos[]` blocks in case if project has no kubernetes
      repo)   - apps[PROJECT].kubernetesRepository.branch - project''s kubernetes
      repository branch used in ArgoCD application and Tekton TriggerBinding (may
      be absent and replaced     with `apps[PROJECT].components[NAME].argocd` and
      `apps[PROJECT].argocd.sourceRepos[]` blocks in case if project has no kubernetes
      repo)   - apps[PROJECT].kubernetesRepository.url - project''s kubernetes repository
      url used in ArgoCD application and Tekton TriggerBinding (may be absent and
      replaced with     `apps[PROJECT].components[NAME].argocd` and `apps[PROJECT].argocd.sourceRepos[]`
      blocks in case if project has no kubernetes repo)    Basically we have 2 different
      types of ci/cd - basic (buildpacks, kaniko) and wordpress ones. So depending
      on project''s component type you will need to fill different parameters.    #
      fill below parameters for each `component` block    - apps[PROJECT].components[NAME].repository
      - the name of the repository containing the code (may be absent in case of wordpress
      application without deployment, i.e. bolrdswp, taco,     saritasa-wordpress-demo)   -
      apps[PROJECT].components[NAME].pipeline - the name of the pipeline building
      the code from the repository above   - apps[PROJECT].components[NAME].argocd.source.syncWave
      - custom component ArgoCD application sync wave (default: "210")   - apps[PROJECT].components[NAME].argocd.source.path
      - path to directory responsible for kubernetes resources creation of the ArgoCD
      Application (default: kubernetes repo path for basic     projects "apps/<apps[PROJECT].components[NAME].name>/manifests/<environment>"
      or "null" for wordpress projects)   - apps[PROJECT].components[NAME].argocd.source.repoUrl
      - url of repository which should be used for ArgoCD Application (default: kubernetes
      repo for basic projects     "<apps[PROJECT].kubernetesRepository.url>" or `https://charts.bitnami.com/bitnami`
      for wordpress projects)   - apps[PROJECT].components[NAME].argocd.source.targetRevision
      - tag or branch in the repository for ArgoCD Application (default: kubernetes
      branch for basic projects     "<apps[PROJECT].kubernetesRepository.branch>"
      or "11.0.14" for wordpress projects)   - apps[PROJECT].components[NAME].argocd.ignoreDeploymentReplicasDiff
      - flag whether this exact ArgoCD application should ignore `Replicas` count
      differences for deployments. It may be needed for `staging` and `prod` environments
      which use HPA (default: false)   - apps[PROJECT].components[NAME].applicationURL
      - url that should be used in tekton build ConfigMap `APPLICATION_URL` param   -
      apps[PROJECT].components[NAME].tektonKubernetesRepoDeployKeyName - name of existing
      in kubernetes cluster secret with SSH key to kubernetes repository, used in
      `kustomize` deployment     step (i.e. addon-backend-deploy-key). This param
      sets by default to `<project>-kubernetes-aws-deploy-key` if project has `kubernetesRepository`
      param in values (actual only for basic     components, not wordpress)   - apps[PROJECT].components[NAME].eventlistener.template
      - the name of the trigger template for the component to be used   - apps[PROJECT].components[NAME].eventlistener.enableWebhookSecret
      - should you enable the git web hook for this particular app/component in the
      eventlistener configuration   - apps[PROJECT].components[NAME].eventlistener.filter
      - custom filter for the component of the eventlistener   - apps[PROJECT].components[NAME].eventlistener.extraOverlays
      - extra overlays to be added into the eventlistener for the component   - apps[PROJECT].components[NAME].eventlistener.eventTypes
      - github event types to trigger the ci/cd   - apps[PROJECT].components[NAME].eventlistener.gitWebhookBranches[]
      - list of branches, push to which triggers ci/cd   - apps[PROJECT].components[NAME].extraBuildConfigParams
      - additional key/values to be added into `build-pipeline-config configmap` ConfigMap
      associated with the app   - apps[PROJECT].components[NAME].triggerBinding -
      values to be added into the TriggerBinding manifest except default ones    What
      is important to know is that any key defined in apps[PROJECT].components[NAME].triggerBinding
      would be added as is   into the generated triggerbinding associated with your
      app. However the chart renders some default values based on the values   in
      this values.yaml file:      - application, project, environment, docker_registry,
      kubernetes_repository_ssh_url, kubernetes_branch, kubernetes_repository_kustomize_path,
      source_subpath (for basic components)     - application, project, environment,
      namespace (for wordpress components)     # fill below parameters block only
      for `wordpress` components    - apps[PROJECT].components[NAME].wordpress.imageTag
      - tag of the wordpress image (default: "5.7.2")   - apps[PROJECT].components[NAME].wordpress.repository_ssh_url
      - project''s wordpress repository SSH url (default: null, may be absent if project
      has no wordpress repo)   - apps[PROJECT].components[NAME].wordpress.resources
      - wordpress pod resources params (default: requests.cpu: 100m, requests.memory:
      128Mi)   - apps[PROJECT].components[NAME].wordpress.commonLabels - wordpress
      pod common labels (default: commonLabels.tech_stack: php, commonLabels.application:
      wordpress)   - apps[PROJECT].components[NAME].wordpress.wordpressTablePrefix
      - wordpress DB tables prefix (default: wp_)   - apps[PROJECT].components[NAME].wordpress.existingSecret
      - name of existing in kubernetes secret with wp admin auth info (default: "<project_name>-<component_name>-<env>",     i.e.
      "taco-wordpress-dev")   - apps[PROJECT].components[NAME].wordpress.updateStrategy
      - strategy that should be used for wordpress pod update (default: updateStrategy.type:
      RollingUpdate,     updateStrategy.rollingUpdate.maxSurge: 0%, updateStrategy.rollingUpdate.maxUnavailable:
      100%, i.e. stop old pod and then create a new one)   - apps[PROJECT].components[NAME].wordpress.smtp.host
      - SMTP host for sending emails (default: mailhog.mailhog.svc.cluster.local)   -
      apps[PROJECT].components[NAME].wordpress.smtp.port - SMTP port for sending emails
      (default: 1025)   - apps[PROJECT].components[NAME].wordpress.smtp.user - SMTP
      user for sending emails (default: <project_name>, i.e. taco)   - apps[PROJECT].components[NAME].wordpress.smtp.password
      - SMTP password for sending emails (default: anypassword)   - apps[PROJECT].components[NAME].wordpress.nodeSelector
      - wordpress pod node selector params (default: nodeSelector.tech_stack: php,
      nodeSelector.pvc: "true")   - apps[PROJECT].components[NAME].wordpress.podSecurityContext
      - wordpress pod''s security context params (default: podSecurityContext.enabled:
      true, podSecurityContext.fsGroup: 1000)   - apps[PROJECT].components[NAME].wordpress.containerSecurityContext
      - wordpress pod container''s security context params (default: containerSecurityContext.enabled:
      true,     containerSecurityContext.runAsUser: 1000)   - apps[PROJECT].components[NAME].wordpress.ci
      - boolean flag which defines whether wordpress project has ci/cd or not (default:
      true)   - apps[PROJECT].components[NAME].wordpress.extraInitContainers - extra
      ci/cd init containers if needed, enabled only if wordpress component has `ci`
      flag enabled (default: null)   - apps[PROJECT].components[NAME].wordpress.extraVolumesSshKeySecret
      - name of a secret with wordpress repository SSH url (default: "<project_name>-<component_name>-deploy-key",     i.e.
      "taco-wordpress-deploy-key")   - apps[PROJECT].components[NAME].wordpress.extraVolumes
      - extra volumes that might be needed to wordpress pod (default: null)   - apps[PROJECT].components[NAME].wordpress.ingress.hostname
      - wordpress ingress hostname (default: "<project_name>.saritasa.rocks", i.e.
      "taco.saritasa.rocks")   - apps[PROJECT].components[NAME].wordpress.ingress.annotations
      - wordpress ingress annotations (default: kubernetes.io/ingress.class: "nginx",
      cert-manager.io/cluster-issuer: "letsencrypt-prod",     nginx.ingress.kubernetes.io/proxy-body-size:
      100m, nginx.ingress.kubernetes.io/proxy-connect-timeout: "300", nginx.ingress.kubernetes.io/proxy-next-upstream-timeout:
      "300",     nginx.ingress.kubernetes.io/auth-type: basic, nginx.ingress.kubernetes.io/auth-secret:
      <ingress.authSecret>, nginx.ingress.kubernetes.io/auth-realm: "Authentication
      Required",     nginx.ingress.kubernetes.io/server-snippet: |-,   add_header
      X-Robots-Tag "noindex, nofollow, nosnippet, noarchive")   - apps[PROJECT].components[NAME].wordpress.ingress.authSecret
      - name of kubernetes secret that should be used in ingress for basic auth (default:
      "<project_name>-<compinent_name>-<env>-basic-auth",     i.e. "taco-wordpress-dev-basic-auth")   -
      apps[PROJECT].components[NAME].wordpress.ingress.extraHosts - list of extra
      hosts that may be defined in ingress (default: null)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.host
      - wordpress DB host (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.user
      - wordpress DB user (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.existingSecret
      - name of existing in kubernetes secret with DB user password (required)   -
      apps[PROJECT].components[NAME].wordpress.externalDatabase.database - wordpress
      DB name (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.port
      - wordpress DB port (default: 3306)   - apps[PROJECT].components[NAME].wordpress.wordpressExtraConfigContent
      - wordpress extra configs if needed (default: null)   - apps[PROJECT].components[NAME].wordpress.extraEnvVars
      - wordpress extra env vars if needed (default: null)    Example of values with
      extra `eventlistener` and `extraBuildConfigParams` in component:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           gitBranchPrefixes:             -
      staging           storageClassName: gp2           aws:             region: "us-west-2"             dns:
      staging.site.com           defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com           argocd:             server:
      deploy.staging.site.com           eventlistener:             enableWebhookSecret:
      true           apps:             - project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: prod               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.site.com/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack                   applicationURL: https://api.site.com                   eventlistener:                     template:
      buildpack-backend-build-pipeline-trigger-template                   extraBuildConfigParams:
      # what additional K/V pairs you want to add into the build-pipeline-config configmap                     KEY:
      value                   triggerBinding:                     - name: docker_registry_repository                       value:
      XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/backend                     - name:
      buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/runner:v1                 -
      name: frontend                   repository: xxx-frontend                   pipeline:
      buildpack                   applicationURL: https://site.com                   eventlistener:                     enableWebhookSecret:
      false                     filter: (body.ref.startsWith(''refs/heads/develop'')
      || body.ref.startsWith(''refs/heads/release/''))                     template:
      buildpack-frontend-build-pipeline-trigger-template                     extraOverlays:
      []                     # - key: truncated_sha                     #   expression:
      "body.head_commit.id.truncate(7)"                     eventTypes: ["pull_request",
      "push"]                   extraBuildConfigParams: {}                   triggerBinding:                     -
      name: docker_registry_repository                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/frontend                     -
      name: buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web            # make
      sure PVCs are bound after the chart is synced           # by temporarily mount
      them into short-live job.           runPostInstallMountPvcJob: false        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true    ```    Example of
      old application from `saritasa-clients` repo, which has no separate `kubernetes`
      repository. Here we replace `apps[PROJECT].kubernetesRepository` block with   `apps[PROJECT].argocd.sourceRepos`
      and `apps[PROJECT].components[NAME].argocd` block, also it is required to set
      `apps[PROJECT].components[NAME].tektonKubernetesRepoDeployKeyName`   in such
      a case to use correct secret with deploy key as far as there is no kubernetes
      repo that is used by default.    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      git@github.com:saritasa-nest/xxx-backend.git                   - git@github.com:saritasa-nest/xxx-frontend.git               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: backend                   repository:
      xxx-backend                   pipeline: buildpack-django-build-pipeline                   applicationURL:
      https://api.xxx.site.url                   argocd:                     source:                       path:
      .kubernetes/manifests/dev                       repoUrl: git@github.com:saritasa-nest/xxx-backend.git                       targetRevision:
      develop                   eventlistener:                     template: buildpack-django-build-pipeline-trigger-template                   tektonKubernetesRepoDeployKeyName:
      xxx-backend-deploy-key                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1                 -
      name: frontend                   repository: xxx-frontend                   pipeline:
      buildpack-frontend-build-pipeline                   applicationURL: https://xxx.site.url                   argocd:                     source:                       path:
      .kubernetes/manifests/dev                       repoUrl: git@github.com:saritasa-nest/xxx-frontend.git                       targetRevision:
      develop                   eventlistener:                     template: buildpack-frontend-build-pipeline-trigger-template                   tektonKubernetesRepoDeployKeyName:
      xxx-frontend-deploy-key                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/frontend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Example with
      creating an ArgoCD project and application with its custom `environment` (case
      when in common `staging` environment we need to create for some reason project
      with   `dev` environment). Here is added an extra `apps[PROJECT].environment`
      param, which overrides default `environment` in helm values for this project,
      and   `apps[PROJECT].components[NAME].eventlistener.gitWebhookBranches` param,
      which defines that ci/cd should be trigger on push to `develop` branch.    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack-django-build-pipeline                   applicationURL: https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Also there might
      a situation that you would like to provision custom utility ArgoCD Application
      in argo-cd from project''s kubernetes repo (for example VP project provisions   like
      this `jitsi` application). To reach this you might need to add an extra destination
      namespace to ArgoCD Project, you should use   `apps[PROJECT].argocd.extraDestinationNamespaces[]`
      param for that like in below example.    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev                 extraDestinationNamespaces:                   -
      argo-cd               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack-django-build-pipeline                   applicationURL: https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    If you want
      to enable ignoring deployment replicas count differences in ArgoCD application
      of your component add `apps[PROJECT].components[NAME].argocd.ignoreDeploymentReplicasDiff:
      true` flag like in the below example (it may be needed for `staging` and `prod`
      envs, where you have horizontal pod autoscheduling - HPA):    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev                 extraDestinationNamespaces:                   -
      argo-cd               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   argocd:                     ignoreDeploymentReplicasDiff:
      true                   pipeline: buildpack-django-build-pipeline                   applicationURL:
      https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Simple wordpress
      application example filled by default:    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: wordpress                   repository:
      xxx-wordpress                   pipeline: wordpress-build-pipeline                   applicationURL:
      https://xxx.site.url                   wordpress:                     repository_ssh_url:
      git@github.com:saritasa-nest/xxx-wordpress.git                     externalDatabase:                       host:
      xxx.xxx.us-west-2.rds.amazonaws.com                       user: xxx-wordpress-user-dev                       existingSecret:
      xxx-wordpress-dev-externaldb                       database: xxx-wordpress-dev                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Simple wordpress
      application example filled by default, but without ci/cd:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: wordpress                   repository:
      xxx-wordpress                   pipeline: wordpress-build-pipeline                   applicationURL:
      https://xxx.site.url                   wordpress:                     ci: false                     externalDatabase:                       host:
      xxx.xxx.us-west-2.rds.amazonaws.com                       user: xxx-wordpress-user-dev                       existingSecret:
      xxx-wordpress-dev-externaldb                       database: xxx-wordpress-dev                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    More difficult
      example of project containing `wordpress` and `frontend` component. Also defined
      for example all extra wordpress params that could be set:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami                   - git@github.com:saritasa-nest/xxx-kubernetes-aws.git               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: wordpress                   repository: xxx-wordpress                   pipeline:
      wordpress-build-pipeline                   applicationURL: https://xxx.site.url                   wordpress:                     imageTag:
      "5.8.1"                     repository_ssh_url: "git@github.com:saritasa-nest/xxx-wordpress.git"                     resources:                       requests:                         memory:
      512Mi                         cpu: 100m                     commonLabels:                       tech_stack:
      php                       application: wordpress                     wordpressTablePrefix:
      "qbf_"                     existingSecret: xxx-wordpress                     updateStrategy:                       type:
      RollingUpdate                       rollingUpdate:                         maxSurge:
      25%                         maxUnavailable: 25%                     smtp:                       host:
      mysmtp.site.url                       port: 1010                       user:
      myuser                       password: mypassword                     nodeSelector:                       tech_stack:
      php                       pvc: "true"                     podSecurityContext:                       enabled:
      true                       fsGroup: 1001                     containerSecurityContext:                       enabled:
      true                       runAsUser: 1001                     ci: true                     extraInitContainers:                       -
      name: build-frontend                         image: node:14                         imagePullPolicy:
      Always                         command:                           - bash                           -
      -c                           - |                             git -c core.sshCommand="ssh
      -i ~/.ssh/id_rsa" clone git@github.com:saritasa-nest/xxx.git -b develop ~/xxx                             cd
      ~/xxx                             npm install                             npm
      run build:embedded-questionnaire                             cp -Rf $(pwd)/dist/*
      /bitnami/wordpress/wp-content/                             echo "Copied built
      files into /bitnami/wordpress/wp-content/"                             ls -la
      /bitnami/wordpress/wp-content/                             echo "Done BUILD
      FRONTEND"                         volumeMounts:                         - mountPath:
      /bitnami/wordpress                           name: wordpress-data                           subPath:
      wordpress                         - mountPath: /home/node/.ssh/id_rsa                           name:
      xxx-ssh-key                           subPath: ssh-privatekey                         -
      mountPath: /home/node/.ssh/known_hosts                           name: github-known-hosts                           subPath:
      config.ssh                         securityContext:                           runAsNonRoot:
      true                           runAsUser: 1000                           allowPrivilegeEscalation:
      false                     extraVolumesSshKeySecret: xxx-wordpress-deploy-key                     extraVolumes:                     -
      name: xxx-ssh-key                       secret:                         secretName:
      xxx-deploy-key                     ingress:                       hostname:
      test.xxx.site.url                       annotations:                         kubernetes.io/ingress.class:
      "nginx"                         cert-manager.io/cluster-issuer: "letsencrypt-prod"                         nginx.ingress.kubernetes.io/proxy-body-size:
      100m                         nginx.ingress.kubernetes.io/client-max-body-size:
      100m                         nginx.ingress.kubernetes.io/server-snippet: |-                           add_header
      X-Robots-Tag "noindex, nofollow, nosnippet, noarchive";                         nginx.ingress.kubernetes.io/whitelist-source-range:
      |                           35.85.92.224/32,                           100.21.244.185/32                       extraHosts:                         -
      name: test.xxx.site.url                           path: /wp-admin                     externalDatabase:                       host:
      "xxx.xxx.us-west-2.rds.amazonaws.com"                       user: "xxx-wp-user-dev"                       existingSecret:
      "xxx-wordpress-dev-externaldb"                       database: "xxx-wp-dev"                     wordpressExtraConfigContent:
      |                       @ini_set(''WP_MEMORY_LIMIT'', ''512M'');                       @ini_set(''ALLOW_UNFILTERED_UPLOADS'',
      true);                     extraEnvVars:                       KEY: VALUE                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template                  - name: frontend                   repository:
      xxx-frontend                   pipeline: buildpack-frontend-build-pipeline                   applicationURL:
      https://app.xxx.site.url                   eventlistener:                     template:
      buildpack-frontend-build-pipeline-trigger-template                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/frontend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ``` '
    digest: 1032072f8cbd2bc01c5e16b1fae01ae42f20a1c7805ec02a5d24c6802a0f658f
    maintainers:
    - email: nospam@saritasa.com
      name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-apps
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-apps-0.1.23-dev/saritasa-tekton-apps-0.1.23-dev.tgz
    version: 0.1.23-dev
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2022-09-21T07:28:17.112211498Z"
    description: 'A Helm chart for tekton apps (rbac, eventlistener)  Implements:
      - dynamic records for eventlistener - PVCs - RBAC - configmaps for each app
      - triggerbindings for each app - kubernetes job to make sure the PVCs are bound
      and argocd marks the app as healthy - argocd project for each app - argocd application
      for each app component  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then declare dynamic list of projects (and associated components of that
      project like backend, api, frontend, etc) that would be dynamically added into
      the tekton''s eventlistener manifest.  Each component should be a separate git
      repository.  ```yaml --- apiVersion: argoproj.io/v1alpha1 kind: Application
      metadata:   name: tekton-apps   namespace: argo-cd   finalizers:   - resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "41" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-apps     helm:       values: |         environment: staging         gitBranchPrefixes:           -
      staging         storageClassName: gp3         nodeSelector:           ops: ''true''         aws:           region:
      "us-west-2"           dns: staging.site.com         defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com         argocd:           server:
      deploy.staging.site.com         eventlistener:           enableWebhookSecret:
      true         apps:           - project: vp             enabled: true             argocd:               labels:                 created-by:
      xxx                 ops-main: xxx                 ops-secondary: xxx                 pm:
      xxx                 tm: xxx               namespace: prod             mailList:
      vp@site.com             devopsMailList: devops+vp@site.com             jiraURL:
      https://site.atlassian.net/browse/vp             tektonURL: https://tekton.staging.site.com/#/namespaces/ci/pipelineruns             slack:
      client-vp-ci             kubernetesRepository:               name: vp-kubernetes-aws               branch:
      main               url: git@github.com:org-name/vp-kubernetes-aws.git              components:               -
      name: backend                 repository: vp-backend                 pipeline:
      buildpack-django-build-pipeline                 applicationURL: https://api.staging.site.com                 eventlistener:                   template:
      buildpack-django-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/backend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/builder:v1                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/runner:v1               -
      name: frontend                 repository: vp-frontend                 pipeline:
      buildpack-frontend-build-pipeline                 applicationURL: https://staging.site.com                 eventlistener:                   template:
      buildpack-frontend-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/frontend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/builder:full                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/runner:full                   -
      name: source_subpath                     value: dist/web          # make sure
      PVCs are bound after the chart is synced         # by temporarily mount them
      into short-live job.         runPostInstallMountPvcJob: false      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.16"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true    ```    Above helm chart creates a new ArgoCD project
      for each project in values, for each component in project''s components there
      is created a separate ArgoCD   application and required for Tekton ci/cd resources
      (triggerbindings, roles, configmaps, jobs, serviceaccounts, pvcs and etc).    #
      fill below parameters for each `project` block    - apps[PROJECT].environment
      - possbility to define custom project''s environment, needed for cases when
      need to deploy `dev` and `prod` envs to the same cluster. For example `xxx`
      dev     and prod both deployed in rocks EKS (not required)   - apps[PROJECT].enabled
      - boolean value to define whether the project enabled or not (required)   -
      apps[PROJECT].argocd.labels - labels which are added to ArgoCD project (required)   -
      apps[PROJECT].argocd.namespace - allowed for ArgoCD project namespace (required)   -
      apps[PROJECT].argocd.syncWave - ArgoCD project sync wave, i.e. sequence in which
      project should be synced (not required, default: "200")   - apps[PROJECT].argocd.sourceRepos[]
      - source repositories added to ArgoCD project (not required, default: [<apps[PROJECT].kubernetesRepository.url>])   -
      apps[PROJECT].argocd.extraDestinationNamespaces[] - adds extra destination namespaces
      for ArgoCD project to be able to create custom apps within project''s kubernetes
      repo (not required, default: null)   - apps[PROJECT].mailList - project''s team
      email address (required)   - apps[PROJECT].devopsMailList - project''s devops
      team email address (required)   - apps[PROJECT].jiraURL - project''s JIRA url
      (required)   - apps[PROJECT].tektonURL - link to Tekton pipelineruns used in
      Tekton ConfigMap as `TEKTON_URL` during Slack notification send (required)   -
      apps[PROJECT].slack - project''s Slack channel name (required)   - apps[PROJECT].kubernetesRepository.name
      - project''s kubernetes repository name used in ArgoCD application and Tekton
      TriggerBinding (may be absent and replaced with     `apps[PROJECT].components[NAME].argocd`
      and `apps[PROJECT].argocd.sourceRepos[]` blocks in case if project has no kubernetes
      repo)   - apps[PROJECT].kubernetesRepository.branch - project''s kubernetes
      repository branch used in ArgoCD application and Tekton TriggerBinding (may
      be absent and replaced     with `apps[PROJECT].components[NAME].argocd` and
      `apps[PROJECT].argocd.sourceRepos[]` blocks in case if project has no kubernetes
      repo)   - apps[PROJECT].kubernetesRepository.url - project''s kubernetes repository
      url used in ArgoCD application and Tekton TriggerBinding (may be absent and
      replaced with     `apps[PROJECT].components[NAME].argocd` and `apps[PROJECT].argocd.sourceRepos[]`
      blocks in case if project has no kubernetes repo)    Basically we have 2 different
      types of ci/cd - basic (buildpacks, kaniko) and wordpress ones. So depending
      on project''s component type you will need to fill different parameters.    #
      fill below parameters for each `component` block    - apps[PROJECT].components[NAME].repository
      - the name of the repository containing the code (may be absent in case of wordpress
      application without deployment, i.e. bolrdswp, taco,     saritasa-wordpress-demo)   -
      apps[PROJECT].components[NAME].pipeline - the name of the pipeline building
      the code from the repository above   - apps[PROJECT].components[NAME].argocd.source.syncWave
      - custom component ArgoCD application sync wave (default: "210")   - apps[PROJECT].components[NAME].argocd.source.path
      - path to directory responsible for kubernetes resources creation of the ArgoCD
      Application (default: kubernetes repo path for basic     projects "apps/<apps[PROJECT].components[NAME].name>/manifests/<environment>"
      or "null" for wordpress projects)   - apps[PROJECT].components[NAME].argocd.source.repoUrl
      - url of repository which should be used for ArgoCD Application (default: kubernetes
      repo for basic projects     "<apps[PROJECT].kubernetesRepository.url>" or `https://charts.bitnami.com/bitnami`
      for wordpress projects)   - apps[PROJECT].components[NAME].argocd.source.targetRevision
      - tag or branch in the repository for ArgoCD Application (default: kubernetes
      branch for basic projects     "<apps[PROJECT].kubernetesRepository.branch>"
      or "11.0.14" for wordpress projects)   - apps[PROJECT].components[NAME].argocd.ignoreDeploymentReplicasDiff
      - flag whether this exact ArgoCD application should ignore `Replicas` count
      differences for deployments. It may be needed for `staging` and `prod` environments
      which use HPA (default: false)   - apps[PROJECT].components[NAME].applicationURL
      - url that should be used in tekton build ConfigMap `APPLICATION_URL` param   -
      apps[PROJECT].components[NAME].tektonKubernetesRepoDeployKeyName - name of existing
      in kubernetes cluster secret with SSH key to kubernetes repository, used in
      `kustomize` deployment     step (i.e. addon-backend-deploy-key). This param
      sets by default to `<project>-kubernetes-aws-deploy-key` if project has `kubernetesRepository`
      param in values (actual only for basic     components, not wordpress)   - apps[PROJECT].components[NAME].eventlistener.template
      - the name of the trigger template for the component to be used   - apps[PROJECT].components[NAME].eventlistener.enableWebhookSecret
      - should you enable the git web hook for this particular app/component in the
      eventlistener configuration   - apps[PROJECT].components[NAME].eventlistener.filter
      - custom filter for the component of the eventlistener   - apps[PROJECT].components[NAME].eventlistener.extraOverlays
      - extra overlays to be added into the eventlistener for the component   - apps[PROJECT].components[NAME].eventlistener.eventTypes
      - github event types to trigger the ci/cd   - apps[PROJECT].components[NAME].eventlistener.gitWebhookBranches[]
      - list of branches, push to which triggers ci/cd   - apps[PROJECT].components[NAME].extraBuildConfigParams
      - additional key/values to be added into `build-pipeline-config configmap` ConfigMap
      associated with the app   - apps[PROJECT].components[NAME].triggerBinding -
      values to be added into the TriggerBinding manifest except default ones    What
      is important to know is that any key defined in apps[PROJECT].components[NAME].triggerBinding
      would be added as is   into the generated triggerbinding associated with your
      app. However the chart renders some default values based on the values   in
      this values.yaml file:      - application, project, environment, docker_registry,
      kubernetes_repository_ssh_url, kubernetes_branch, kubernetes_repository_kustomize_path,
      source_subpath (for basic components)     - application, project, environment,
      namespace (for wordpress components)     # fill below parameters block only
      for `wordpress` components    - apps[PROJECT].components[NAME].wordpress.imageTag
      - tag of the wordpress image (default: "5.7.2")   - apps[PROJECT].components[NAME].wordpress.repository_ssh_url
      - project''s wordpress repository SSH url (default: null, may be absent if project
      has no wordpress repo)   - apps[PROJECT].components[NAME].wordpress.resources
      - wordpress pod resources params (default: requests.cpu: 100m, requests.memory:
      128Mi)   - apps[PROJECT].components[NAME].wordpress.commonLabels - wordpress
      pod common labels (default: commonLabels.tech_stack: php, commonLabels.application:
      wordpress)   - apps[PROJECT].components[NAME].wordpress.wordpressTablePrefix
      - wordpress DB tables prefix (default: wp_)   - apps[PROJECT].components[NAME].wordpress.existingSecret
      - name of existing in kubernetes secret with wp admin auth info (default: "<project_name>-<component_name>-<env>",     i.e.
      "taco-wordpress-dev")   - apps[PROJECT].components[NAME].wordpress.updateStrategy
      - strategy that should be used for wordpress pod update (default: updateStrategy.type:
      RollingUpdate,     updateStrategy.rollingUpdate.maxSurge: 0%, updateStrategy.rollingUpdate.maxUnavailable:
      100%, i.e. stop old pod and then create a new one)   - apps[PROJECT].components[NAME].wordpress.smtp.host
      - SMTP host for sending emails (default: mailhog.mailhog.svc.cluster.local)   -
      apps[PROJECT].components[NAME].wordpress.smtp.port - SMTP port for sending emails
      (default: 1025)   - apps[PROJECT].components[NAME].wordpress.smtp.user - SMTP
      user for sending emails (default: <project_name>, i.e. taco)   - apps[PROJECT].components[NAME].wordpress.smtp.password
      - SMTP password for sending emails (default: anypassword)   - apps[PROJECT].components[NAME].wordpress.nodeSelector
      - wordpress pod node selector params (default: nodeSelector.tech_stack: php,
      nodeSelector.pvc: "true")   - apps[PROJECT].components[NAME].wordpress.podSecurityContext
      - wordpress pod''s security context params (default: podSecurityContext.enabled:
      true, podSecurityContext.fsGroup: 1000)   - apps[PROJECT].components[NAME].wordpress.containerSecurityContext
      - wordpress pod container''s security context params (default: containerSecurityContext.enabled:
      true,     containerSecurityContext.runAsUser: 1000)   - apps[PROJECT].components[NAME].wordpress.ci
      - boolean flag which defines whether wordpress project has ci/cd or not (default:
      true)   - apps[PROJECT].components[NAME].wordpress.extraInitContainers - extra
      ci/cd init containers if needed, enabled only if wordpress component has `ci`
      flag enabled (default: null)   - apps[PROJECT].components[NAME].wordpress.extraVolumesSshKeySecret
      - name of a secret with wordpress repository SSH url (default: "<project_name>-<component_name>-deploy-key",     i.e.
      "taco-wordpress-deploy-key")   - apps[PROJECT].components[NAME].wordpress.extraVolumes
      - extra volumes that might be needed to wordpress pod (default: null)   - apps[PROJECT].components[NAME].wordpress.ingress.hostname
      - wordpress ingress hostname (default: "<project_name>.saritasa.rocks", i.e.
      "taco.saritasa.rocks")   - apps[PROJECT].components[NAME].wordpress.ingress.annotations
      - wordpress ingress annotations (default: kubernetes.io/ingress.class: "nginx",
      cert-manager.io/cluster-issuer: "letsencrypt-prod",     nginx.ingress.kubernetes.io/proxy-body-size:
      100m, nginx.ingress.kubernetes.io/proxy-connect-timeout: "300", nginx.ingress.kubernetes.io/proxy-next-upstream-timeout:
      "300",     nginx.ingress.kubernetes.io/auth-type: basic, nginx.ingress.kubernetes.io/auth-secret:
      <ingress.authSecret>, nginx.ingress.kubernetes.io/auth-realm: "Authentication
      Required",     nginx.ingress.kubernetes.io/server-snippet: |-,   add_header
      X-Robots-Tag "noindex, nofollow, nosnippet, noarchive")   - apps[PROJECT].components[NAME].wordpress.ingress.authSecret
      - name of kubernetes secret that should be used in ingress for basic auth (default:
      "<project_name>-<compinent_name>-<env>-basic-auth",     i.e. "taco-wordpress-dev-basic-auth")   -
      apps[PROJECT].components[NAME].wordpress.ingress.extraHosts - list of extra
      hosts that may be defined in ingress (default: null)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.host
      - wordpress DB host (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.user
      - wordpress DB user (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.existingSecret
      - name of existing in kubernetes secret with DB user password (required)   -
      apps[PROJECT].components[NAME].wordpress.externalDatabase.database - wordpress
      DB name (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.port
      - wordpress DB port (default: 3306)   - apps[PROJECT].components[NAME].wordpress.wordpressExtraConfigContent
      - wordpress extra configs if needed (default: null)   - apps[PROJECT].components[NAME].wordpress.extraEnvVars
      - wordpress extra env vars if needed (default: null)    Example of values with
      extra `eventlistener` and `extraBuildConfigParams` in component:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           gitBranchPrefixes:             -
      staging           storageClassName: gp2           aws:             region: "us-west-2"             dns:
      staging.site.com           defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com           argocd:             server:
      deploy.staging.site.com           eventlistener:             enableWebhookSecret:
      true           apps:             - project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: prod               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.site.com/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack                   applicationURL: https://api.site.com                   eventlistener:                     template:
      buildpack-backend-build-pipeline-trigger-template                   extraBuildConfigParams:
      # what additional K/V pairs you want to add into the build-pipeline-config configmap                     KEY:
      value                   triggerBinding:                     - name: docker_registry_repository                       value:
      XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/backend                     - name:
      buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/runner:v1                 -
      name: frontend                   repository: xxx-frontend                   pipeline:
      buildpack                   applicationURL: https://site.com                   eventlistener:                     enableWebhookSecret:
      false                     filter: (body.ref.startsWith(''refs/heads/develop'')
      || body.ref.startsWith(''refs/heads/release/''))                     template:
      buildpack-frontend-build-pipeline-trigger-template                     extraOverlays:
      []                     # - key: truncated_sha                     #   expression:
      "body.head_commit.id.truncate(7)"                     eventTypes: ["pull_request",
      "push"]                   extraBuildConfigParams: {}                   triggerBinding:                     -
      name: docker_registry_repository                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/frontend                     -
      name: buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web            # make
      sure PVCs are bound after the chart is synced           # by temporarily mount
      them into short-live job.           runPostInstallMountPvcJob: false        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true    ```    Example of
      old application from `saritasa-clients` repo, which has no separate `kubernetes`
      repository. Here we replace `apps[PROJECT].kubernetesRepository` block with   `apps[PROJECT].argocd.sourceRepos`
      and `apps[PROJECT].components[NAME].argocd` block, also it is required to set
      `apps[PROJECT].components[NAME].tektonKubernetesRepoDeployKeyName`   in such
      a case to use correct secret with deploy key as far as there is no kubernetes
      repo that is used by default.    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      git@github.com:saritasa-nest/xxx-backend.git                   - git@github.com:saritasa-nest/xxx-frontend.git               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: backend                   repository:
      xxx-backend                   pipeline: buildpack-django-build-pipeline                   applicationURL:
      https://api.xxx.site.url                   argocd:                     source:                       path:
      .kubernetes/manifests/dev                       repoUrl: git@github.com:saritasa-nest/xxx-backend.git                       targetRevision:
      develop                   eventlistener:                     template: buildpack-django-build-pipeline-trigger-template                   tektonKubernetesRepoDeployKeyName:
      xxx-backend-deploy-key                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1                 -
      name: frontend                   repository: xxx-frontend                   pipeline:
      buildpack-frontend-build-pipeline                   applicationURL: https://xxx.site.url                   argocd:                     source:                       path:
      .kubernetes/manifests/dev                       repoUrl: git@github.com:saritasa-nest/xxx-frontend.git                       targetRevision:
      develop                   eventlistener:                     template: buildpack-frontend-build-pipeline-trigger-template                   tektonKubernetesRepoDeployKeyName:
      xxx-frontend-deploy-key                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/frontend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Example with
      creating an ArgoCD project and application with its custom `environment` (case
      when in common `staging` environment we need to create for some reason project
      with   `dev` environment). Here is added an extra `apps[PROJECT].environment`
      param, which overrides default `environment` in helm values for this project,
      and   `apps[PROJECT].components[NAME].eventlistener.gitWebhookBranches` param,
      which defines that ci/cd should be trigger on push to `develop` branch.    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack-django-build-pipeline                   applicationURL: https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Also there might
      a situation that you would like to provision custom utility ArgoCD Application
      in argo-cd from project''s kubernetes repo (for example VP project provisions   like
      this `jitsi` application). To reach this you might need to add an extra destination
      namespace to ArgoCD Project, you should use   `apps[PROJECT].argocd.extraDestinationNamespaces[]`
      param for that like in below example.    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev                 extraDestinationNamespaces:                   -
      argo-cd               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack-django-build-pipeline                   applicationURL: https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    If you want
      to enable ignoring deployment replicas count differences in ArgoCD application
      of your component add `apps[PROJECT].components[NAME].argocd.ignoreDeploymentReplicasDiff:
      true` flag like in the below example (it may be needed for `staging` and `prod`
      envs, where you have horizontal pod autoscheduling - HPA):    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev                 extraDestinationNamespaces:                   -
      argo-cd               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   argocd:                     ignoreDeploymentReplicasDiff:
      true                   pipeline: buildpack-django-build-pipeline                   applicationURL:
      https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Simple wordpress
      application example filled by default:    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: wordpress                   repository:
      xxx-wordpress                   pipeline: wordpress-build-pipeline                   applicationURL:
      https://xxx.site.url                   wordpress:                     repository_ssh_url:
      git@github.com:saritasa-nest/xxx-wordpress.git                     externalDatabase:                       host:
      xxx.xxx.us-west-2.rds.amazonaws.com                       user: xxx-wordpress-user-dev                       existingSecret:
      xxx-wordpress-dev-externaldb                       database: xxx-wordpress-dev                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Simple wordpress
      application example filled by default, but without ci/cd:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: wordpress                   repository:
      xxx-wordpress                   pipeline: wordpress-build-pipeline                   applicationURL:
      https://xxx.site.url                   wordpress:                     ci: false                     externalDatabase:                       host:
      xxx.xxx.us-west-2.rds.amazonaws.com                       user: xxx-wordpress-user-dev                       existingSecret:
      xxx-wordpress-dev-externaldb                       database: xxx-wordpress-dev                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    More difficult
      example of project containing `wordpress` and `frontend` component. Also defined
      for example all extra wordpress params that could be set:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami                   - git@github.com:saritasa-nest/xxx-kubernetes-aws.git               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: wordpress                   repository: xxx-wordpress                   pipeline:
      wordpress-build-pipeline                   applicationURL: https://xxx.site.url                   wordpress:                     imageTag:
      "5.8.1"                     repository_ssh_url: "git@github.com:saritasa-nest/xxx-wordpress.git"                     resources:                       requests:                         memory:
      512Mi                         cpu: 100m                     commonLabels:                       tech_stack:
      php                       application: wordpress                     wordpressTablePrefix:
      "qbf_"                     existingSecret: xxx-wordpress                     updateStrategy:                       type:
      RollingUpdate                       rollingUpdate:                         maxSurge:
      25%                         maxUnavailable: 25%                     smtp:                       host:
      mysmtp.site.url                       port: 1010                       user:
      myuser                       password: mypassword                     nodeSelector:                       tech_stack:
      php                       pvc: "true"                     podSecurityContext:                       enabled:
      true                       fsGroup: 1001                     containerSecurityContext:                       enabled:
      true                       runAsUser: 1001                     ci: true                     extraInitContainers:                       -
      name: build-frontend                         image: node:14                         imagePullPolicy:
      Always                         command:                           - bash                           -
      -c                           - |                             git -c core.sshCommand="ssh
      -i ~/.ssh/id_rsa" clone git@github.com:saritasa-nest/xxx.git -b develop ~/xxx                             cd
      ~/xxx                             npm install                             npm
      run build:embedded-questionnaire                             cp -Rf $(pwd)/dist/*
      /bitnami/wordpress/wp-content/                             echo "Copied built
      files into /bitnami/wordpress/wp-content/"                             ls -la
      /bitnami/wordpress/wp-content/                             echo "Done BUILD
      FRONTEND"                         volumeMounts:                         - mountPath:
      /bitnami/wordpress                           name: wordpress-data                           subPath:
      wordpress                         - mountPath: /home/node/.ssh/id_rsa                           name:
      xxx-ssh-key                           subPath: ssh-privatekey                         -
      mountPath: /home/node/.ssh/known_hosts                           name: github-known-hosts                           subPath:
      config.ssh                         securityContext:                           runAsNonRoot:
      true                           runAsUser: 1000                           allowPrivilegeEscalation:
      false                     extraVolumesSshKeySecret: xxx-wordpress-deploy-key                     extraVolumes:                     -
      name: xxx-ssh-key                       secret:                         secretName:
      xxx-deploy-key                     ingress:                       hostname:
      test.xxx.site.url                       annotations:                         kubernetes.io/ingress.class:
      "nginx"                         cert-manager.io/cluster-issuer: "letsencrypt-prod"                         nginx.ingress.kubernetes.io/proxy-body-size:
      100m                         nginx.ingress.kubernetes.io/client-max-body-size:
      100m                         nginx.ingress.kubernetes.io/server-snippet: |-                           add_header
      X-Robots-Tag "noindex, nofollow, nosnippet, noarchive";                         nginx.ingress.kubernetes.io/whitelist-source-range:
      |                           35.85.92.224/32,                           100.21.244.185/32                       extraHosts:                         -
      name: test.xxx.site.url                           path: /wp-admin                     externalDatabase:                       host:
      "xxx.xxx.us-west-2.rds.amazonaws.com"                       user: "xxx-wp-user-dev"                       existingSecret:
      "xxx-wordpress-dev-externaldb"                       database: "xxx-wp-dev"                     wordpressExtraConfigContent:
      |                       @ini_set(''WP_MEMORY_LIMIT'', ''512M'');                       @ini_set(''ALLOW_UNFILTERED_UPLOADS'',
      true);                     extraEnvVars:                       KEY: VALUE                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template                  - name: frontend                   repository:
      xxx-frontend                   pipeline: buildpack-frontend-build-pipeline                   applicationURL:
      https://app.xxx.site.url                   eventlistener:                     template:
      buildpack-frontend-build-pipeline-trigger-template                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/frontend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ``` '
    digest: dc11821cb1e21515b72ff72c7d30740f909db35aa9a0d106fc95d7bde897d931
    maintainers:
    - email: nospam@saritasa.com
      name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-apps
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-apps-0.1.23-dev/saritasa-tekton-apps-0.1.23-dev.tgz
    version: 0.1.23-dev
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2022-09-21T07:37:00.647771124Z"
    description: 'A Helm chart for tekton apps (rbac, eventlistener)  Implements:
      - dynamic records for eventlistener - PVCs - RBAC - configmaps for each app
      - triggerbindings for each app - kubernetes job to make sure the PVCs are bound
      and argocd marks the app as healthy - argocd project for each app - argocd application
      for each app component  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then declare dynamic list of projects (and associated components of that
      project like backend, api, frontend, etc) that would be dynamically added into
      the tekton''s eventlistener manifest.  Each component should be a separate git
      repository.  ```yaml --- apiVersion: argoproj.io/v1alpha1 kind: Application
      metadata:   name: tekton-apps   namespace: argo-cd   finalizers:   - resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "41" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-apps     helm:       values: |         environment: staging         gitBranchPrefixes:           -
      staging         storageClassName: gp3         nodeSelector:           ops: ''true''         aws:           region:
      "us-west-2"           dns: staging.site.com         defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com         argocd:           server:
      deploy.staging.site.com         eventlistener:           enableWebhookSecret:
      true         apps:           - project: vp             enabled: true             argocd:               labels:                 created-by:
      xxx                 ops-main: xxx                 ops-secondary: xxx                 pm:
      xxx                 tm: xxx               namespace: prod             mailList:
      vp@site.com             devopsMailList: devops+vp@site.com             jiraURL:
      https://site.atlassian.net/browse/vp             tektonURL: https://tekton.staging.site.com/#/namespaces/ci/pipelineruns             slack:
      client-vp-ci             kubernetesRepository:               name: vp-kubernetes-aws               branch:
      main               url: git@github.com:org-name/vp-kubernetes-aws.git              components:               -
      name: backend                 repository: vp-backend                 pipeline:
      buildpack-django-build-pipeline                 applicationURL: https://api.staging.site.com                 eventlistener:                   template:
      buildpack-django-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/backend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/builder:v1                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/runner:v1               -
      name: frontend                 repository: vp-frontend                 pipeline:
      buildpack-frontend-build-pipeline                 applicationURL: https://staging.site.com                 eventlistener:                   template:
      buildpack-frontend-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/frontend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/builder:full                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/runner:full                   -
      name: source_subpath                     value: dist/web          # make sure
      PVCs are bound after the chart is synced         # by temporarily mount them
      into short-live job.         runPostInstallMountPvcJob: false      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.16"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true    ```    Above helm chart creates a new ArgoCD project
      for each project in values, for each component in project''s components there
      is created a separate ArgoCD   application and required for Tekton ci/cd resources
      (triggerbindings, roles, configmaps, jobs, serviceaccounts, pvcs and etc).    #
      fill below parameters for each `project` block    - apps[PROJECT].environment
      - possbility to define custom project''s environment, needed for cases when
      need to deploy `dev` and `prod` envs to the same cluster. For example `xxx`
      dev     and prod both deployed in rocks EKS (not required)   - apps[PROJECT].enabled
      - boolean value to define whether the project enabled or not (required)   -
      apps[PROJECT].argocd.labels - labels which are added to ArgoCD project (required)   -
      apps[PROJECT].argocd.namespace - allowed for ArgoCD project namespace (required)   -
      apps[PROJECT].argocd.syncWave - ArgoCD project sync wave, i.e. sequence in which
      project should be synced (not required, default: "200")   - apps[PROJECT].argocd.sourceRepos[]
      - source repositories added to ArgoCD project (not required, default: [<apps[PROJECT].kubernetesRepository.url>])   -
      apps[PROJECT].argocd.extraDestinationNamespaces[] - adds extra destination namespaces
      for ArgoCD project to be able to create custom apps within project''s kubernetes
      repo (not required, default: null)   - apps[PROJECT].mailList - project''s team
      email address (required)   - apps[PROJECT].devopsMailList - project''s devops
      team email address (required)   - apps[PROJECT].jiraURL - project''s JIRA url
      (required)   - apps[PROJECT].tektonURL - link to Tekton pipelineruns used in
      Tekton ConfigMap as `TEKTON_URL` during Slack notification send (required)   -
      apps[PROJECT].slack - project''s Slack channel name (required)   - apps[PROJECT].kubernetesRepository.name
      - project''s kubernetes repository name used in ArgoCD application and Tekton
      TriggerBinding (may be absent and replaced with     `apps[PROJECT].components[NAME].argocd`
      and `apps[PROJECT].argocd.sourceRepos[]` blocks in case if project has no kubernetes
      repo)   - apps[PROJECT].kubernetesRepository.branch - project''s kubernetes
      repository branch used in ArgoCD application and Tekton TriggerBinding (may
      be absent and replaced     with `apps[PROJECT].components[NAME].argocd` and
      `apps[PROJECT].argocd.sourceRepos[]` blocks in case if project has no kubernetes
      repo)   - apps[PROJECT].kubernetesRepository.url - project''s kubernetes repository
      url used in ArgoCD application and Tekton TriggerBinding (may be absent and
      replaced with     `apps[PROJECT].components[NAME].argocd` and `apps[PROJECT].argocd.sourceRepos[]`
      blocks in case if project has no kubernetes repo)    Basically we have 2 different
      types of ci/cd - basic (buildpacks, kaniko) and wordpress ones. So depending
      on project''s component type you will need to fill different parameters.    #
      fill below parameters for each `component` block    - apps[PROJECT].components[NAME].repository
      - the name of the repository containing the code (may be absent in case of wordpress
      application without deployment, i.e. bolrdswp, taco,     saritasa-wordpress-demo)   -
      apps[PROJECT].components[NAME].pipeline - the name of the pipeline building
      the code from the repository above   - apps[PROJECT].components[NAME].argocd.source.syncWave
      - custom component ArgoCD application sync wave (default: "210")   - apps[PROJECT].components[NAME].argocd.source.path
      - path to directory responsible for kubernetes resources creation of the ArgoCD
      Application (default: kubernetes repo path for basic     projects "apps/<apps[PROJECT].components[NAME].name>/manifests/<environment>"
      or "null" for wordpress projects)   - apps[PROJECT].components[NAME].argocd.source.repoUrl
      - url of repository which should be used for ArgoCD Application (default: kubernetes
      repo for basic projects     "<apps[PROJECT].kubernetesRepository.url>" or `https://charts.bitnami.com/bitnami`
      for wordpress projects)   - apps[PROJECT].components[NAME].argocd.source.targetRevision
      - tag or branch in the repository for ArgoCD Application (default: kubernetes
      branch for basic projects     "<apps[PROJECT].kubernetesRepository.branch>"
      or "11.0.14" for wordpress projects)   - apps[PROJECT].components[NAME].argocd.ignoreDeploymentReplicasDiff
      - flag whether this exact ArgoCD application should ignore `Replicas` count
      differences for deployments. It may be needed for `staging` and `prod` environments
      which use HPA (default: false)   - apps[PROJECT].components[NAME].applicationURL
      - url that should be used in tekton build ConfigMap `APPLICATION_URL` param   -
      apps[PROJECT].components[NAME].tektonKubernetesRepoDeployKeyName - name of existing
      in kubernetes cluster secret with SSH key to kubernetes repository, used in
      `kustomize` deployment     step (i.e. addon-backend-deploy-key). This param
      sets by default to `<project>-kubernetes-aws-deploy-key` if project has `kubernetesRepository`
      param in values (actual only for basic     components, not wordpress)   - apps[PROJECT].components[NAME].eventlistener.template
      - the name of the trigger template for the component to be used   - apps[PROJECT].components[NAME].eventlistener.enableWebhookSecret
      - should you enable the git web hook for this particular app/component in the
      eventlistener configuration   - apps[PROJECT].components[NAME].eventlistener.filter
      - custom filter for the component of the eventlistener   - apps[PROJECT].components[NAME].eventlistener.extraOverlays
      - extra overlays to be added into the eventlistener for the component   - apps[PROJECT].components[NAME].eventlistener.eventTypes
      - github event types to trigger the ci/cd   - apps[PROJECT].components[NAME].eventlistener.gitWebhookBranches[]
      - list of branches, push to which triggers ci/cd   - apps[PROJECT].components[NAME].extraBuildConfigParams
      - additional key/values to be added into `build-pipeline-config configmap` ConfigMap
      associated with the app   - apps[PROJECT].components[NAME].triggerBinding -
      values to be added into the TriggerBinding manifest except default ones    What
      is important to know is that any key defined in apps[PROJECT].components[NAME].triggerBinding
      would be added as is   into the generated triggerbinding associated with your
      app. However the chart renders some default values based on the values   in
      this values.yaml file:      - application, project, environment, docker_registry,
      kubernetes_repository_ssh_url, kubernetes_branch, kubernetes_repository_kustomize_path,
      source_subpath (for basic components)     - application, project, environment,
      namespace (for wordpress components)     # fill below parameters block only
      for `wordpress` components    - apps[PROJECT].components[NAME].wordpress.imageTag
      - tag of the wordpress image (default: "5.7.2")   - apps[PROJECT].components[NAME].wordpress.repository_ssh_url
      - project''s wordpress repository SSH url (default: null, may be absent if project
      has no wordpress repo)   - apps[PROJECT].components[NAME].wordpress.resources
      - wordpress pod resources params (default: requests.cpu: 100m, requests.memory:
      128Mi)   - apps[PROJECT].components[NAME].wordpress.commonLabels - wordpress
      pod common labels (default: commonLabels.tech_stack: php, commonLabels.application:
      wordpress)   - apps[PROJECT].components[NAME].wordpress.wordpressTablePrefix
      - wordpress DB tables prefix (default: wp_)   - apps[PROJECT].components[NAME].wordpress.existingSecret
      - name of existing in kubernetes secret with wp admin auth info (default: "<project_name>-<component_name>-<env>",     i.e.
      "taco-wordpress-dev")   - apps[PROJECT].components[NAME].wordpress.updateStrategy
      - strategy that should be used for wordpress pod update (default: updateStrategy.type:
      RollingUpdate,     updateStrategy.rollingUpdate.maxSurge: 0%, updateStrategy.rollingUpdate.maxUnavailable:
      100%, i.e. stop old pod and then create a new one)   - apps[PROJECT].components[NAME].wordpress.smtp.host
      - SMTP host for sending emails (default: mailhog.mailhog.svc.cluster.local)   -
      apps[PROJECT].components[NAME].wordpress.smtp.port - SMTP port for sending emails
      (default: 1025)   - apps[PROJECT].components[NAME].wordpress.smtp.user - SMTP
      user for sending emails (default: <project_name>, i.e. taco)   - apps[PROJECT].components[NAME].wordpress.smtp.password
      - SMTP password for sending emails (default: anypassword)   - apps[PROJECT].components[NAME].wordpress.nodeSelector
      - wordpress pod node selector params (default: nodeSelector.tech_stack: php,
      nodeSelector.pvc: "true")   - apps[PROJECT].components[NAME].wordpress.podSecurityContext
      - wordpress pod''s security context params (default: podSecurityContext.enabled:
      true, podSecurityContext.fsGroup: 1000)   - apps[PROJECT].components[NAME].wordpress.containerSecurityContext
      - wordpress pod container''s security context params (default: containerSecurityContext.enabled:
      true,     containerSecurityContext.runAsUser: 1000)   - apps[PROJECT].components[NAME].wordpress.ci
      - boolean flag which defines whether wordpress project has ci/cd or not (default:
      true)   - apps[PROJECT].components[NAME].wordpress.extraInitContainers - extra
      ci/cd init containers if needed, enabled only if wordpress component has `ci`
      flag enabled (default: null)   - apps[PROJECT].components[NAME].wordpress.extraVolumesSshKeySecret
      - name of a secret with wordpress repository SSH url (default: "<project_name>-<component_name>-deploy-key",     i.e.
      "taco-wordpress-deploy-key")   - apps[PROJECT].components[NAME].wordpress.extraVolumes
      - extra volumes that might be needed to wordpress pod (default: null)   - apps[PROJECT].components[NAME].wordpress.ingress.hostname
      - wordpress ingress hostname (default: "<project_name>.saritasa.rocks", i.e.
      "taco.saritasa.rocks")   - apps[PROJECT].components[NAME].wordpress.ingress.annotations
      - wordpress ingress annotations (default: kubernetes.io/ingress.class: "nginx",
      cert-manager.io/cluster-issuer: "letsencrypt-prod",     nginx.ingress.kubernetes.io/proxy-body-size:
      100m, nginx.ingress.kubernetes.io/proxy-connect-timeout: "300", nginx.ingress.kubernetes.io/proxy-next-upstream-timeout:
      "300",     nginx.ingress.kubernetes.io/auth-type: basic, nginx.ingress.kubernetes.io/auth-secret:
      <ingress.authSecret>, nginx.ingress.kubernetes.io/auth-realm: "Authentication
      Required",     nginx.ingress.kubernetes.io/server-snippet: |-,   add_header
      X-Robots-Tag "noindex, nofollow, nosnippet, noarchive")   - apps[PROJECT].components[NAME].wordpress.ingress.authSecret
      - name of kubernetes secret that should be used in ingress for basic auth (default:
      "<project_name>-<compinent_name>-<env>-basic-auth",     i.e. "taco-wordpress-dev-basic-auth")   -
      apps[PROJECT].components[NAME].wordpress.ingress.extraHosts - list of extra
      hosts that may be defined in ingress (default: null)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.host
      - wordpress DB host (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.user
      - wordpress DB user (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.existingSecret
      - name of existing in kubernetes secret with DB user password (required)   -
      apps[PROJECT].components[NAME].wordpress.externalDatabase.database - wordpress
      DB name (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.port
      - wordpress DB port (default: 3306)   - apps[PROJECT].components[NAME].wordpress.wordpressExtraConfigContent
      - wordpress extra configs if needed (default: null)   - apps[PROJECT].components[NAME].wordpress.extraEnvVars
      - wordpress extra env vars if needed (default: null)    Example of values with
      extra `eventlistener` and `extraBuildConfigParams` in component:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           gitBranchPrefixes:             -
      staging           storageClassName: gp2           aws:             region: "us-west-2"             dns:
      staging.site.com           defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com           argocd:             server:
      deploy.staging.site.com           eventlistener:             enableWebhookSecret:
      true           apps:             - project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: prod               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.site.com/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack                   applicationURL: https://api.site.com                   eventlistener:                     template:
      buildpack-backend-build-pipeline-trigger-template                   extraBuildConfigParams:
      # what additional K/V pairs you want to add into the build-pipeline-config configmap                     KEY:
      value                   triggerBinding:                     - name: docker_registry_repository                       value:
      XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/backend                     - name:
      buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/runner:v1                 -
      name: frontend                   repository: xxx-frontend                   pipeline:
      buildpack                   applicationURL: https://site.com                   eventlistener:                     enableWebhookSecret:
      false                     filter: (body.ref.startsWith(''refs/heads/develop'')
      || body.ref.startsWith(''refs/heads/release/''))                     template:
      buildpack-frontend-build-pipeline-trigger-template                     extraOverlays:
      []                     # - key: truncated_sha                     #   expression:
      "body.head_commit.id.truncate(7)"                     eventTypes: ["pull_request",
      "push"]                   extraBuildConfigParams: {}                   triggerBinding:                     -
      name: docker_registry_repository                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/frontend                     -
      name: buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web            # make
      sure PVCs are bound after the chart is synced           # by temporarily mount
      them into short-live job.           runPostInstallMountPvcJob: false        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true    ```    Example of
      old application from `saritasa-clients` repo, which has no separate `kubernetes`
      repository. Here we replace `apps[PROJECT].kubernetesRepository` block with   `apps[PROJECT].argocd.sourceRepos`
      and `apps[PROJECT].components[NAME].argocd` block, also it is required to set
      `apps[PROJECT].components[NAME].tektonKubernetesRepoDeployKeyName`   in such
      a case to use correct secret with deploy key as far as there is no kubernetes
      repo that is used by default.    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      git@github.com:saritasa-nest/xxx-backend.git                   - git@github.com:saritasa-nest/xxx-frontend.git               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: backend                   repository:
      xxx-backend                   pipeline: buildpack-django-build-pipeline                   applicationURL:
      https://api.xxx.site.url                   argocd:                     source:                       path:
      .kubernetes/manifests/dev                       repoUrl: git@github.com:saritasa-nest/xxx-backend.git                       targetRevision:
      develop                   eventlistener:                     template: buildpack-django-build-pipeline-trigger-template                   tektonKubernetesRepoDeployKeyName:
      xxx-backend-deploy-key                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1                 -
      name: frontend                   repository: xxx-frontend                   pipeline:
      buildpack-frontend-build-pipeline                   applicationURL: https://xxx.site.url                   argocd:                     source:                       path:
      .kubernetes/manifests/dev                       repoUrl: git@github.com:saritasa-nest/xxx-frontend.git                       targetRevision:
      develop                   eventlistener:                     template: buildpack-frontend-build-pipeline-trigger-template                   tektonKubernetesRepoDeployKeyName:
      xxx-frontend-deploy-key                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/frontend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Example with
      creating an ArgoCD project and application with its custom `environment` (case
      when in common `staging` environment we need to create for some reason project
      with   `dev` environment). Here is added an extra `apps[PROJECT].environment`
      param, which overrides default `environment` in helm values for this project,
      and   `apps[PROJECT].components[NAME].eventlistener.gitWebhookBranches` param,
      which defines that ci/cd should be trigger on push to `develop` branch.    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack-django-build-pipeline                   applicationURL: https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Also there might
      a situation that you would like to provision custom utility ArgoCD Application
      in argo-cd from project''s kubernetes repo (for example VP project provisions   like
      this `jitsi` application). To reach this you might need to add an extra destination
      namespace to ArgoCD Project, you should use   `apps[PROJECT].argocd.extraDestinationNamespaces[]`
      param for that like in below example.    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev                 extraDestinationNamespaces:                   -
      argo-cd               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack-django-build-pipeline                   applicationURL: https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    If you want
      to enable ignoring deployment replicas count differences in ArgoCD application
      of your component add `apps[PROJECT].components[NAME].argocd.ignoreDeploymentReplicasDiff:
      true` flag like in the below example (it may be needed for `staging` and `prod`
      envs, where you have horizontal pod autoscheduling - HPA):    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev                 extraDestinationNamespaces:                   -
      argo-cd               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   argocd:                     ignoreDeploymentReplicasDiff:
      true                   pipeline: buildpack-django-build-pipeline                   applicationURL:
      https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Simple wordpress
      application example filled by default:    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: wordpress                   repository:
      xxx-wordpress                   pipeline: wordpress-build-pipeline                   applicationURL:
      https://xxx.site.url                   wordpress:                     repository_ssh_url:
      git@github.com:saritasa-nest/xxx-wordpress.git                     externalDatabase:                       host:
      xxx.xxx.us-west-2.rds.amazonaws.com                       user: xxx-wordpress-user-dev                       existingSecret:
      xxx-wordpress-dev-externaldb                       database: xxx-wordpress-dev                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Simple wordpress
      application example filled by default, but without ci/cd:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: wordpress                   repository:
      xxx-wordpress                   pipeline: wordpress-build-pipeline                   applicationURL:
      https://xxx.site.url                   wordpress:                     ci: false                     externalDatabase:                       host:
      xxx.xxx.us-west-2.rds.amazonaws.com                       user: xxx-wordpress-user-dev                       existingSecret:
      xxx-wordpress-dev-externaldb                       database: xxx-wordpress-dev                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    More difficult
      example of project containing `wordpress` and `frontend` component. Also defined
      for example all extra wordpress params that could be set:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami                   - git@github.com:saritasa-nest/xxx-kubernetes-aws.git               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: wordpress                   repository: xxx-wordpress                   pipeline:
      wordpress-build-pipeline                   applicationURL: https://xxx.site.url                   wordpress:                     imageTag:
      "5.8.1"                     repository_ssh_url: "git@github.com:saritasa-nest/xxx-wordpress.git"                     resources:                       requests:                         memory:
      512Mi                         cpu: 100m                     commonLabels:                       tech_stack:
      php                       application: wordpress                     wordpressTablePrefix:
      "qbf_"                     existingSecret: xxx-wordpress                     updateStrategy:                       type:
      RollingUpdate                       rollingUpdate:                         maxSurge:
      25%                         maxUnavailable: 25%                     smtp:                       host:
      mysmtp.site.url                       port: 1010                       user:
      myuser                       password: mypassword                     nodeSelector:                       tech_stack:
      php                       pvc: "true"                     podSecurityContext:                       enabled:
      true                       fsGroup: 1001                     containerSecurityContext:                       enabled:
      true                       runAsUser: 1001                     ci: true                     extraInitContainers:                       -
      name: build-frontend                         image: node:14                         imagePullPolicy:
      Always                         command:                           - bash                           -
      -c                           - |                             git -c core.sshCommand="ssh
      -i ~/.ssh/id_rsa" clone git@github.com:saritasa-nest/xxx.git -b develop ~/xxx                             cd
      ~/xxx                             npm install                             npm
      run build:embedded-questionnaire                             cp -Rf $(pwd)/dist/*
      /bitnami/wordpress/wp-content/                             echo "Copied built
      files into /bitnami/wordpress/wp-content/"                             ls -la
      /bitnami/wordpress/wp-content/                             echo "Done BUILD
      FRONTEND"                         volumeMounts:                         - mountPath:
      /bitnami/wordpress                           name: wordpress-data                           subPath:
      wordpress                         - mountPath: /home/node/.ssh/id_rsa                           name:
      xxx-ssh-key                           subPath: ssh-privatekey                         -
      mountPath: /home/node/.ssh/known_hosts                           name: github-known-hosts                           subPath:
      config.ssh                         securityContext:                           runAsNonRoot:
      true                           runAsUser: 1000                           allowPrivilegeEscalation:
      false                     extraVolumesSshKeySecret: xxx-wordpress-deploy-key                     extraVolumes:                     -
      name: xxx-ssh-key                       secret:                         secretName:
      xxx-deploy-key                     ingress:                       hostname:
      test.xxx.site.url                       annotations:                         kubernetes.io/ingress.class:
      "nginx"                         cert-manager.io/cluster-issuer: "letsencrypt-prod"                         nginx.ingress.kubernetes.io/proxy-body-size:
      100m                         nginx.ingress.kubernetes.io/client-max-body-size:
      100m                         nginx.ingress.kubernetes.io/server-snippet: |-                           add_header
      X-Robots-Tag "noindex, nofollow, nosnippet, noarchive";                         nginx.ingress.kubernetes.io/whitelist-source-range:
      |                           35.85.92.224/32,                           100.21.244.185/32                       extraHosts:                         -
      name: test.xxx.site.url                           path: /wp-admin                     externalDatabase:                       host:
      "xxx.xxx.us-west-2.rds.amazonaws.com"                       user: "xxx-wp-user-dev"                       existingSecret:
      "xxx-wordpress-dev-externaldb"                       database: "xxx-wp-dev"                     wordpressExtraConfigContent:
      |                       @ini_set(''WP_MEMORY_LIMIT'', ''512M'');                       @ini_set(''ALLOW_UNFILTERED_UPLOADS'',
      true);                     extraEnvVars:                       KEY: VALUE                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template                  - name: frontend                   repository:
      xxx-frontend                   pipeline: buildpack-frontend-build-pipeline                   applicationURL:
      https://app.xxx.site.url                   eventlistener:                     template:
      buildpack-frontend-build-pipeline-trigger-template                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/frontend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ``` '
    digest: 18ed373066b183600616f018b0003290d3ccaa54918feae40a14a330af38417e
    maintainers:
    - email: nospam@saritasa.com
      name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-apps
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-apps-0.1.23-dev/saritasa-tekton-apps-0.1.23-dev.tgz
    version: 0.1.23-dev
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2022-09-21T06:01:42.745493181Z"
    description: 'A Helm chart for tekton apps (rbac, eventlistener)  Implements:
      - dynamic records for eventlistener - PVCs - RBAC - configmaps for each app
      - triggerbindings for each app - kubernetes job to make sure the PVCs are bound
      and argocd marks the app as healthy - argocd project for each app - argocd application
      for each app component  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then declare dynamic list of projects (and associated components of that
      project like backend, api, frontend, etc) that would be dynamically added into
      the tekton''s eventlistener manifest.  Each component should be a separate git
      repository.  ```yaml --- apiVersion: argoproj.io/v1alpha1 kind: Application
      metadata:   name: tekton-apps   namespace: argo-cd   finalizers:   - resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "41" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-apps     helm:       values: |         environment: staging         gitBranchPrefixes:           -
      staging         storageClassName: gp3         nodeSelector:           ops: ''true''         aws:           region:
      "us-west-2"           dns: staging.site.com         defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com         argocd:           server:
      deploy.staging.site.com         eventlistener:           enableWebhookSecret:
      true         apps:           - project: vp             enabled: true             argocd:               labels:                 created-by:
      xxx                 ops-main: xxx                 ops-secondary: xxx                 pm:
      xxx                 tm: xxx               namespace: prod             mailList:
      vp@site.com             devopsMailList: devops+vp@site.com             jiraURL:
      https://site.atlassian.net/browse/vp             tektonURL: https://tekton.staging.site.com/#/namespaces/ci/pipelineruns             slack:
      client-vp-ci             kubernetesRepository:               name: vp-kubernetes-aws               branch:
      main               url: git@github.com:org-name/vp-kubernetes-aws.git              components:               -
      name: backend                 repository: vp-backend                 pipeline:
      buildpack-django-build-pipeline                 applicationURL: https://api.staging.site.com                 eventlistener:                   template:
      buildpack-django-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/backend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/builder:v1                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/runner:v1               -
      name: frontend                 repository: vp-frontend                 pipeline:
      buildpack-frontend-build-pipeline                 applicationURL: https://staging.site.com                 eventlistener:                   template:
      buildpack-frontend-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/frontend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/builder:full                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/runner:full                   -
      name: source_subpath                     value: dist/web          # make sure
      PVCs are bound after the chart is synced         # by temporarily mount them
      into short-live job.         runPostInstallMountPvcJob: false      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.16"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true    ```    Above helm chart creates a new ArgoCD project
      for each project in values, for each component in project''s components there
      is created a separate ArgoCD   application and required for Tekton ci/cd resources
      (triggerbindings, roles, configmaps, jobs, serviceaccounts, pvcs and etc).    #
      fill below parameters for each `project` block    - apps[PROJECT].environment
      - possbility to define custom project''s environment, needed for cases when
      need to deploy `dev` and `prod` envs to the same cluster. For example `xxx`
      dev     and prod both deployed in rocks EKS (not required)   - apps[PROJECT].enabled
      - boolean value to define whether the project enabled or not (required)   -
      apps[PROJECT].argocd.labels - labels which are added to ArgoCD project (required)   -
      apps[PROJECT].argocd.namespace - allowed for ArgoCD project namespace (required)   -
      apps[PROJECT].argocd.syncWave - ArgoCD project sync wave, i.e. sequence in which
      project should be synced (not required, default: "200")   - apps[PROJECT].argocd.sourceRepos[]
      - source repositories added to ArgoCD project (not required, default: [<apps[PROJECT].kubernetesRepository.url>])   -
      apps[PROJECT].argocd.extraDestinationNamespaces[] - adds extra destination namespaces
      for ArgoCD project to be able to create custom apps within project''s kubernetes
      repo (not required, default: null)   - apps[PROJECT].mailList - project''s team
      email address (required)   - apps[PROJECT].devopsMailList - project''s devops
      team email address (required)   - apps[PROJECT].jiraURL - project''s JIRA url
      (required)   - apps[PROJECT].tektonURL - link to Tekton pipelineruns used in
      Tekton ConfigMap as `TEKTON_URL` during Slack notification send (required)   -
      apps[PROJECT].slack - project''s Slack channel name (required)   - apps[PROJECT].kubernetesRepository.name
      - project''s kubernetes repository name used in ArgoCD application and Tekton
      TriggerBinding (may be absent and replaced with     `apps[PROJECT].components[NAME].argocd`
      and `apps[PROJECT].argocd.sourceRepos[]` blocks in case if project has no kubernetes
      repo)   - apps[PROJECT].kubernetesRepository.branch - project''s kubernetes
      repository branch used in ArgoCD application and Tekton TriggerBinding (may
      be absent and replaced     with `apps[PROJECT].components[NAME].argocd` and
      `apps[PROJECT].argocd.sourceRepos[]` blocks in case if project has no kubernetes
      repo)   - apps[PROJECT].kubernetesRepository.url - project''s kubernetes repository
      url used in ArgoCD application and Tekton TriggerBinding (may be absent and
      replaced with     `apps[PROJECT].components[NAME].argocd` and `apps[PROJECT].argocd.sourceRepos[]`
      blocks in case if project has no kubernetes repo)    Basically we have 2 different
      types of ci/cd - basic (buildpacks, kaniko) and wordpress ones. So depending
      on project''s component type you will need to fill different parameters.    #
      fill below parameters for each `component` block    - apps[PROJECT].components[NAME].repository
      - the name of the repository containing the code (may be absent in case of wordpress
      application without deployment, i.e. bolrdswp, taco,     saritasa-wordpress-demo)   -
      apps[PROJECT].components[NAME].pipeline - the name of the pipeline building
      the code from the repository above   - apps[PROJECT].components[NAME].argocd.source.syncWave
      - custom component ArgoCD application sync wave (default: "210")   - apps[PROJECT].components[NAME].argocd.source.path
      - path to directory responsible for kubernetes resources creation of the ArgoCD
      Application (default: kubernetes repo path for basic     projects "apps/<apps[PROJECT].components[NAME].name>/manifests/<environment>"
      or "null" for wordpress projects)   - apps[PROJECT].components[NAME].argocd.source.repoUrl
      - url of repository which should be used for ArgoCD Application (default: kubernetes
      repo for basic projects     "<apps[PROJECT].kubernetesRepository.url>" or `https://charts.bitnami.com/bitnami`
      for wordpress projects)   - apps[PROJECT].components[NAME].argocd.source.targetRevision
      - tag or branch in the repository for ArgoCD Application (default: kubernetes
      branch for basic projects     "<apps[PROJECT].kubernetesRepository.branch>"
      or "11.0.14" for wordpress projects)   - apps[PROJECT].components[NAME].argocd.ignoreDeploymentReplicasDiff
      - flag whether this exact ArgoCD application should ignore `Replicas` count
      differences for deployments. It may be needed for `staging` and `prod` environments
      which use HPA (default: false)   - apps[PROJECT].components[NAME].applicationURL
      - url that should be used in tekton build ConfigMap `APPLICATION_URL` param   -
      apps[PROJECT].components[NAME].tektonKubernetesRepoDeployKeyName - name of existing
      in kubernetes cluster secret with SSH key to kubernetes repository, used in
      `kustomize` deployment     step (i.e. addon-backend-deploy-key). This param
      sets by default to `<project>-kubernetes-aws-deploy-key` if project has `kubernetesRepository`
      param in values (actual only for basic     components, not wordpress)   - apps[PROJECT].components[NAME].eventlistener.template
      - the name of the trigger template for the component to be used   - apps[PROJECT].components[NAME].eventlistener.enableWebhookSecret
      - should you enable the git web hook for this particular app/component in the
      eventlistener configuration   - apps[PROJECT].components[NAME].eventlistener.filter
      - custom filter for the component of the eventlistener   - apps[PROJECT].components[NAME].eventlistener.extraOverlays
      - extra overlays to be added into the eventlistener for the component   - apps[PROJECT].components[NAME].eventlistener.eventTypes
      - github event types to trigger the ci/cd   - apps[PROJECT].components[NAME].eventlistener.gitWebhookBranches[]
      - list of branches, push to which triggers ci/cd   - apps[PROJECT].components[NAME].extraBuildConfigParams
      - additional key/values to be added into `build-pipeline-config configmap` ConfigMap
      associated with the app   - apps[PROJECT].components[NAME].triggerBinding -
      values to be added into the TriggerBinding manifest except default ones    What
      is important to know is that any key defined in apps[PROJECT].components[NAME].triggerBinding
      would be added as is   into the generated triggerbinding associated with your
      app. However the chart renders some default values based on the values   in
      this values.yaml file:      - application, project, environment, docker_registry,
      kubernetes_repository_ssh_url, kubernetes_branch, kubernetes_repository_kustomize_path,
      source_subpath (for basic components)     - application, project, environment,
      namespace (for wordpress components)     # fill below parameters block only
      for `wordpress` components    - apps[PROJECT].components[NAME].wordpress.imageTag
      - tag of the wordpress image (default: "5.7.2")   - apps[PROJECT].components[NAME].wordpress.repository_ssh_url
      - project''s wordpress repository SSH url (default: null, may be absent if project
      has no wordpress repo)   - apps[PROJECT].components[NAME].wordpress.resources
      - wordpress pod resources params (default: requests.cpu: 100m, requests.memory:
      128Mi)   - apps[PROJECT].components[NAME].wordpress.commonLabels - wordpress
      pod common labels (default: commonLabels.tech_stack: php, commonLabels.application:
      wordpress)   - apps[PROJECT].components[NAME].wordpress.wordpressTablePrefix
      - wordpress DB tables prefix (default: wp_)   - apps[PROJECT].components[NAME].wordpress.existingSecret
      - name of existing in kubernetes secret with wp admin auth info (default: "<project_name>-<component_name>-<env>",     i.e.
      "taco-wordpress-dev")   - apps[PROJECT].components[NAME].wordpress.updateStrategy
      - strategy that should be used for wordpress pod update (default: updateStrategy.type:
      RollingUpdate,     updateStrategy.rollingUpdate.maxSurge: 0%, updateStrategy.rollingUpdate.maxUnavailable:
      100%, i.e. stop old pod and then create a new one)   - apps[PROJECT].components[NAME].wordpress.smtp.host
      - SMTP host for sending emails (default: mailhog.mailhog.svc.cluster.local)   -
      apps[PROJECT].components[NAME].wordpress.smtp.port - SMTP port for sending emails
      (default: 1025)   - apps[PROJECT].components[NAME].wordpress.smtp.user - SMTP
      user for sending emails (default: <project_name>, i.e. taco)   - apps[PROJECT].components[NAME].wordpress.smtp.password
      - SMTP password for sending emails (default: anypassword)   - apps[PROJECT].components[NAME].wordpress.nodeSelector
      - wordpress pod node selector params (default: nodeSelector.tech_stack: php,
      nodeSelector.pvc: "true")   - apps[PROJECT].components[NAME].wordpress.podSecurityContext
      - wordpress pod''s security context params (default: podSecurityContext.enabled:
      true, podSecurityContext.fsGroup: 1000)   - apps[PROJECT].components[NAME].wordpress.containerSecurityContext
      - wordpress pod container''s security context params (default: containerSecurityContext.enabled:
      true,     containerSecurityContext.runAsUser: 1000)   - apps[PROJECT].components[NAME].wordpress.ci
      - boolean flag which defines whether wordpress project has ci/cd or not (default:
      true)   - apps[PROJECT].components[NAME].wordpress.extraInitContainers - extra
      ci/cd init containers if needed, enabled only if wordpress component has `ci`
      flag enabled (default: null)   - apps[PROJECT].components[NAME].wordpress.extraVolumesSshKeySecret
      - name of a secret with wordpress repository SSH url (default: "<project_name>-<component_name>-deploy-key",     i.e.
      "taco-wordpress-deploy-key")   - apps[PROJECT].components[NAME].wordpress.extraVolumes
      - extra volumes that might be needed to wordpress pod (default: null)   - apps[PROJECT].components[NAME].wordpress.ingress.hostname
      - wordpress ingress hostname (default: "<project_name>.saritasa.rocks", i.e.
      "taco.saritasa.rocks")   - apps[PROJECT].components[NAME].wordpress.ingress.annotations
      - wordpress ingress annotations (default: kubernetes.io/ingress.class: "nginx",
      cert-manager.io/cluster-issuer: "letsencrypt-prod",     nginx.ingress.kubernetes.io/proxy-body-size:
      100m, nginx.ingress.kubernetes.io/proxy-connect-timeout: "300", nginx.ingress.kubernetes.io/proxy-next-upstream-timeout:
      "300",     nginx.ingress.kubernetes.io/auth-type: basic, nginx.ingress.kubernetes.io/auth-secret:
      <ingress.authSecret>, nginx.ingress.kubernetes.io/auth-realm: "Authentication
      Required",     nginx.ingress.kubernetes.io/server-snippet: |-,   add_header
      X-Robots-Tag "noindex, nofollow, nosnippet, noarchive")   - apps[PROJECT].components[NAME].wordpress.ingress.authSecret
      - name of kubernetes secret that should be used in ingress for basic auth (default:
      "<project_name>-<compinent_name>-<env>-basic-auth",     i.e. "taco-wordpress-dev-basic-auth")   -
      apps[PROJECT].components[NAME].wordpress.ingress.extraHosts - list of extra
      hosts that may be defined in ingress (default: null)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.host
      - wordpress DB host (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.user
      - wordpress DB user (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.existingSecret
      - name of existing in kubernetes secret with DB user password (required)   -
      apps[PROJECT].components[NAME].wordpress.externalDatabase.database - wordpress
      DB name (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.port
      - wordpress DB port (default: 3306)   - apps[PROJECT].components[NAME].wordpress.wordpressExtraConfigContent
      - wordpress extra configs if needed (default: null)   - apps[PROJECT].components[NAME].wordpress.extraEnvVars
      - wordpress extra env vars if needed (default: null)    Example of values with
      extra `eventlistener` and `extraBuildConfigParams` in component:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           gitBranchPrefixes:             -
      staging           storageClassName: gp2           aws:             region: "us-west-2"             dns:
      staging.site.com           defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com           argocd:             server:
      deploy.staging.site.com           eventlistener:             enableWebhookSecret:
      true           apps:             - project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: prod               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.site.com/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack                   applicationURL: https://api.site.com                   eventlistener:                     template:
      buildpack-backend-build-pipeline-trigger-template                   extraBuildConfigParams:
      # what additional K/V pairs you want to add into the build-pipeline-config configmap                     KEY:
      value                   triggerBinding:                     - name: docker_registry_repository                       value:
      XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/backend                     - name:
      buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/runner:v1                 -
      name: frontend                   repository: xxx-frontend                   pipeline:
      buildpack                   applicationURL: https://site.com                   eventlistener:                     enableWebhookSecret:
      false                     filter: (body.ref.startsWith(''refs/heads/develop'')
      || body.ref.startsWith(''refs/heads/release/''))                     template:
      buildpack-frontend-build-pipeline-trigger-template                     extraOverlays:
      []                     # - key: truncated_sha                     #   expression:
      "body.head_commit.id.truncate(7)"                     eventTypes: ["pull_request",
      "push"]                   extraBuildConfigParams: {}                   triggerBinding:                     -
      name: docker_registry_repository                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/frontend                     -
      name: buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web            # make
      sure PVCs are bound after the chart is synced           # by temporarily mount
      them into short-live job.           runPostInstallMountPvcJob: false        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true    ```    Example of
      old application from `saritasa-clients` repo, which has no separate `kubernetes`
      repository. Here we replace `apps[PROJECT].kubernetesRepository` block with   `apps[PROJECT].argocd.sourceRepos`
      and `apps[PROJECT].components[NAME].argocd` block, also it is required to set
      `apps[PROJECT].components[NAME].tektonKubernetesRepoDeployKeyName`   in such
      a case to use correct secret with deploy key as far as there is no kubernetes
      repo that is used by default.    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      git@github.com:saritasa-nest/xxx-backend.git                   - git@github.com:saritasa-nest/xxx-frontend.git               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: backend                   repository:
      xxx-backend                   pipeline: buildpack-django-build-pipeline                   applicationURL:
      https://api.xxx.site.url                   argocd:                     source:                       path:
      .kubernetes/manifests/dev                       repoUrl: git@github.com:saritasa-nest/xxx-backend.git                       targetRevision:
      develop                   eventlistener:                     template: buildpack-django-build-pipeline-trigger-template                   tektonKubernetesRepoDeployKeyName:
      xxx-backend-deploy-key                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1                 -
      name: frontend                   repository: xxx-frontend                   pipeline:
      buildpack-frontend-build-pipeline                   applicationURL: https://xxx.site.url                   argocd:                     source:                       path:
      .kubernetes/manifests/dev                       repoUrl: git@github.com:saritasa-nest/xxx-frontend.git                       targetRevision:
      develop                   eventlistener:                     template: buildpack-frontend-build-pipeline-trigger-template                   tektonKubernetesRepoDeployKeyName:
      xxx-frontend-deploy-key                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/frontend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Example with
      creating an ArgoCD project and application with its custom `environment` (case
      when in common `staging` environment we need to create for some reason project
      with   `dev` environment). Here is added an extra `apps[PROJECT].environment`
      param, which overrides default `environment` in helm values for this project,
      and   `apps[PROJECT].components[NAME].eventlistener.gitWebhookBranches` param,
      which defines that ci/cd should be trigger on push to `develop` branch.    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack-django-build-pipeline                   applicationURL: https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Also there might
      a situation that you would like to provision custom utility ArgoCD Application
      in argo-cd from project''s kubernetes repo (for example VP project provisions   like
      this `jitsi` application). To reach this you might need to add an extra destination
      namespace to ArgoCD Project, you should use   `apps[PROJECT].argocd.extraDestinationNamespaces[]`
      param for that like in below example.    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev                 extraDestinationNamespaces:                   -
      argo-cd               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack-django-build-pipeline                   applicationURL: https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    If you want
      to enable ignoring deployment replicas count differences in ArgoCD application
      of your component add `apps[PROJECT].components[NAME].argocd.ignoreDeploymentReplicasDiff:
      true` flag like in the below example (it may be needed for `staging` and `prod`
      envs, where you have horizontal pod autoscheduling - HPA):    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev                 extraDestinationNamespaces:                   -
      argo-cd               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   argocd:                     ignoreDeploymentReplicasDiff:
      true                   pipeline: buildpack-django-build-pipeline                   applicationURL:
      https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Simple wordpress
      application example filled by default:    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: wordpress                   repository:
      xxx-wordpress                   pipeline: wordpress-build-pipeline                   applicationURL:
      https://xxx.site.url                   wordpress:                     repository_ssh_url:
      git@github.com:saritasa-nest/xxx-wordpress.git                     externalDatabase:                       host:
      xxx.xxx.us-west-2.rds.amazonaws.com                       user: xxx-wordpress-user-dev                       existingSecret:
      xxx-wordpress-dev-externaldb                       database: xxx-wordpress-dev                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Simple wordpress
      application example filled by default, but without ci/cd:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: wordpress                   repository:
      xxx-wordpress                   pipeline: wordpress-build-pipeline                   applicationURL:
      https://xxx.site.url                   wordpress:                     ci: false                     externalDatabase:                       host:
      xxx.xxx.us-west-2.rds.amazonaws.com                       user: xxx-wordpress-user-dev                       existingSecret:
      xxx-wordpress-dev-externaldb                       database: xxx-wordpress-dev                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    More difficult
      example of project containing `wordpress` and `frontend` component. Also defined
      for example all extra wordpress params that could be set:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami                   - git@github.com:saritasa-nest/xxx-kubernetes-aws.git               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: wordpress                   repository: xxx-wordpress                   pipeline:
      wordpress-build-pipeline                   applicationURL: https://xxx.site.url                   wordpress:                     imageTag:
      "5.8.1"                     repository_ssh_url: "git@github.com:saritasa-nest/xxx-wordpress.git"                     resources:                       requests:                         memory:
      512Mi                         cpu: 100m                     commonLabels:                       tech_stack:
      php                       application: wordpress                     wordpressTablePrefix:
      "qbf_"                     existingSecret: xxx-wordpress                     updateStrategy:                       type:
      RollingUpdate                       rollingUpdate:                         maxSurge:
      25%                         maxUnavailable: 25%                     smtp:                       host:
      mysmtp.site.url                       port: 1010                       user:
      myuser                       password: mypassword                     nodeSelector:                       tech_stack:
      php                       pvc: "true"                     podSecurityContext:                       enabled:
      true                       fsGroup: 1001                     containerSecurityContext:                       enabled:
      true                       runAsUser: 1001                     ci: true                     extraInitContainers:                       -
      name: build-frontend                         image: node:14                         imagePullPolicy:
      Always                         command:                           - bash                           -
      -c                           - |                             git -c core.sshCommand="ssh
      -i ~/.ssh/id_rsa" clone git@github.com:saritasa-nest/xxx.git -b develop ~/xxx                             cd
      ~/xxx                             npm install                             npm
      run build:embedded-questionnaire                             cp -Rf $(pwd)/dist/*
      /bitnami/wordpress/wp-content/                             echo "Copied built
      files into /bitnami/wordpress/wp-content/"                             ls -la
      /bitnami/wordpress/wp-content/                             echo "Done BUILD
      FRONTEND"                         volumeMounts:                         - mountPath:
      /bitnami/wordpress                           name: wordpress-data                           subPath:
      wordpress                         - mountPath: /home/node/.ssh/id_rsa                           name:
      xxx-ssh-key                           subPath: ssh-privatekey                         -
      mountPath: /home/node/.ssh/known_hosts                           name: github-known-hosts                           subPath:
      config.ssh                         securityContext:                           runAsNonRoot:
      true                           runAsUser: 1000                           allowPrivilegeEscalation:
      false                     extraVolumesSshKeySecret: xxx-wordpress-deploy-key                     extraVolumes:                     -
      name: xxx-ssh-key                       secret:                         secretName:
      xxx-deploy-key                     ingress:                       hostname:
      test.xxx.site.url                       annotations:                         kubernetes.io/ingress.class:
      "nginx"                         cert-manager.io/cluster-issuer: "letsencrypt-prod"                         nginx.ingress.kubernetes.io/proxy-body-size:
      100m                         nginx.ingress.kubernetes.io/client-max-body-size:
      100m                         nginx.ingress.kubernetes.io/server-snippet: |-                           add_header
      X-Robots-Tag "noindex, nofollow, nosnippet, noarchive";                         nginx.ingress.kubernetes.io/whitelist-source-range:
      |                           35.85.92.224/32,                           100.21.244.185/32                       extraHosts:                         -
      name: test.xxx.site.url                           path: /wp-admin                     externalDatabase:                       host:
      "xxx.xxx.us-west-2.rds.amazonaws.com"                       user: "xxx-wp-user-dev"                       existingSecret:
      "xxx-wordpress-dev-externaldb"                       database: "xxx-wp-dev"                     wordpressExtraConfigContent:
      |                       @ini_set(''WP_MEMORY_LIMIT'', ''512M'');                       @ini_set(''ALLOW_UNFILTERED_UPLOADS'',
      true);                     extraEnvVars:                       KEY: VALUE                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template                  - name: frontend                   repository:
      xxx-frontend                   pipeline: buildpack-frontend-build-pipeline                   applicationURL:
      https://app.xxx.site.url                   eventlistener:                     template:
      buildpack-frontend-build-pipeline-trigger-template                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/frontend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ``` '
    digest: a7bc8ba5140e7bdc5311bb839078cd254d92ca223d595b044d6e1afecb71edde
    maintainers:
    - email: nospam@saritasa.com
      name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-apps
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-apps-0.1.23-dev/saritasa-tekton-apps-0.1.23-dev.tgz
    version: 0.1.23-dev
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2022-09-21T07:49:11.861499342Z"
    description: 'A Helm chart for tekton apps (rbac, eventlistener)  Implements:
      - dynamic records for eventlistener - PVCs - RBAC - configmaps for each app
      - triggerbindings for each app - kubernetes job to make sure the PVCs are bound
      and argocd marks the app as healthy - argocd project for each app - argocd application
      for each app component  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then declare dynamic list of projects (and associated components of that
      project like backend, api, frontend, etc) that would be dynamically added into
      the tekton''s eventlistener manifest.  Each component should be a separate git
      repository.  ```yaml --- apiVersion: argoproj.io/v1alpha1 kind: Application
      metadata:   name: tekton-apps   namespace: argo-cd   finalizers:   - resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "41" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-apps     helm:       values: |         environment: staging         gitBranchPrefixes:           -
      staging         storageClassName: gp3         nodeSelector:           ops: ''true''         aws:           region:
      "us-west-2"           dns: staging.site.com         defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com         argocd:           server:
      deploy.staging.site.com         eventlistener:           enableWebhookSecret:
      true         apps:           - project: vp             enabled: true             argocd:               labels:                 created-by:
      xxx                 ops-main: xxx                 ops-secondary: xxx                 pm:
      xxx                 tm: xxx               namespace: prod             mailList:
      vp@site.com             devopsMailList: devops+vp@site.com             jiraURL:
      https://site.atlassian.net/browse/vp             tektonURL: https://tekton.staging.site.com/#/namespaces/ci/pipelineruns             slack:
      client-vp-ci             kubernetesRepository:               name: vp-kubernetes-aws               branch:
      main               url: git@github.com:org-name/vp-kubernetes-aws.git              components:               -
      name: backend                 repository: vp-backend                 pipeline:
      buildpack-django-build-pipeline                 applicationURL: https://api.staging.site.com                 eventlistener:                   template:
      buildpack-django-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/backend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/builder:v1                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/runner:v1               -
      name: frontend                 repository: vp-frontend                 pipeline:
      buildpack-frontend-build-pipeline                 applicationURL: https://staging.site.com                 eventlistener:                   template:
      buildpack-frontend-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/frontend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/builder:full                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/runner:full                   -
      name: source_subpath                     value: dist/web          # make sure
      PVCs are bound after the chart is synced         # by temporarily mount them
      into short-live job.         runPostInstallMountPvcJob: false      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.16"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true    ```    Above helm chart creates a new ArgoCD project
      for each project in values, for each component in project''s components there
      is created a separate ArgoCD   application and required for Tekton ci/cd resources
      (triggerbindings, roles, configmaps, jobs, serviceaccounts, pvcs and etc).    #
      fill below parameters for each `project` block    - apps[PROJECT].environment
      - possbility to define custom project''s environment, needed for cases when
      need to deploy `dev` and `prod` envs to the same cluster. For example `xxx`
      dev     and prod both deployed in rocks EKS (not required)   - apps[PROJECT].enabled
      - boolean value to define whether the project enabled or not (required)   -
      apps[PROJECT].argocd.labels - labels which are added to ArgoCD project (required)   -
      apps[PROJECT].argocd.namespace - allowed for ArgoCD project namespace (required)   -
      apps[PROJECT].argocd.syncWave - ArgoCD project sync wave, i.e. sequence in which
      project should be synced (not required, default: "200")   - apps[PROJECT].argocd.sourceRepos[]
      - source repositories added to ArgoCD project (not required, default: [<apps[PROJECT].kubernetesRepository.url>])   -
      apps[PROJECT].argocd.extraDestinationNamespaces[] - adds extra destination namespaces
      for ArgoCD project to be able to create custom apps within project''s kubernetes
      repo (not required, default: null)   - apps[PROJECT].mailList - project''s team
      email address (required)   - apps[PROJECT].devopsMailList - project''s devops
      team email address (required)   - apps[PROJECT].jiraURL - project''s JIRA url
      (required)   - apps[PROJECT].tektonURL - link to Tekton pipelineruns used in
      Tekton ConfigMap as `TEKTON_URL` during Slack notification send (required)   -
      apps[PROJECT].slack - project''s Slack channel name (required)   - apps[PROJECT].kubernetesRepository.name
      - project''s kubernetes repository name used in ArgoCD application and Tekton
      TriggerBinding (may be absent and replaced with     `apps[PROJECT].components[NAME].argocd`
      and `apps[PROJECT].argocd.sourceRepos[]` blocks in case if project has no kubernetes
      repo)   - apps[PROJECT].kubernetesRepository.branch - project''s kubernetes
      repository branch used in ArgoCD application and Tekton TriggerBinding (may
      be absent and replaced     with `apps[PROJECT].components[NAME].argocd` and
      `apps[PROJECT].argocd.sourceRepos[]` blocks in case if project has no kubernetes
      repo)   - apps[PROJECT].kubernetesRepository.url - project''s kubernetes repository
      url used in ArgoCD application and Tekton TriggerBinding (may be absent and
      replaced with     `apps[PROJECT].components[NAME].argocd` and `apps[PROJECT].argocd.sourceRepos[]`
      blocks in case if project has no kubernetes repo)    Basically we have 2 different
      types of ci/cd - basic (buildpacks, kaniko) and wordpress ones. So depending
      on project''s component type you will need to fill different parameters.    #
      fill below parameters for each `component` block    - apps[PROJECT].components[NAME].repository
      - the name of the repository containing the code (may be absent in case of wordpress
      application without deployment, i.e. bolrdswp, taco,     saritasa-wordpress-demo)   -
      apps[PROJECT].components[NAME].pipeline - the name of the pipeline building
      the code from the repository above   - apps[PROJECT].components[NAME].argocd.source.syncWave
      - custom component ArgoCD application sync wave (default: "210")   - apps[PROJECT].components[NAME].argocd.source.path
      - path to directory responsible for kubernetes resources creation of the ArgoCD
      Application (default: kubernetes repo path for basic     projects "apps/<apps[PROJECT].components[NAME].name>/manifests/<environment>"
      or "null" for wordpress projects)   - apps[PROJECT].components[NAME].argocd.source.repoUrl
      - url of repository which should be used for ArgoCD Application (default: kubernetes
      repo for basic projects     "<apps[PROJECT].kubernetesRepository.url>" or `https://charts.bitnami.com/bitnami`
      for wordpress projects)   - apps[PROJECT].components[NAME].argocd.source.targetRevision
      - tag or branch in the repository for ArgoCD Application (default: kubernetes
      branch for basic projects     "<apps[PROJECT].kubernetesRepository.branch>"
      or "11.0.14" for wordpress projects)   - apps[PROJECT].components[NAME].argocd.ignoreDeploymentReplicasDiff
      - flag whether this exact ArgoCD application should ignore `Replicas` count
      differences for deployments. It may be needed for `staging` and `prod` environments
      which use HPA (default: false)   - apps[PROJECT].components[NAME].applicationURL
      - url that should be used in tekton build ConfigMap `APPLICATION_URL` param   -
      apps[PROJECT].components[NAME].tektonKubernetesRepoDeployKeyName - name of existing
      in kubernetes cluster secret with SSH key to kubernetes repository, used in
      `kustomize` deployment     step (i.e. addon-backend-deploy-key). This param
      sets by default to `<project>-kubernetes-aws-deploy-key` if project has `kubernetesRepository`
      param in values (actual only for basic     components, not wordpress)   - apps[PROJECT].components[NAME].eventlistener.template
      - the name of the trigger template for the component to be used   - apps[PROJECT].components[NAME].eventlistener.enableWebhookSecret
      - should you enable the git web hook for this particular app/component in the
      eventlistener configuration   - apps[PROJECT].components[NAME].eventlistener.filter
      - custom filter for the component of the eventlistener   - apps[PROJECT].components[NAME].eventlistener.extraOverlays
      - extra overlays to be added into the eventlistener for the component   - apps[PROJECT].components[NAME].eventlistener.eventTypes
      - github event types to trigger the ci/cd   - apps[PROJECT].components[NAME].eventlistener.gitWebhookBranches[]
      - list of branches, push to which triggers ci/cd   - apps[PROJECT].components[NAME].extraBuildConfigParams
      - additional key/values to be added into `build-pipeline-config configmap` ConfigMap
      associated with the app   - apps[PROJECT].components[NAME].triggerBinding -
      values to be added into the TriggerBinding manifest except default ones    What
      is important to know is that any key defined in apps[PROJECT].components[NAME].triggerBinding
      would be added as is   into the generated triggerbinding associated with your
      app. However the chart renders some default values based on the values   in
      this values.yaml file:      - application, project, environment, docker_registry,
      kubernetes_repository_ssh_url, kubernetes_branch, kubernetes_repository_kustomize_path,
      source_subpath (for basic components)     - application, project, environment,
      namespace (for wordpress components)     # fill below parameters block only
      for `wordpress` components    - apps[PROJECT].components[NAME].wordpress.imageTag
      - tag of the wordpress image (default: "5.7.2")   - apps[PROJECT].components[NAME].wordpress.repository_ssh_url
      - project''s wordpress repository SSH url (default: null, may be absent if project
      has no wordpress repo)   - apps[PROJECT].components[NAME].wordpress.resources
      - wordpress pod resources params (default: requests.cpu: 100m, requests.memory:
      128Mi)   - apps[PROJECT].components[NAME].wordpress.commonLabels - wordpress
      pod common labels (default: commonLabels.tech_stack: php, commonLabels.application:
      wordpress)   - apps[PROJECT].components[NAME].wordpress.wordpressTablePrefix
      - wordpress DB tables prefix (default: wp_)   - apps[PROJECT].components[NAME].wordpress.existingSecret
      - name of existing in kubernetes secret with wp admin auth info (default: "<project_name>-<component_name>-<env>",     i.e.
      "taco-wordpress-dev")   - apps[PROJECT].components[NAME].wordpress.updateStrategy
      - strategy that should be used for wordpress pod update (default: updateStrategy.type:
      RollingUpdate,     updateStrategy.rollingUpdate.maxSurge: 0%, updateStrategy.rollingUpdate.maxUnavailable:
      100%, i.e. stop old pod and then create a new one)   - apps[PROJECT].components[NAME].wordpress.smtp.host
      - SMTP host for sending emails (default: mailhog.mailhog.svc.cluster.local)   -
      apps[PROJECT].components[NAME].wordpress.smtp.port - SMTP port for sending emails
      (default: 1025)   - apps[PROJECT].components[NAME].wordpress.smtp.user - SMTP
      user for sending emails (default: <project_name>, i.e. taco)   - apps[PROJECT].components[NAME].wordpress.smtp.password
      - SMTP password for sending emails (default: anypassword)   - apps[PROJECT].components[NAME].wordpress.nodeSelector
      - wordpress pod node selector params (default: nodeSelector.tech_stack: php,
      nodeSelector.pvc: "true")   - apps[PROJECT].components[NAME].wordpress.podSecurityContext
      - wordpress pod''s security context params (default: podSecurityContext.enabled:
      true, podSecurityContext.fsGroup: 1000)   - apps[PROJECT].components[NAME].wordpress.containerSecurityContext
      - wordpress pod container''s security context params (default: containerSecurityContext.enabled:
      true,     containerSecurityContext.runAsUser: 1000)   - apps[PROJECT].components[NAME].wordpress.ci
      - boolean flag which defines whether wordpress project has ci/cd or not (default:
      true)   - apps[PROJECT].components[NAME].wordpress.extraInitContainers - extra
      ci/cd init containers if needed, enabled only if wordpress component has `ci`
      flag enabled (default: null)   - apps[PROJECT].components[NAME].wordpress.extraVolumesSshKeySecret
      - name of a secret with wordpress repository SSH url (default: "<project_name>-<component_name>-deploy-key",     i.e.
      "taco-wordpress-deploy-key")   - apps[PROJECT].components[NAME].wordpress.extraVolumes
      - extra volumes that might be needed to wordpress pod (default: null)   - apps[PROJECT].components[NAME].wordpress.ingress.hostname
      - wordpress ingress hostname (default: "<project_name>.saritasa.rocks", i.e.
      "taco.saritasa.rocks")   - apps[PROJECT].components[NAME].wordpress.ingress.annotations
      - wordpress ingress annotations (default: kubernetes.io/ingress.class: "nginx",
      cert-manager.io/cluster-issuer: "letsencrypt-prod",     nginx.ingress.kubernetes.io/proxy-body-size:
      100m, nginx.ingress.kubernetes.io/proxy-connect-timeout: "300", nginx.ingress.kubernetes.io/proxy-next-upstream-timeout:
      "300",     nginx.ingress.kubernetes.io/auth-type: basic, nginx.ingress.kubernetes.io/auth-secret:
      <ingress.authSecret>, nginx.ingress.kubernetes.io/auth-realm: "Authentication
      Required",     nginx.ingress.kubernetes.io/server-snippet: |-,   add_header
      X-Robots-Tag "noindex, nofollow, nosnippet, noarchive")   - apps[PROJECT].components[NAME].wordpress.ingress.authSecret
      - name of kubernetes secret that should be used in ingress for basic auth (default:
      "<project_name>-<compinent_name>-<env>-basic-auth",     i.e. "taco-wordpress-dev-basic-auth")   -
      apps[PROJECT].components[NAME].wordpress.ingress.extraHosts - list of extra
      hosts that may be defined in ingress (default: null)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.host
      - wordpress DB host (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.user
      - wordpress DB user (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.existingSecret
      - name of existing in kubernetes secret with DB user password (required)   -
      apps[PROJECT].components[NAME].wordpress.externalDatabase.database - wordpress
      DB name (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.port
      - wordpress DB port (default: 3306)   - apps[PROJECT].components[NAME].wordpress.wordpressExtraConfigContent
      - wordpress extra configs if needed (default: null)   - apps[PROJECT].components[NAME].wordpress.extraEnvVars
      - wordpress extra env vars if needed (default: null)    Example of values with
      extra `eventlistener` and `extraBuildConfigParams` in component:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           gitBranchPrefixes:             -
      staging           storageClassName: gp2           aws:             region: "us-west-2"             dns:
      staging.site.com           defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com           argocd:             server:
      deploy.staging.site.com           eventlistener:             enableWebhookSecret:
      true           apps:             - project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: prod               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.site.com/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack                   applicationURL: https://api.site.com                   eventlistener:                     template:
      buildpack-backend-build-pipeline-trigger-template                   extraBuildConfigParams:
      # what additional K/V pairs you want to add into the build-pipeline-config configmap                     KEY:
      value                   triggerBinding:                     - name: docker_registry_repository                       value:
      XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/backend                     - name:
      buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/runner:v1                 -
      name: frontend                   repository: xxx-frontend                   pipeline:
      buildpack                   applicationURL: https://site.com                   eventlistener:                     enableWebhookSecret:
      false                     filter: (body.ref.startsWith(''refs/heads/develop'')
      || body.ref.startsWith(''refs/heads/release/''))                     template:
      buildpack-frontend-build-pipeline-trigger-template                     extraOverlays:
      []                     # - key: truncated_sha                     #   expression:
      "body.head_commit.id.truncate(7)"                     eventTypes: ["pull_request",
      "push"]                   extraBuildConfigParams: {}                   triggerBinding:                     -
      name: docker_registry_repository                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/frontend                     -
      name: buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web            # make
      sure PVCs are bound after the chart is synced           # by temporarily mount
      them into short-live job.           runPostInstallMountPvcJob: false        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true    ```    Example of
      old application from `saritasa-clients` repo, which has no separate `kubernetes`
      repository. Here we replace `apps[PROJECT].kubernetesRepository` block with   `apps[PROJECT].argocd.sourceRepos`
      and `apps[PROJECT].components[NAME].argocd` block, also it is required to set
      `apps[PROJECT].components[NAME].tektonKubernetesRepoDeployKeyName`   in such
      a case to use correct secret with deploy key as far as there is no kubernetes
      repo that is used by default.    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      git@github.com:saritasa-nest/xxx-backend.git                   - git@github.com:saritasa-nest/xxx-frontend.git               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: backend                   repository:
      xxx-backend                   pipeline: buildpack-django-build-pipeline                   applicationURL:
      https://api.xxx.site.url                   argocd:                     source:                       path:
      .kubernetes/manifests/dev                       repoUrl: git@github.com:saritasa-nest/xxx-backend.git                       targetRevision:
      develop                   eventlistener:                     template: buildpack-django-build-pipeline-trigger-template                   tektonKubernetesRepoDeployKeyName:
      xxx-backend-deploy-key                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1                 -
      name: frontend                   repository: xxx-frontend                   pipeline:
      buildpack-frontend-build-pipeline                   applicationURL: https://xxx.site.url                   argocd:                     source:                       path:
      .kubernetes/manifests/dev                       repoUrl: git@github.com:saritasa-nest/xxx-frontend.git                       targetRevision:
      develop                   eventlistener:                     template: buildpack-frontend-build-pipeline-trigger-template                   tektonKubernetesRepoDeployKeyName:
      xxx-frontend-deploy-key                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/frontend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Example with
      creating an ArgoCD project and application with its custom `environment` (case
      when in common `staging` environment we need to create for some reason project
      with   `dev` environment). Here is added an extra `apps[PROJECT].environment`
      param, which overrides default `environment` in helm values for this project,
      and   `apps[PROJECT].components[NAME].eventlistener.gitWebhookBranches` param,
      which defines that ci/cd should be trigger on push to `develop` branch.    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack-django-build-pipeline                   applicationURL: https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Also there might
      a situation that you would like to provision custom utility ArgoCD Application
      in argo-cd from project''s kubernetes repo (for example VP project provisions   like
      this `jitsi` application). To reach this you might need to add an extra destination
      namespace to ArgoCD Project, you should use   `apps[PROJECT].argocd.extraDestinationNamespaces[]`
      param for that like in below example.    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev                 extraDestinationNamespaces:                   -
      argo-cd               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack-django-build-pipeline                   applicationURL: https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    If you want
      to enable ignoring deployment replicas count differences in ArgoCD application
      of your component add `apps[PROJECT].components[NAME].argocd.ignoreDeploymentReplicasDiff:
      true` flag like in the below example (it may be needed for `staging` and `prod`
      envs, where you have horizontal pod autoscheduling - HPA):    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev                 extraDestinationNamespaces:                   -
      argo-cd               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   argocd:                     ignoreDeploymentReplicasDiff:
      true                   pipeline: buildpack-django-build-pipeline                   applicationURL:
      https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Simple wordpress
      application example filled by default:    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: wordpress                   repository:
      xxx-wordpress                   pipeline: wordpress-build-pipeline                   applicationURL:
      https://xxx.site.url                   wordpress:                     repository_ssh_url:
      git@github.com:saritasa-nest/xxx-wordpress.git                     externalDatabase:                       host:
      xxx.xxx.us-west-2.rds.amazonaws.com                       user: xxx-wordpress-user-dev                       existingSecret:
      xxx-wordpress-dev-externaldb                       database: xxx-wordpress-dev                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Simple wordpress
      application example filled by default, but without ci/cd:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: wordpress                   repository:
      xxx-wordpress                   pipeline: wordpress-build-pipeline                   applicationURL:
      https://xxx.site.url                   wordpress:                     ci: false                     externalDatabase:                       host:
      xxx.xxx.us-west-2.rds.amazonaws.com                       user: xxx-wordpress-user-dev                       existingSecret:
      xxx-wordpress-dev-externaldb                       database: xxx-wordpress-dev                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    More difficult
      example of project containing `wordpress` and `frontend` component. Also defined
      for example all extra wordpress params that could be set:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami                   - git@github.com:saritasa-nest/xxx-kubernetes-aws.git               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: wordpress                   repository: xxx-wordpress                   pipeline:
      wordpress-build-pipeline                   applicationURL: https://xxx.site.url                   wordpress:                     imageTag:
      "5.8.1"                     repository_ssh_url: "git@github.com:saritasa-nest/xxx-wordpress.git"                     resources:                       requests:                         memory:
      512Mi                         cpu: 100m                     commonLabels:                       tech_stack:
      php                       application: wordpress                     wordpressTablePrefix:
      "qbf_"                     existingSecret: xxx-wordpress                     updateStrategy:                       type:
      RollingUpdate                       rollingUpdate:                         maxSurge:
      25%                         maxUnavailable: 25%                     smtp:                       host:
      mysmtp.site.url                       port: 1010                       user:
      myuser                       password: mypassword                     nodeSelector:                       tech_stack:
      php                       pvc: "true"                     podSecurityContext:                       enabled:
      true                       fsGroup: 1001                     containerSecurityContext:                       enabled:
      true                       runAsUser: 1001                     ci: true                     extraInitContainers:                       -
      name: build-frontend                         image: node:14                         imagePullPolicy:
      Always                         command:                           - bash                           -
      -c                           - |                             git -c core.sshCommand="ssh
      -i ~/.ssh/id_rsa" clone git@github.com:saritasa-nest/xxx.git -b develop ~/xxx                             cd
      ~/xxx                             npm install                             npm
      run build:embedded-questionnaire                             cp -Rf $(pwd)/dist/*
      /bitnami/wordpress/wp-content/                             echo "Copied built
      files into /bitnami/wordpress/wp-content/"                             ls -la
      /bitnami/wordpress/wp-content/                             echo "Done BUILD
      FRONTEND"                         volumeMounts:                         - mountPath:
      /bitnami/wordpress                           name: wordpress-data                           subPath:
      wordpress                         - mountPath: /home/node/.ssh/id_rsa                           name:
      xxx-ssh-key                           subPath: ssh-privatekey                         -
      mountPath: /home/node/.ssh/known_hosts                           name: github-known-hosts                           subPath:
      config.ssh                         securityContext:                           runAsNonRoot:
      true                           runAsUser: 1000                           allowPrivilegeEscalation:
      false                     extraVolumesSshKeySecret: xxx-wordpress-deploy-key                     extraVolumes:                     -
      name: xxx-ssh-key                       secret:                         secretName:
      xxx-deploy-key                     ingress:                       hostname:
      test.xxx.site.url                       annotations:                         kubernetes.io/ingress.class:
      "nginx"                         cert-manager.io/cluster-issuer: "letsencrypt-prod"                         nginx.ingress.kubernetes.io/proxy-body-size:
      100m                         nginx.ingress.kubernetes.io/client-max-body-size:
      100m                         nginx.ingress.kubernetes.io/server-snippet: |-                           add_header
      X-Robots-Tag "noindex, nofollow, nosnippet, noarchive";                         nginx.ingress.kubernetes.io/whitelist-source-range:
      |                           35.85.92.224/32,                           100.21.244.185/32                       extraHosts:                         -
      name: test.xxx.site.url                           path: /wp-admin                     externalDatabase:                       host:
      "xxx.xxx.us-west-2.rds.amazonaws.com"                       user: "xxx-wp-user-dev"                       existingSecret:
      "xxx-wordpress-dev-externaldb"                       database: "xxx-wp-dev"                     wordpressExtraConfigContent:
      |                       @ini_set(''WP_MEMORY_LIMIT'', ''512M'');                       @ini_set(''ALLOW_UNFILTERED_UPLOADS'',
      true);                     extraEnvVars:                       KEY: VALUE                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template                  - name: frontend                   repository:
      xxx-frontend                   pipeline: buildpack-frontend-build-pipeline                   applicationURL:
      https://app.xxx.site.url                   eventlistener:                     template:
      buildpack-frontend-build-pipeline-trigger-template                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/frontend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ``` '
    digest: f41dc95f7dcd25b4c2f7a4bb8e8f9c0188accdc4905d20ad359cb662704a3a1f
    maintainers:
    - email: nospam@saritasa.com
      name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-apps
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-apps-0.1.23-dev/saritasa-tekton-apps-0.1.23-dev.tgz
    version: 0.1.23-dev
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2022-09-21T07:54:57.456126965Z"
    description: 'A Helm chart for tekton apps (rbac, eventlistener)  Implements:
      - dynamic records for eventlistener - PVCs - RBAC - configmaps for each app
      - triggerbindings for each app - kubernetes job to make sure the PVCs are bound
      and argocd marks the app as healthy - argocd project for each app - argocd application
      for each app component  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then declare dynamic list of projects (and associated components of that
      project like backend, api, frontend, etc) that would be dynamically added into
      the tekton''s eventlistener manifest.  Each component should be a separate git
      repository.  ```yaml --- apiVersion: argoproj.io/v1alpha1 kind: Application
      metadata:   name: tekton-apps   namespace: argo-cd   finalizers:   - resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "41" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-apps     helm:       values: |         environment: staging         gitBranchPrefixes:           -
      staging         storageClassName: gp3         nodeSelector:           ops: ''true''         aws:           region:
      "us-west-2"           dns: staging.site.com         defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com         argocd:           server:
      deploy.staging.site.com         eventlistener:           enableWebhookSecret:
      true         apps:           - project: vp             enabled: true             argocd:               labels:                 created-by:
      xxx                 ops-main: xxx                 ops-secondary: xxx                 pm:
      xxx                 tm: xxx               namespace: prod             mailList:
      vp@site.com             devopsMailList: devops+vp@site.com             jiraURL:
      https://site.atlassian.net/browse/vp             tektonURL: https://tekton.staging.site.com/#/namespaces/ci/pipelineruns             slack:
      client-vp-ci             kubernetesRepository:               name: vp-kubernetes-aws               branch:
      main               url: git@github.com:org-name/vp-kubernetes-aws.git              components:               -
      name: backend                 repository: vp-backend                 pipeline:
      buildpack-django-build-pipeline                 applicationURL: https://api.staging.site.com                 eventlistener:                   template:
      buildpack-django-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/backend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/builder:v1                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/runner:v1               -
      name: frontend                 repository: vp-frontend                 pipeline:
      buildpack-frontend-build-pipeline                 applicationURL: https://staging.site.com                 eventlistener:                   template:
      buildpack-frontend-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/frontend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/builder:full                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/runner:full                   -
      name: source_subpath                     value: dist/web          # make sure
      PVCs are bound after the chart is synced         # by temporarily mount them
      into short-live job.         runPostInstallMountPvcJob: false      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.16"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true    ```    Above helm chart creates a new ArgoCD project
      for each project in values, for each component in project''s components there
      is created a separate ArgoCD   application and required for Tekton ci/cd resources
      (triggerbindings, roles, configmaps, jobs, serviceaccounts, pvcs and etc).    #
      fill below parameters for each `project` block    - apps[PROJECT].environment
      - possbility to define custom project''s environment, needed for cases when
      need to deploy `dev` and `prod` envs to the same cluster. For example `xxx`
      dev     and prod both deployed in rocks EKS (not required)   - apps[PROJECT].enabled
      - boolean value to define whether the project enabled or not (required)   -
      apps[PROJECT].argocd.labels - labels which are added to ArgoCD project (required)   -
      apps[PROJECT].argocd.namespace - allowed for ArgoCD project namespace (required)   -
      apps[PROJECT].argocd.syncWave - ArgoCD project sync wave, i.e. sequence in which
      project should be synced (not required, default: "200")   - apps[PROJECT].argocd.sourceRepos[]
      - source repositories added to ArgoCD project (not required, default: [<apps[PROJECT].kubernetesRepository.url>])   -
      apps[PROJECT].argocd.extraDestinationNamespaces[] - adds extra destination namespaces
      for ArgoCD project to be able to create custom apps within project''s kubernetes
      repo (not required, default: null)   - apps[PROJECT].mailList - project''s team
      email address (required)   - apps[PROJECT].devopsMailList - project''s devops
      team email address (required)   - apps[PROJECT].jiraURL - project''s JIRA url
      (required)   - apps[PROJECT].tektonURL - link to Tekton pipelineruns used in
      Tekton ConfigMap as `TEKTON_URL` during Slack notification send (required)   -
      apps[PROJECT].slack - project''s Slack channel name (required)   - apps[PROJECT].kubernetesRepository.name
      - project''s kubernetes repository name used in ArgoCD application and Tekton
      TriggerBinding (may be absent and replaced with     `apps[PROJECT].components[NAME].argocd`
      and `apps[PROJECT].argocd.sourceRepos[]` blocks in case if project has no kubernetes
      repo)   - apps[PROJECT].kubernetesRepository.branch - project''s kubernetes
      repository branch used in ArgoCD application and Tekton TriggerBinding (may
      be absent and replaced     with `apps[PROJECT].components[NAME].argocd` and
      `apps[PROJECT].argocd.sourceRepos[]` blocks in case if project has no kubernetes
      repo)   - apps[PROJECT].kubernetesRepository.url - project''s kubernetes repository
      url used in ArgoCD application and Tekton TriggerBinding (may be absent and
      replaced with     `apps[PROJECT].components[NAME].argocd` and `apps[PROJECT].argocd.sourceRepos[]`
      blocks in case if project has no kubernetes repo)    Basically we have 2 different
      types of ci/cd - basic (buildpacks, kaniko) and wordpress ones. So depending
      on project''s component type you will need to fill different parameters.    #
      fill below parameters for each `component` block    - apps[PROJECT].components[NAME].repository
      - the name of the repository containing the code (may be absent in case of wordpress
      application without deployment, i.e. bolrdswp, taco,     saritasa-wordpress-demo)   -
      apps[PROJECT].components[NAME].pipeline - the name of the pipeline building
      the code from the repository above   - apps[PROJECT].components[NAME].argocd.source.syncWave
      - custom component ArgoCD application sync wave (default: "210")   - apps[PROJECT].components[NAME].argocd.source.path
      - path to directory responsible for kubernetes resources creation of the ArgoCD
      Application (default: kubernetes repo path for basic     projects "apps/<apps[PROJECT].components[NAME].name>/manifests/<environment>"
      or "null" for wordpress projects)   - apps[PROJECT].components[NAME].argocd.source.repoUrl
      - url of repository which should be used for ArgoCD Application (default: kubernetes
      repo for basic projects     "<apps[PROJECT].kubernetesRepository.url>" or `https://charts.bitnami.com/bitnami`
      for wordpress projects)   - apps[PROJECT].components[NAME].argocd.source.targetRevision
      - tag or branch in the repository for ArgoCD Application (default: kubernetes
      branch for basic projects     "<apps[PROJECT].kubernetesRepository.branch>"
      or "11.0.14" for wordpress projects)   - apps[PROJECT].components[NAME].argocd.ignoreDeploymentReplicasDiff
      - flag whether this exact ArgoCD application should ignore `Replicas` count
      differences for deployments. It may be needed for `staging` and `prod` environments
      which use HPA (default: false)   - apps[PROJECT].components[NAME].applicationURL
      - url that should be used in tekton build ConfigMap `APPLICATION_URL` param   -
      apps[PROJECT].components[NAME].tektonKubernetesRepoDeployKeyName - name of existing
      in kubernetes cluster secret with SSH key to kubernetes repository, used in
      `kustomize` deployment     step (i.e. addon-backend-deploy-key). This param
      sets by default to `<project>-kubernetes-aws-deploy-key` if project has `kubernetesRepository`
      param in values (actual only for basic     components, not wordpress)   - apps[PROJECT].components[NAME].eventlistener.template
      - the name of the trigger template for the component to be used   - apps[PROJECT].components[NAME].eventlistener.enableWebhookSecret
      - should you enable the git web hook for this particular app/component in the
      eventlistener configuration   - apps[PROJECT].components[NAME].eventlistener.filter
      - custom filter for the component of the eventlistener   - apps[PROJECT].components[NAME].eventlistener.extraOverlays
      - extra overlays to be added into the eventlistener for the component   - apps[PROJECT].components[NAME].eventlistener.eventTypes
      - github event types to trigger the ci/cd   - apps[PROJECT].components[NAME].eventlistener.gitWebhookBranches[]
      - list of branches, push to which triggers ci/cd   - apps[PROJECT].components[NAME].extraBuildConfigParams
      - additional key/values to be added into `build-pipeline-config configmap` ConfigMap
      associated with the app   - apps[PROJECT].components[NAME].triggerBinding -
      values to be added into the TriggerBinding manifest except default ones    What
      is important to know is that any key defined in apps[PROJECT].components[NAME].triggerBinding
      would be added as is   into the generated triggerbinding associated with your
      app. However the chart renders some default values based on the values   in
      this values.yaml file:      - application, project, environment, docker_registry,
      kubernetes_repository_ssh_url, kubernetes_branch, kubernetes_repository_kustomize_path,
      source_subpath (for basic components)     - application, project, environment,
      namespace (for wordpress components)     # fill below parameters block only
      for `wordpress` components    - apps[PROJECT].components[NAME].wordpress.imageTag
      - tag of the wordpress image (default: "5.7.2")   - apps[PROJECT].components[NAME].wordpress.repository_ssh_url
      - project''s wordpress repository SSH url (default: null, may be absent if project
      has no wordpress repo)   - apps[PROJECT].components[NAME].wordpress.resources
      - wordpress pod resources params (default: requests.cpu: 100m, requests.memory:
      128Mi)   - apps[PROJECT].components[NAME].wordpress.commonLabels - wordpress
      pod common labels (default: commonLabels.tech_stack: php, commonLabels.application:
      wordpress)   - apps[PROJECT].components[NAME].wordpress.wordpressTablePrefix
      - wordpress DB tables prefix (default: wp_)   - apps[PROJECT].components[NAME].wordpress.existingSecret
      - name of existing in kubernetes secret with wp admin auth info (default: "<project_name>-<component_name>-<env>",     i.e.
      "taco-wordpress-dev")   - apps[PROJECT].components[NAME].wordpress.updateStrategy
      - strategy that should be used for wordpress pod update (default: updateStrategy.type:
      RollingUpdate,     updateStrategy.rollingUpdate.maxSurge: 0%, updateStrategy.rollingUpdate.maxUnavailable:
      100%, i.e. stop old pod and then create a new one)   - apps[PROJECT].components[NAME].wordpress.smtp.host
      - SMTP host for sending emails (default: mailhog.mailhog.svc.cluster.local)   -
      apps[PROJECT].components[NAME].wordpress.smtp.port - SMTP port for sending emails
      (default: 1025)   - apps[PROJECT].components[NAME].wordpress.smtp.user - SMTP
      user for sending emails (default: <project_name>, i.e. taco)   - apps[PROJECT].components[NAME].wordpress.smtp.password
      - SMTP password for sending emails (default: anypassword)   - apps[PROJECT].components[NAME].wordpress.nodeSelector
      - wordpress pod node selector params (default: nodeSelector.tech_stack: php,
      nodeSelector.pvc: "true")   - apps[PROJECT].components[NAME].wordpress.podSecurityContext
      - wordpress pod''s security context params (default: podSecurityContext.enabled:
      true, podSecurityContext.fsGroup: 1000)   - apps[PROJECT].components[NAME].wordpress.containerSecurityContext
      - wordpress pod container''s security context params (default: containerSecurityContext.enabled:
      true,     containerSecurityContext.runAsUser: 1000)   - apps[PROJECT].components[NAME].wordpress.ci
      - boolean flag which defines whether wordpress project has ci/cd or not (default:
      true)   - apps[PROJECT].components[NAME].wordpress.extraInitContainers - extra
      ci/cd init containers if needed, enabled only if wordpress component has `ci`
      flag enabled (default: null)   - apps[PROJECT].components[NAME].wordpress.extraVolumesSshKeySecret
      - name of a secret with wordpress repository SSH url (default: "<project_name>-<component_name>-deploy-key",     i.e.
      "taco-wordpress-deploy-key")   - apps[PROJECT].components[NAME].wordpress.extraVolumes
      - extra volumes that might be needed to wordpress pod (default: null)   - apps[PROJECT].components[NAME].wordpress.ingress.hostname
      - wordpress ingress hostname (default: "<project_name>.saritasa.rocks", i.e.
      "taco.saritasa.rocks")   - apps[PROJECT].components[NAME].wordpress.ingress.annotations
      - wordpress ingress annotations (default: kubernetes.io/ingress.class: "nginx",
      cert-manager.io/cluster-issuer: "letsencrypt-prod",     nginx.ingress.kubernetes.io/proxy-body-size:
      100m, nginx.ingress.kubernetes.io/proxy-connect-timeout: "300", nginx.ingress.kubernetes.io/proxy-next-upstream-timeout:
      "300",     nginx.ingress.kubernetes.io/auth-type: basic, nginx.ingress.kubernetes.io/auth-secret:
      <ingress.authSecret>, nginx.ingress.kubernetes.io/auth-realm: "Authentication
      Required",     nginx.ingress.kubernetes.io/server-snippet: |-,   add_header
      X-Robots-Tag "noindex, nofollow, nosnippet, noarchive")   - apps[PROJECT].components[NAME].wordpress.ingress.authSecret
      - name of kubernetes secret that should be used in ingress for basic auth (default:
      "<project_name>-<compinent_name>-<env>-basic-auth",     i.e. "taco-wordpress-dev-basic-auth")   -
      apps[PROJECT].components[NAME].wordpress.ingress.extraHosts - list of extra
      hosts that may be defined in ingress (default: null)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.host
      - wordpress DB host (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.user
      - wordpress DB user (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.existingSecret
      - name of existing in kubernetes secret with DB user password (required)   -
      apps[PROJECT].components[NAME].wordpress.externalDatabase.database - wordpress
      DB name (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.port
      - wordpress DB port (default: 3306)   - apps[PROJECT].components[NAME].wordpress.wordpressExtraConfigContent
      - wordpress extra configs if needed (default: null)   - apps[PROJECT].components[NAME].wordpress.extraEnvVars
      - wordpress extra env vars if needed (default: null)    Example of values with
      extra `eventlistener` and `extraBuildConfigParams` in component:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           gitBranchPrefixes:             -
      staging           storageClassName: gp2           aws:             region: "us-west-2"             dns:
      staging.site.com           defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com           argocd:             server:
      deploy.staging.site.com           eventlistener:             enableWebhookSecret:
      true           apps:             - project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: prod               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.site.com/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack                   applicationURL: https://api.site.com                   eventlistener:                     template:
      buildpack-backend-build-pipeline-trigger-template                   extraBuildConfigParams:
      # what additional K/V pairs you want to add into the build-pipeline-config configmap                     KEY:
      value                   triggerBinding:                     - name: docker_registry_repository                       value:
      XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/backend                     - name:
      buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/runner:v1                 -
      name: frontend                   repository: xxx-frontend                   pipeline:
      buildpack                   applicationURL: https://site.com                   eventlistener:                     enableWebhookSecret:
      false                     filter: (body.ref.startsWith(''refs/heads/develop'')
      || body.ref.startsWith(''refs/heads/release/''))                     template:
      buildpack-frontend-build-pipeline-trigger-template                     extraOverlays:
      []                     # - key: truncated_sha                     #   expression:
      "body.head_commit.id.truncate(7)"                     eventTypes: ["pull_request",
      "push"]                   extraBuildConfigParams: {}                   triggerBinding:                     -
      name: docker_registry_repository                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/frontend                     -
      name: buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web            # make
      sure PVCs are bound after the chart is synced           # by temporarily mount
      them into short-live job.           runPostInstallMountPvcJob: false        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true    ```    Example of
      old application from `saritasa-clients` repo, which has no separate `kubernetes`
      repository. Here we replace `apps[PROJECT].kubernetesRepository` block with   `apps[PROJECT].argocd.sourceRepos`
      and `apps[PROJECT].components[NAME].argocd` block, also it is required to set
      `apps[PROJECT].components[NAME].tektonKubernetesRepoDeployKeyName`   in such
      a case to use correct secret with deploy key as far as there is no kubernetes
      repo that is used by default.    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      git@github.com:saritasa-nest/xxx-backend.git                   - git@github.com:saritasa-nest/xxx-frontend.git               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: backend                   repository:
      xxx-backend                   pipeline: buildpack-django-build-pipeline                   applicationURL:
      https://api.xxx.site.url                   argocd:                     source:                       path:
      .kubernetes/manifests/dev                       repoUrl: git@github.com:saritasa-nest/xxx-backend.git                       targetRevision:
      develop                   eventlistener:                     template: buildpack-django-build-pipeline-trigger-template                   tektonKubernetesRepoDeployKeyName:
      xxx-backend-deploy-key                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1                 -
      name: frontend                   repository: xxx-frontend                   pipeline:
      buildpack-frontend-build-pipeline                   applicationURL: https://xxx.site.url                   argocd:                     source:                       path:
      .kubernetes/manifests/dev                       repoUrl: git@github.com:saritasa-nest/xxx-frontend.git                       targetRevision:
      develop                   eventlistener:                     template: buildpack-frontend-build-pipeline-trigger-template                   tektonKubernetesRepoDeployKeyName:
      xxx-frontend-deploy-key                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/frontend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Example with
      creating an ArgoCD project and application with its custom `environment` (case
      when in common `staging` environment we need to create for some reason project
      with   `dev` environment). Here is added an extra `apps[PROJECT].environment`
      param, which overrides default `environment` in helm values for this project,
      and   `apps[PROJECT].components[NAME].eventlistener.gitWebhookBranches` param,
      which defines that ci/cd should be trigger on push to `develop` branch.    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack-django-build-pipeline                   applicationURL: https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Also there might
      a situation that you would like to provision custom utility ArgoCD Application
      in argo-cd from project''s kubernetes repo (for example VP project provisions   like
      this `jitsi` application). To reach this you might need to add an extra destination
      namespace to ArgoCD Project, you should use   `apps[PROJECT].argocd.extraDestinationNamespaces[]`
      param for that like in below example.    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev                 extraDestinationNamespaces:                   -
      argo-cd               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack-django-build-pipeline                   applicationURL: https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    If you want
      to enable ignoring deployment replicas count differences in ArgoCD application
      of your component add `apps[PROJECT].components[NAME].argocd.ignoreDeploymentReplicasDiff:
      true` flag like in the below example (it may be needed for `staging` and `prod`
      envs, where you have horizontal pod autoscheduling - HPA):    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev                 extraDestinationNamespaces:                   -
      argo-cd               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   argocd:                     ignoreDeploymentReplicasDiff:
      true                   pipeline: buildpack-django-build-pipeline                   applicationURL:
      https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Simple wordpress
      application example filled by default:    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: wordpress                   repository:
      xxx-wordpress                   pipeline: wordpress-build-pipeline                   applicationURL:
      https://xxx.site.url                   wordpress:                     repository_ssh_url:
      git@github.com:saritasa-nest/xxx-wordpress.git                     externalDatabase:                       host:
      xxx.xxx.us-west-2.rds.amazonaws.com                       user: xxx-wordpress-user-dev                       existingSecret:
      xxx-wordpress-dev-externaldb                       database: xxx-wordpress-dev                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Simple wordpress
      application example filled by default, but without ci/cd:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: wordpress                   repository:
      xxx-wordpress                   pipeline: wordpress-build-pipeline                   applicationURL:
      https://xxx.site.url                   wordpress:                     ci: false                     externalDatabase:                       host:
      xxx.xxx.us-west-2.rds.amazonaws.com                       user: xxx-wordpress-user-dev                       existingSecret:
      xxx-wordpress-dev-externaldb                       database: xxx-wordpress-dev                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    More difficult
      example of project containing `wordpress` and `frontend` component. Also defined
      for example all extra wordpress params that could be set:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami                   - git@github.com:saritasa-nest/xxx-kubernetes-aws.git               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: wordpress                   repository: xxx-wordpress                   pipeline:
      wordpress-build-pipeline                   applicationURL: https://xxx.site.url                   wordpress:                     imageTag:
      "5.8.1"                     repository_ssh_url: "git@github.com:saritasa-nest/xxx-wordpress.git"                     resources:                       requests:                         memory:
      512Mi                         cpu: 100m                     commonLabels:                       tech_stack:
      php                       application: wordpress                     wordpressTablePrefix:
      "qbf_"                     existingSecret: xxx-wordpress                     updateStrategy:                       type:
      RollingUpdate                       rollingUpdate:                         maxSurge:
      25%                         maxUnavailable: 25%                     smtp:                       host:
      mysmtp.site.url                       port: 1010                       user:
      myuser                       password: mypassword                     nodeSelector:                       tech_stack:
      php                       pvc: "true"                     podSecurityContext:                       enabled:
      true                       fsGroup: 1001                     containerSecurityContext:                       enabled:
      true                       runAsUser: 1001                     ci: true                     extraInitContainers:                       -
      name: build-frontend                         image: node:14                         imagePullPolicy:
      Always                         command:                           - bash                           -
      -c                           - |                             git -c core.sshCommand="ssh
      -i ~/.ssh/id_rsa" clone git@github.com:saritasa-nest/xxx.git -b develop ~/xxx                             cd
      ~/xxx                             npm install                             npm
      run build:embedded-questionnaire                             cp -Rf $(pwd)/dist/*
      /bitnami/wordpress/wp-content/                             echo "Copied built
      files into /bitnami/wordpress/wp-content/"                             ls -la
      /bitnami/wordpress/wp-content/                             echo "Done BUILD
      FRONTEND"                         volumeMounts:                         - mountPath:
      /bitnami/wordpress                           name: wordpress-data                           subPath:
      wordpress                         - mountPath: /home/node/.ssh/id_rsa                           name:
      xxx-ssh-key                           subPath: ssh-privatekey                         -
      mountPath: /home/node/.ssh/known_hosts                           name: github-known-hosts                           subPath:
      config.ssh                         securityContext:                           runAsNonRoot:
      true                           runAsUser: 1000                           allowPrivilegeEscalation:
      false                     extraVolumesSshKeySecret: xxx-wordpress-deploy-key                     extraVolumes:                     -
      name: xxx-ssh-key                       secret:                         secretName:
      xxx-deploy-key                     ingress:                       hostname:
      test.xxx.site.url                       annotations:                         kubernetes.io/ingress.class:
      "nginx"                         cert-manager.io/cluster-issuer: "letsencrypt-prod"                         nginx.ingress.kubernetes.io/proxy-body-size:
      100m                         nginx.ingress.kubernetes.io/client-max-body-size:
      100m                         nginx.ingress.kubernetes.io/server-snippet: |-                           add_header
      X-Robots-Tag "noindex, nofollow, nosnippet, noarchive";                         nginx.ingress.kubernetes.io/whitelist-source-range:
      |                           35.85.92.224/32,                           100.21.244.185/32                       extraHosts:                         -
      name: test.xxx.site.url                           path: /wp-admin                     externalDatabase:                       host:
      "xxx.xxx.us-west-2.rds.amazonaws.com"                       user: "xxx-wp-user-dev"                       existingSecret:
      "xxx-wordpress-dev-externaldb"                       database: "xxx-wp-dev"                     wordpressExtraConfigContent:
      |                       @ini_set(''WP_MEMORY_LIMIT'', ''512M'');                       @ini_set(''ALLOW_UNFILTERED_UPLOADS'',
      true);                     extraEnvVars:                       KEY: VALUE                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template                  - name: frontend                   repository:
      xxx-frontend                   pipeline: buildpack-frontend-build-pipeline                   applicationURL:
      https://app.xxx.site.url                   eventlistener:                     template:
      buildpack-frontend-build-pipeline-trigger-template                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/frontend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ``` '
    digest: d5de2d71b098fdd1b118921ad8d17ff835646e9e822d3688500b490dadff3571
    maintainers:
    - email: nospam@saritasa.com
      name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-apps
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-apps-0.1.23-dev/saritasa-tekton-apps-0.1.23-dev.tgz
    version: 0.1.23-dev
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2022-09-21T08:44:44.737571225Z"
    description: 'A Helm chart for tekton apps (rbac, eventlistener)  Implements:
      - dynamic records for eventlistener - PVCs - RBAC - configmaps for each app
      - triggerbindings for each app - kubernetes job to make sure the PVCs are bound
      and argocd marks the app as healthy - argocd project for each app - argocd application
      for each app component  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then declare dynamic list of projects (and associated components of that
      project like backend, api, frontend, etc) that would be dynamically added into
      the tekton''s eventlistener manifest.  Each component should be a separate git
      repository.  ```yaml --- apiVersion: argoproj.io/v1alpha1 kind: Application
      metadata:   name: tekton-apps   namespace: argo-cd   finalizers:   - resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "41" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-apps     helm:       values: |         environment: staging         gitBranchPrefixes:           -
      staging         storageClassName: gp3         nodeSelector:           ops: ''true''         aws:           region:
      "us-west-2"           dns: staging.site.com         defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com         argocd:           server:
      deploy.staging.site.com         eventlistener:           enableWebhookSecret:
      true         apps:           - project: vp             enabled: true             argocd:               labels:                 created-by:
      xxx                 ops-main: xxx                 ops-secondary: xxx                 pm:
      xxx                 tm: xxx               namespace: prod             mailList:
      vp@site.com             devopsMailList: devops+vp@site.com             jiraURL:
      https://site.atlassian.net/browse/vp             tektonURL: https://tekton.staging.site.com/#/namespaces/ci/pipelineruns             slack:
      client-vp-ci             kubernetesRepository:               name: vp-kubernetes-aws               branch:
      main               url: git@github.com:org-name/vp-kubernetes-aws.git              components:               -
      name: backend                 repository: vp-backend                 pipeline:
      buildpack-django-build-pipeline                 applicationURL: https://api.staging.site.com                 eventlistener:                   template:
      buildpack-django-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/backend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/builder:v1                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/runner:v1               -
      name: frontend                 repository: vp-frontend                 pipeline:
      buildpack-frontend-build-pipeline                 applicationURL: https://staging.site.com                 eventlistener:                   template:
      buildpack-frontend-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/frontend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/builder:full                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/runner:full                   -
      name: source_subpath                     value: dist/web          # make sure
      PVCs are bound after the chart is synced         # by temporarily mount them
      into short-live job.         runPostInstallMountPvcJob: false      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.16"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true    ```    Above helm chart creates a new ArgoCD project
      for each project in values, for each component in project''s components there
      is created a separate ArgoCD   application and required for Tekton ci/cd resources
      (triggerbindings, roles, configmaps, jobs, serviceaccounts, pvcs and etc).    #
      fill below parameters for each `project` block    - apps[PROJECT].environment
      - possbility to define custom project''s environment, needed for cases when
      need to deploy `dev` and `prod` envs to the same cluster. For example `xxx`
      dev     and prod both deployed in rocks EKS (not required)   - apps[PROJECT].enabled
      - boolean value to define whether the project enabled or not (required)   -
      apps[PROJECT].argocd.labels - labels which are added to ArgoCD project (required)   -
      apps[PROJECT].argocd.namespace - allowed for ArgoCD project namespace (required)   -
      apps[PROJECT].argocd.syncWave - ArgoCD project sync wave, i.e. sequence in which
      project should be synced (not required, default: "200")   - apps[PROJECT].argocd.sourceRepos[]
      - source repositories added to ArgoCD project (not required, default: [<apps[PROJECT].kubernetesRepository.url>])   -
      apps[PROJECT].argocd.extraDestinationNamespaces[] - adds extra destination namespaces
      for ArgoCD project to be able to create custom apps within project''s kubernetes
      repo (not required, default: null)   - apps[PROJECT].mailList - project''s team
      email address (required)   - apps[PROJECT].devopsMailList - project''s devops
      team email address (required)   - apps[PROJECT].jiraURL - project''s JIRA url
      (required)   - apps[PROJECT].tektonURL - link to Tekton pipelineruns used in
      Tekton ConfigMap as `TEKTON_URL` during Slack notification send (required)   -
      apps[PROJECT].slack - project''s Slack channel name (required)   - apps[PROJECT].kubernetesRepository.name
      - project''s kubernetes repository name used in ArgoCD application and Tekton
      TriggerBinding (may be absent and replaced with     `apps[PROJECT].components[NAME].argocd`
      and `apps[PROJECT].argocd.sourceRepos[]` blocks in case if project has no kubernetes
      repo)   - apps[PROJECT].kubernetesRepository.branch - project''s kubernetes
      repository branch used in ArgoCD application and Tekton TriggerBinding (may
      be absent and replaced     with `apps[PROJECT].components[NAME].argocd` and
      `apps[PROJECT].argocd.sourceRepos[]` blocks in case if project has no kubernetes
      repo)   - apps[PROJECT].kubernetesRepository.url - project''s kubernetes repository
      url used in ArgoCD application and Tekton TriggerBinding (may be absent and
      replaced with     `apps[PROJECT].components[NAME].argocd` and `apps[PROJECT].argocd.sourceRepos[]`
      blocks in case if project has no kubernetes repo)    Basically we have 2 different
      types of ci/cd - basic (buildpacks, kaniko) and wordpress ones. So depending
      on project''s component type you will need to fill different parameters.    #
      fill below parameters for each `component` block    - apps[PROJECT].components[NAME].repository
      - the name of the repository containing the code (may be absent in case of wordpress
      application without deployment, i.e. bolrdswp, taco,     saritasa-wordpress-demo)   -
      apps[PROJECT].components[NAME].pipeline - the name of the pipeline building
      the code from the repository above   - apps[PROJECT].components[NAME].argocd.source.syncWave
      - custom component ArgoCD application sync wave (default: "210")   - apps[PROJECT].components[NAME].argocd.source.path
      - path to directory responsible for kubernetes resources creation of the ArgoCD
      Application (default: kubernetes repo path for basic     projects "apps/<apps[PROJECT].components[NAME].name>/manifests/<environment>"
      or "null" for wordpress projects)   - apps[PROJECT].components[NAME].argocd.source.repoUrl
      - url of repository which should be used for ArgoCD Application (default: kubernetes
      repo for basic projects     "<apps[PROJECT].kubernetesRepository.url>" or `https://charts.bitnami.com/bitnami`
      for wordpress projects)   - apps[PROJECT].components[NAME].argocd.source.targetRevision
      - tag or branch in the repository for ArgoCD Application (default: kubernetes
      branch for basic projects     "<apps[PROJECT].kubernetesRepository.branch>"
      or "11.0.14" for wordpress projects)   - apps[PROJECT].components[NAME].argocd.ignoreDeploymentReplicasDiff
      - flag whether this exact ArgoCD application should ignore `Replicas` count
      differences for deployments. It may be needed for `staging` and `prod` environments
      which use HPA (default: false)   - apps[PROJECT].components[NAME].applicationURL
      - url that should be used in tekton build ConfigMap `APPLICATION_URL` param   -
      apps[PROJECT].components[NAME].tektonKubernetesRepoDeployKeyName - name of existing
      in kubernetes cluster secret with SSH key to kubernetes repository, used in
      `kustomize` deployment     step (i.e. addon-backend-deploy-key). This param
      sets by default to `<project>-kubernetes-aws-deploy-key` if project has `kubernetesRepository`
      param in values (actual only for basic     components, not wordpress)   - apps[PROJECT].components[NAME].eventlistener.template
      - the name of the trigger template for the component to be used   - apps[PROJECT].components[NAME].eventlistener.enableWebhookSecret
      - should you enable the git web hook for this particular app/component in the
      eventlistener configuration   - apps[PROJECT].components[NAME].eventlistener.filter
      - custom filter for the component of the eventlistener   - apps[PROJECT].components[NAME].eventlistener.extraOverlays
      - extra overlays to be added into the eventlistener for the component   - apps[PROJECT].components[NAME].eventlistener.eventTypes
      - github event types to trigger the ci/cd   - apps[PROJECT].components[NAME].eventlistener.gitWebhookBranches[]
      - list of branches, push to which triggers ci/cd   - apps[PROJECT].components[NAME].extraBuildConfigParams
      - additional key/values to be added into `build-pipeline-config configmap` ConfigMap
      associated with the app   - apps[PROJECT].components[NAME].triggerBinding -
      values to be added into the TriggerBinding manifest except default ones    What
      is important to know is that any key defined in apps[PROJECT].components[NAME].triggerBinding
      would be added as is   into the generated triggerbinding associated with your
      app. However the chart renders some default values based on the values   in
      this values.yaml file:      - application, project, environment, docker_registry,
      kubernetes_repository_ssh_url, kubernetes_branch, kubernetes_repository_kustomize_path,
      source_subpath (for basic components)     - application, project, environment,
      namespace (for wordpress components)     # fill below parameters block only
      for `wordpress` components    - apps[PROJECT].components[NAME].wordpress.imageTag
      - tag of the wordpress image (default: "5.7.2")   - apps[PROJECT].components[NAME].wordpress.repository_ssh_url
      - project''s wordpress repository SSH url (default: null, may be absent if project
      has no wordpress repo)   - apps[PROJECT].components[NAME].wordpress.resources
      - wordpress pod resources params (default: requests.cpu: 100m, requests.memory:
      128Mi)   - apps[PROJECT].components[NAME].wordpress.commonLabels - wordpress
      pod common labels (default: commonLabels.tech_stack: php, commonLabels.application:
      wordpress)   - apps[PROJECT].components[NAME].wordpress.wordpressTablePrefix
      - wordpress DB tables prefix (default: wp_)   - apps[PROJECT].components[NAME].wordpress.existingSecret
      - name of existing in kubernetes secret with wp admin auth info (default: "<project_name>-<component_name>-<env>",     i.e.
      "taco-wordpress-dev")   - apps[PROJECT].components[NAME].wordpress.updateStrategy
      - strategy that should be used for wordpress pod update (default: updateStrategy.type:
      RollingUpdate,     updateStrategy.rollingUpdate.maxSurge: 0%, updateStrategy.rollingUpdate.maxUnavailable:
      100%, i.e. stop old pod and then create a new one)   - apps[PROJECT].components[NAME].wordpress.smtp.host
      - SMTP host for sending emails (default: mailhog.mailhog.svc.cluster.local)   -
      apps[PROJECT].components[NAME].wordpress.smtp.port - SMTP port for sending emails
      (default: 1025)   - apps[PROJECT].components[NAME].wordpress.smtp.user - SMTP
      user for sending emails (default: <project_name>, i.e. taco)   - apps[PROJECT].components[NAME].wordpress.smtp.password
      - SMTP password for sending emails (default: anypassword)   - apps[PROJECT].components[NAME].wordpress.nodeSelector
      - wordpress pod node selector params (default: nodeSelector.tech_stack: php,
      nodeSelector.pvc: "true")   - apps[PROJECT].components[NAME].wordpress.podSecurityContext
      - wordpress pod''s security context params (default: podSecurityContext.enabled:
      true, podSecurityContext.fsGroup: 1000)   - apps[PROJECT].components[NAME].wordpress.containerSecurityContext
      - wordpress pod container''s security context params (default: containerSecurityContext.enabled:
      true,     containerSecurityContext.runAsUser: 1000)   - apps[PROJECT].components[NAME].wordpress.ci
      - boolean flag which defines whether wordpress project has ci/cd or not (default:
      true)   - apps[PROJECT].components[NAME].wordpress.extraInitContainers - extra
      ci/cd init containers if needed, enabled only if wordpress component has `ci`
      flag enabled (default: null)   - apps[PROJECT].components[NAME].wordpress.extraVolumesSshKeySecret
      - name of a secret with wordpress repository SSH url (default: "<project_name>-<component_name>-deploy-key",     i.e.
      "taco-wordpress-deploy-key")   - apps[PROJECT].components[NAME].wordpress.extraVolumes
      - extra volumes that might be needed to wordpress pod (default: null)   - apps[PROJECT].components[NAME].wordpress.ingress.hostname
      - wordpress ingress hostname (default: "<project_name>.saritasa.rocks", i.e.
      "taco.saritasa.rocks")   - apps[PROJECT].components[NAME].wordpress.ingress.annotations
      - wordpress ingress annotations (default: kubernetes.io/ingress.class: "nginx",
      cert-manager.io/cluster-issuer: "letsencrypt-prod",     nginx.ingress.kubernetes.io/proxy-body-size:
      100m, nginx.ingress.kubernetes.io/proxy-connect-timeout: "300", nginx.ingress.kubernetes.io/proxy-next-upstream-timeout:
      "300",     nginx.ingress.kubernetes.io/auth-type: basic, nginx.ingress.kubernetes.io/auth-secret:
      <ingress.authSecret>, nginx.ingress.kubernetes.io/auth-realm: "Authentication
      Required",     nginx.ingress.kubernetes.io/server-snippet: |-,   add_header
      X-Robots-Tag "noindex, nofollow, nosnippet, noarchive")   - apps[PROJECT].components[NAME].wordpress.ingress.authSecret
      - name of kubernetes secret that should be used in ingress for basic auth (default:
      "<project_name>-<compinent_name>-<env>-basic-auth",     i.e. "taco-wordpress-dev-basic-auth")   -
      apps[PROJECT].components[NAME].wordpress.ingress.extraHosts - list of extra
      hosts that may be defined in ingress (default: null)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.host
      - wordpress DB host (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.user
      - wordpress DB user (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.existingSecret
      - name of existing in kubernetes secret with DB user password (required)   -
      apps[PROJECT].components[NAME].wordpress.externalDatabase.database - wordpress
      DB name (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.port
      - wordpress DB port (default: 3306)   - apps[PROJECT].components[NAME].wordpress.wordpressExtraConfigContent
      - wordpress extra configs if needed (default: null)   - apps[PROJECT].components[NAME].wordpress.extraEnvVars
      - wordpress extra env vars if needed (default: null)    Example of values with
      extra `eventlistener` and `extraBuildConfigParams` in component:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           gitBranchPrefixes:             -
      staging           storageClassName: gp2           aws:             region: "us-west-2"             dns:
      staging.site.com           defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com           argocd:             server:
      deploy.staging.site.com           eventlistener:             enableWebhookSecret:
      true           apps:             - project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: prod               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.site.com/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack                   applicationURL: https://api.site.com                   eventlistener:                     template:
      buildpack-backend-build-pipeline-trigger-template                   extraBuildConfigParams:
      # what additional K/V pairs you want to add into the build-pipeline-config configmap                     KEY:
      value                   triggerBinding:                     - name: docker_registry_repository                       value:
      XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/backend                     - name:
      buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/runner:v1                 -
      name: frontend                   repository: xxx-frontend                   pipeline:
      buildpack                   applicationURL: https://site.com                   eventlistener:                     enableWebhookSecret:
      false                     filter: (body.ref.startsWith(''refs/heads/develop'')
      || body.ref.startsWith(''refs/heads/release/''))                     template:
      buildpack-frontend-build-pipeline-trigger-template                     extraOverlays:
      []                     # - key: truncated_sha                     #   expression:
      "body.head_commit.id.truncate(7)"                     eventTypes: ["pull_request",
      "push"]                   extraBuildConfigParams: {}                   triggerBinding:                     -
      name: docker_registry_repository                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/frontend                     -
      name: buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web            # make
      sure PVCs are bound after the chart is synced           # by temporarily mount
      them into short-live job.           runPostInstallMountPvcJob: false        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true    ```    Example of
      old application from `saritasa-clients` repo, which has no separate `kubernetes`
      repository. Here we replace `apps[PROJECT].kubernetesRepository` block with   `apps[PROJECT].argocd.sourceRepos`
      and `apps[PROJECT].components[NAME].argocd` block, also it is required to set
      `apps[PROJECT].components[NAME].tektonKubernetesRepoDeployKeyName`   in such
      a case to use correct secret with deploy key as far as there is no kubernetes
      repo that is used by default.    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      git@github.com:saritasa-nest/xxx-backend.git                   - git@github.com:saritasa-nest/xxx-frontend.git               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: backend                   repository:
      xxx-backend                   pipeline: buildpack-django-build-pipeline                   applicationURL:
      https://api.xxx.site.url                   argocd:                     source:                       path:
      .kubernetes/manifests/dev                       repoUrl: git@github.com:saritasa-nest/xxx-backend.git                       targetRevision:
      develop                   eventlistener:                     template: buildpack-django-build-pipeline-trigger-template                   tektonKubernetesRepoDeployKeyName:
      xxx-backend-deploy-key                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1                 -
      name: frontend                   repository: xxx-frontend                   pipeline:
      buildpack-frontend-build-pipeline                   applicationURL: https://xxx.site.url                   argocd:                     source:                       path:
      .kubernetes/manifests/dev                       repoUrl: git@github.com:saritasa-nest/xxx-frontend.git                       targetRevision:
      develop                   eventlistener:                     template: buildpack-frontend-build-pipeline-trigger-template                   tektonKubernetesRepoDeployKeyName:
      xxx-frontend-deploy-key                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/frontend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Example with
      creating an ArgoCD project and application with its custom `environment` (case
      when in common `staging` environment we need to create for some reason project
      with   `dev` environment). Here is added an extra `apps[PROJECT].environment`
      param, which overrides default `environment` in helm values for this project,
      and   `apps[PROJECT].components[NAME].eventlistener.gitWebhookBranches` param,
      which defines that ci/cd should be trigger on push to `develop` branch.    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack-django-build-pipeline                   applicationURL: https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Also there might
      a situation that you would like to provision custom utility ArgoCD Application
      in argo-cd from project''s kubernetes repo (for example VP project provisions   like
      this `jitsi` application). To reach this you might need to add an extra destination
      namespace to ArgoCD Project, you should use   `apps[PROJECT].argocd.extraDestinationNamespaces[]`
      param for that like in below example.    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev                 extraDestinationNamespaces:                   -
      argo-cd               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack-django-build-pipeline                   applicationURL: https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    If you want
      to enable ignoring deployment replicas count differences in ArgoCD application
      of your component add `apps[PROJECT].components[NAME].argocd.ignoreDeploymentReplicasDiff:
      true` flag like in the below example (it may be needed for `staging` and `prod`
      envs, where you have horizontal pod autoscheduling - HPA):    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev                 extraDestinationNamespaces:                   -
      argo-cd               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   argocd:                     ignoreDeploymentReplicasDiff:
      true                   pipeline: buildpack-django-build-pipeline                   applicationURL:
      https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Simple wordpress
      application example filled by default:    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: wordpress                   repository:
      xxx-wordpress                   pipeline: wordpress-build-pipeline                   applicationURL:
      https://xxx.site.url                   wordpress:                     repository_ssh_url:
      git@github.com:saritasa-nest/xxx-wordpress.git                     externalDatabase:                       host:
      xxx.xxx.us-west-2.rds.amazonaws.com                       user: xxx-wordpress-user-dev                       existingSecret:
      xxx-wordpress-dev-externaldb                       database: xxx-wordpress-dev                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Simple wordpress
      application example filled by default, but without ci/cd:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: wordpress                   repository:
      xxx-wordpress                   pipeline: wordpress-build-pipeline                   applicationURL:
      https://xxx.site.url                   wordpress:                     ci: false                     externalDatabase:                       host:
      xxx.xxx.us-west-2.rds.amazonaws.com                       user: xxx-wordpress-user-dev                       existingSecret:
      xxx-wordpress-dev-externaldb                       database: xxx-wordpress-dev                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    More difficult
      example of project containing `wordpress` and `frontend` component. Also defined
      for example all extra wordpress params that could be set:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami                   - git@github.com:saritasa-nest/xxx-kubernetes-aws.git               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: wordpress                   repository: xxx-wordpress                   pipeline:
      wordpress-build-pipeline                   applicationURL: https://xxx.site.url                   wordpress:                     imageTag:
      "5.8.1"                     repository_ssh_url: "git@github.com:saritasa-nest/xxx-wordpress.git"                     resources:                       requests:                         memory:
      512Mi                         cpu: 100m                     commonLabels:                       tech_stack:
      php                       application: wordpress                     wordpressTablePrefix:
      "qbf_"                     existingSecret: xxx-wordpress                     updateStrategy:                       type:
      RollingUpdate                       rollingUpdate:                         maxSurge:
      25%                         maxUnavailable: 25%                     smtp:                       host:
      mysmtp.site.url                       port: 1010                       user:
      myuser                       password: mypassword                     nodeSelector:                       tech_stack:
      php                       pvc: "true"                     podSecurityContext:                       enabled:
      true                       fsGroup: 1001                     containerSecurityContext:                       enabled:
      true                       runAsUser: 1001                     ci: true                     extraInitContainers:                       -
      name: build-frontend                         image: node:14                         imagePullPolicy:
      Always                         command:                           - bash                           -
      -c                           - |                             git -c core.sshCommand="ssh
      -i ~/.ssh/id_rsa" clone git@github.com:saritasa-nest/xxx.git -b develop ~/xxx                             cd
      ~/xxx                             npm install                             npm
      run build:embedded-questionnaire                             cp -Rf $(pwd)/dist/*
      /bitnami/wordpress/wp-content/                             echo "Copied built
      files into /bitnami/wordpress/wp-content/"                             ls -la
      /bitnami/wordpress/wp-content/                             echo "Done BUILD
      FRONTEND"                         volumeMounts:                         - mountPath:
      /bitnami/wordpress                           name: wordpress-data                           subPath:
      wordpress                         - mountPath: /home/node/.ssh/id_rsa                           name:
      xxx-ssh-key                           subPath: ssh-privatekey                         -
      mountPath: /home/node/.ssh/known_hosts                           name: github-known-hosts                           subPath:
      config.ssh                         securityContext:                           runAsNonRoot:
      true                           runAsUser: 1000                           allowPrivilegeEscalation:
      false                     extraVolumesSshKeySecret: xxx-wordpress-deploy-key                     extraVolumes:                     -
      name: xxx-ssh-key                       secret:                         secretName:
      xxx-deploy-key                     ingress:                       hostname:
      test.xxx.site.url                       annotations:                         kubernetes.io/ingress.class:
      "nginx"                         cert-manager.io/cluster-issuer: "letsencrypt-prod"                         nginx.ingress.kubernetes.io/proxy-body-size:
      100m                         nginx.ingress.kubernetes.io/client-max-body-size:
      100m                         nginx.ingress.kubernetes.io/server-snippet: |-                           add_header
      X-Robots-Tag "noindex, nofollow, nosnippet, noarchive";                         nginx.ingress.kubernetes.io/whitelist-source-range:
      |                           35.85.92.224/32,                           100.21.244.185/32                       extraHosts:                         -
      name: test.xxx.site.url                           path: /wp-admin                     externalDatabase:                       host:
      "xxx.xxx.us-west-2.rds.amazonaws.com"                       user: "xxx-wp-user-dev"                       existingSecret:
      "xxx-wordpress-dev-externaldb"                       database: "xxx-wp-dev"                     wordpressExtraConfigContent:
      |                       @ini_set(''WP_MEMORY_LIMIT'', ''512M'');                       @ini_set(''ALLOW_UNFILTERED_UPLOADS'',
      true);                     extraEnvVars:                       KEY: VALUE                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template                  - name: frontend                   repository:
      xxx-frontend                   pipeline: buildpack-frontend-build-pipeline                   applicationURL:
      https://app.xxx.site.url                   eventlistener:                     template:
      buildpack-frontend-build-pipeline-trigger-template                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/frontend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ``` '
    digest: 33fc8e3112546e37feea0780e6c37d9af1a7a74ea12e726216cf6198d2b0b386
    maintainers:
    - email: nospam@saritasa.com
      name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-apps
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-apps-0.1.23-dev/saritasa-tekton-apps-0.1.23-dev.tgz
    version: 0.1.23-dev
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2022-09-21T08:54:01.178747149Z"
    description: 'A Helm chart for tekton apps (rbac, eventlistener)  Implements:
      - dynamic records for eventlistener - PVCs - RBAC - configmaps for each app
      - triggerbindings for each app - kubernetes job to make sure the PVCs are bound
      and argocd marks the app as healthy - argocd project for each app - argocd application
      for each app component  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then declare dynamic list of projects (and associated components of that
      project like backend, api, frontend, etc) that would be dynamically added into
      the tekton''s eventlistener manifest.  Each component should be a separate git
      repository.  ```yaml --- apiVersion: argoproj.io/v1alpha1 kind: Application
      metadata:   name: tekton-apps   namespace: argo-cd   finalizers:   - resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "41" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-apps     helm:       values: |         environment: staging         gitBranchPrefixes:           -
      staging         storageClassName: gp3         nodeSelector:           ops: ''true''         aws:           region:
      "us-west-2"           dns: staging.site.com         defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com         argocd:           server:
      deploy.staging.site.com         eventlistener:           enableWebhookSecret:
      true         apps:           - project: vp             enabled: true             argocd:               labels:                 created-by:
      xxx                 ops-main: xxx                 ops-secondary: xxx                 pm:
      xxx                 tm: xxx               namespace: prod             mailList:
      vp@site.com             devopsMailList: devops+vp@site.com             jiraURL:
      https://site.atlassian.net/browse/vp             tektonURL: https://tekton.staging.site.com/#/namespaces/ci/pipelineruns             slack:
      client-vp-ci             kubernetesRepository:               name: vp-kubernetes-aws               branch:
      main               url: git@github.com:org-name/vp-kubernetes-aws.git              components:               -
      name: backend                 repository: vp-backend                 pipeline:
      buildpack-django-build-pipeline                 applicationURL: https://api.staging.site.com                 eventlistener:                   template:
      buildpack-django-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/backend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/builder:v1                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/runner:v1               -
      name: frontend                 repository: vp-frontend                 pipeline:
      buildpack-frontend-build-pipeline                 applicationURL: https://staging.site.com                 eventlistener:                   template:
      buildpack-frontend-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/frontend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/builder:full                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/runner:full                   -
      name: source_subpath                     value: dist/web          # make sure
      PVCs are bound after the chart is synced         # by temporarily mount them
      into short-live job.         runPostInstallMountPvcJob: false      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.16"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true    ```    Above helm chart creates a new ArgoCD project
      for each project in values, for each component in project''s components there
      is created a separate ArgoCD   application and required for Tekton ci/cd resources
      (triggerbindings, roles, configmaps, jobs, serviceaccounts, pvcs and etc).    #
      fill below parameters for each `project` block    - apps[PROJECT].environment
      - possbility to define custom project''s environment, needed for cases when
      need to deploy `dev` and `prod` envs to the same cluster. For example `xxx`
      dev     and prod both deployed in rocks EKS (not required)   - apps[PROJECT].enabled
      - boolean value to define whether the project enabled or not (required)   -
      apps[PROJECT].argocd.labels - labels which are added to ArgoCD project (required)   -
      apps[PROJECT].argocd.namespace - allowed for ArgoCD project namespace (required)   -
      apps[PROJECT].argocd.syncWave - ArgoCD project sync wave, i.e. sequence in which
      project should be synced (not required, default: "200")   - apps[PROJECT].argocd.sourceRepos[]
      - source repositories added to ArgoCD project (not required, default: [<apps[PROJECT].kubernetesRepository.url>])   -
      apps[PROJECT].argocd.extraDestinationNamespaces[] - adds extra destination namespaces
      for ArgoCD project to be able to create custom apps within project''s kubernetes
      repo (not required, default: null)   - apps[PROJECT].mailList - project''s team
      email address (required)   - apps[PROJECT].devopsMailList - project''s devops
      team email address (required)   - apps[PROJECT].jiraURL - project''s JIRA url
      (required)   - apps[PROJECT].tektonURL - link to Tekton pipelineruns used in
      Tekton ConfigMap as `TEKTON_URL` during Slack notification send (required)   -
      apps[PROJECT].slack - project''s Slack channel name (required)   - apps[PROJECT].kubernetesRepository.name
      - project''s kubernetes repository name used in ArgoCD application and Tekton
      TriggerBinding (may be absent and replaced with     `apps[PROJECT].components[NAME].argocd`
      and `apps[PROJECT].argocd.sourceRepos[]` blocks in case if project has no kubernetes
      repo)   - apps[PROJECT].kubernetesRepository.branch - project''s kubernetes
      repository branch used in ArgoCD application and Tekton TriggerBinding (may
      be absent and replaced     with `apps[PROJECT].components[NAME].argocd` and
      `apps[PROJECT].argocd.sourceRepos[]` blocks in case if project has no kubernetes
      repo)   - apps[PROJECT].kubernetesRepository.url - project''s kubernetes repository
      url used in ArgoCD application and Tekton TriggerBinding (may be absent and
      replaced with     `apps[PROJECT].components[NAME].argocd` and `apps[PROJECT].argocd.sourceRepos[]`
      blocks in case if project has no kubernetes repo)    Basically we have 2 different
      types of ci/cd - basic (buildpacks, kaniko) and wordpress ones. So depending
      on project''s component type you will need to fill different parameters.    #
      fill below parameters for each `component` block    - apps[PROJECT].components[NAME].repository
      - the name of the repository containing the code (may be absent in case of wordpress
      application without deployment, i.e. bolrdswp, taco,     saritasa-wordpress-demo)   -
      apps[PROJECT].components[NAME].pipeline - the name of the pipeline building
      the code from the repository above   - apps[PROJECT].components[NAME].argocd.source.syncWave
      - custom component ArgoCD application sync wave (default: "210")   - apps[PROJECT].components[NAME].argocd.source.path
      - path to directory responsible for kubernetes resources creation of the ArgoCD
      Application (default: kubernetes repo path for basic     projects "apps/<apps[PROJECT].components[NAME].name>/manifests/<environment>"
      or "null" for wordpress projects)   - apps[PROJECT].components[NAME].argocd.source.repoUrl
      - url of repository which should be used for ArgoCD Application (default: kubernetes
      repo for basic projects     "<apps[PROJECT].kubernetesRepository.url>" or `https://charts.bitnami.com/bitnami`
      for wordpress projects)   - apps[PROJECT].components[NAME].argocd.source.targetRevision
      - tag or branch in the repository for ArgoCD Application (default: kubernetes
      branch for basic projects     "<apps[PROJECT].kubernetesRepository.branch>"
      or "11.0.14" for wordpress projects)   - apps[PROJECT].components[NAME].argocd.ignoreDeploymentReplicasDiff
      - flag whether this exact ArgoCD application should ignore `Replicas` count
      differences for deployments. It may be needed for `staging` and `prod` environments
      which use HPA (default: false)   - apps[PROJECT].components[NAME].applicationURL
      - url that should be used in tekton build ConfigMap `APPLICATION_URL` param   -
      apps[PROJECT].components[NAME].tektonKubernetesRepoDeployKeyName - name of existing
      in kubernetes cluster secret with SSH key to kubernetes repository, used in
      `kustomize` deployment     step (i.e. addon-backend-deploy-key). This param
      sets by default to `<project>-kubernetes-aws-deploy-key` if project has `kubernetesRepository`
      param in values (actual only for basic     components, not wordpress)   - apps[PROJECT].components[NAME].eventlistener.template
      - the name of the trigger template for the component to be used   - apps[PROJECT].components[NAME].eventlistener.enableWebhookSecret
      - should you enable the git web hook for this particular app/component in the
      eventlistener configuration   - apps[PROJECT].components[NAME].eventlistener.filter
      - custom filter for the component of the eventlistener   - apps[PROJECT].components[NAME].eventlistener.extraOverlays
      - extra overlays to be added into the eventlistener for the component   - apps[PROJECT].components[NAME].eventlistener.eventTypes
      - github event types to trigger the ci/cd   - apps[PROJECT].components[NAME].eventlistener.gitWebhookBranches[]
      - list of branches, push to which triggers ci/cd   - apps[PROJECT].components[NAME].extraBuildConfigParams
      - additional key/values to be added into `build-pipeline-config configmap` ConfigMap
      associated with the app   - apps[PROJECT].components[NAME].triggerBinding -
      values to be added into the TriggerBinding manifest except default ones    What
      is important to know is that any key defined in apps[PROJECT].components[NAME].triggerBinding
      would be added as is   into the generated triggerbinding associated with your
      app. However the chart renders some default values based on the values   in
      this values.yaml file:      - application, project, environment, docker_registry,
      kubernetes_repository_ssh_url, kubernetes_branch, kubernetes_repository_kustomize_path,
      source_subpath (for basic components)     - application, project, environment,
      namespace (for wordpress components)     # fill below parameters block only
      for `wordpress` components    - apps[PROJECT].components[NAME].wordpress.imageTag
      - tag of the wordpress image (default: "5.7.2")   - apps[PROJECT].components[NAME].wordpress.repository_ssh_url
      - project''s wordpress repository SSH url (default: null, may be absent if project
      has no wordpress repo)   - apps[PROJECT].components[NAME].wordpress.resources
      - wordpress pod resources params (default: requests.cpu: 100m, requests.memory:
      128Mi)   - apps[PROJECT].components[NAME].wordpress.commonLabels - wordpress
      pod common labels (default: commonLabels.tech_stack: php, commonLabels.application:
      wordpress)   - apps[PROJECT].components[NAME].wordpress.wordpressTablePrefix
      - wordpress DB tables prefix (default: wp_)   - apps[PROJECT].components[NAME].wordpress.existingSecret
      - name of existing in kubernetes secret with wp admin auth info (default: "<project_name>-<component_name>-<env>",     i.e.
      "taco-wordpress-dev")   - apps[PROJECT].components[NAME].wordpress.updateStrategy
      - strategy that should be used for wordpress pod update (default: updateStrategy.type:
      RollingUpdate,     updateStrategy.rollingUpdate.maxSurge: 0%, updateStrategy.rollingUpdate.maxUnavailable:
      100%, i.e. stop old pod and then create a new one)   - apps[PROJECT].components[NAME].wordpress.smtp.host
      - SMTP host for sending emails (default: mailhog.mailhog.svc.cluster.local)   -
      apps[PROJECT].components[NAME].wordpress.smtp.port - SMTP port for sending emails
      (default: 1025)   - apps[PROJECT].components[NAME].wordpress.smtp.user - SMTP
      user for sending emails (default: <project_name>, i.e. taco)   - apps[PROJECT].components[NAME].wordpress.smtp.password
      - SMTP password for sending emails (default: anypassword)   - apps[PROJECT].components[NAME].wordpress.nodeSelector
      - wordpress pod node selector params (default: nodeSelector.tech_stack: php,
      nodeSelector.pvc: "true")   - apps[PROJECT].components[NAME].wordpress.podSecurityContext
      - wordpress pod''s security context params (default: podSecurityContext.enabled:
      true, podSecurityContext.fsGroup: 1000)   - apps[PROJECT].components[NAME].wordpress.containerSecurityContext
      - wordpress pod container''s security context params (default: containerSecurityContext.enabled:
      true,     containerSecurityContext.runAsUser: 1000)   - apps[PROJECT].components[NAME].wordpress.ci
      - boolean flag which defines whether wordpress project has ci/cd or not (default:
      true)   - apps[PROJECT].components[NAME].wordpress.extraInitContainers - extra
      ci/cd init containers if needed, enabled only if wordpress component has `ci`
      flag enabled (default: null)   - apps[PROJECT].components[NAME].wordpress.extraVolumesSshKeySecret
      - name of a secret with wordpress repository SSH url (default: "<project_name>-<component_name>-deploy-key",     i.e.
      "taco-wordpress-deploy-key")   - apps[PROJECT].components[NAME].wordpress.extraVolumes
      - extra volumes that might be needed to wordpress pod (default: null)   - apps[PROJECT].components[NAME].wordpress.ingress.hostname
      - wordpress ingress hostname (default: "<project_name>.saritasa.rocks", i.e.
      "taco.saritasa.rocks")   - apps[PROJECT].components[NAME].wordpress.ingress.annotations
      - wordpress ingress annotations (default: kubernetes.io/ingress.class: "nginx",
      cert-manager.io/cluster-issuer: "letsencrypt-prod",     nginx.ingress.kubernetes.io/proxy-body-size:
      100m, nginx.ingress.kubernetes.io/proxy-connect-timeout: "300", nginx.ingress.kubernetes.io/proxy-next-upstream-timeout:
      "300",     nginx.ingress.kubernetes.io/auth-type: basic, nginx.ingress.kubernetes.io/auth-secret:
      <ingress.authSecret>, nginx.ingress.kubernetes.io/auth-realm: "Authentication
      Required",     nginx.ingress.kubernetes.io/server-snippet: |-,   add_header
      X-Robots-Tag "noindex, nofollow, nosnippet, noarchive")   - apps[PROJECT].components[NAME].wordpress.ingress.authSecret
      - name of kubernetes secret that should be used in ingress for basic auth (default:
      "<project_name>-<compinent_name>-<env>-basic-auth",     i.e. "taco-wordpress-dev-basic-auth")   -
      apps[PROJECT].components[NAME].wordpress.ingress.extraHosts - list of extra
      hosts that may be defined in ingress (default: null)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.host
      - wordpress DB host (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.user
      - wordpress DB user (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.existingSecret
      - name of existing in kubernetes secret with DB user password (required)   -
      apps[PROJECT].components[NAME].wordpress.externalDatabase.database - wordpress
      DB name (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.port
      - wordpress DB port (default: 3306)   - apps[PROJECT].components[NAME].wordpress.wordpressExtraConfigContent
      - wordpress extra configs if needed (default: null)   - apps[PROJECT].components[NAME].wordpress.extraEnvVars
      - wordpress extra env vars if needed (default: null)    Example of values with
      extra `eventlistener` and `extraBuildConfigParams` in component:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           gitBranchPrefixes:             -
      staging           storageClassName: gp2           aws:             region: "us-west-2"             dns:
      staging.site.com           defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com           argocd:             server:
      deploy.staging.site.com           eventlistener:             enableWebhookSecret:
      true           apps:             - project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: prod               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.site.com/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack                   applicationURL: https://api.site.com                   eventlistener:                     template:
      buildpack-backend-build-pipeline-trigger-template                   extraBuildConfigParams:
      # what additional K/V pairs you want to add into the build-pipeline-config configmap                     KEY:
      value                   triggerBinding:                     - name: docker_registry_repository                       value:
      XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/backend                     - name:
      buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/runner:v1                 -
      name: frontend                   repository: xxx-frontend                   pipeline:
      buildpack                   applicationURL: https://site.com                   eventlistener:                     enableWebhookSecret:
      false                     filter: (body.ref.startsWith(''refs/heads/develop'')
      || body.ref.startsWith(''refs/heads/release/''))                     template:
      buildpack-frontend-build-pipeline-trigger-template                     extraOverlays:
      []                     # - key: truncated_sha                     #   expression:
      "body.head_commit.id.truncate(7)"                     eventTypes: ["pull_request",
      "push"]                   extraBuildConfigParams: {}                   triggerBinding:                     -
      name: docker_registry_repository                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/frontend                     -
      name: buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web            # make
      sure PVCs are bound after the chart is synced           # by temporarily mount
      them into short-live job.           runPostInstallMountPvcJob: false        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true    ```    Example of
      old application from `saritasa-clients` repo, which has no separate `kubernetes`
      repository. Here we replace `apps[PROJECT].kubernetesRepository` block with   `apps[PROJECT].argocd.sourceRepos`
      and `apps[PROJECT].components[NAME].argocd` block, also it is required to set
      `apps[PROJECT].components[NAME].tektonKubernetesRepoDeployKeyName`   in such
      a case to use correct secret with deploy key as far as there is no kubernetes
      repo that is used by default.    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      git@github.com:saritasa-nest/xxx-backend.git                   - git@github.com:saritasa-nest/xxx-frontend.git               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: backend                   repository:
      xxx-backend                   pipeline: buildpack-django-build-pipeline                   applicationURL:
      https://api.xxx.site.url                   argocd:                     source:                       path:
      .kubernetes/manifests/dev                       repoUrl: git@github.com:saritasa-nest/xxx-backend.git                       targetRevision:
      develop                   eventlistener:                     template: buildpack-django-build-pipeline-trigger-template                   tektonKubernetesRepoDeployKeyName:
      xxx-backend-deploy-key                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1                 -
      name: frontend                   repository: xxx-frontend                   pipeline:
      buildpack-frontend-build-pipeline                   applicationURL: https://xxx.site.url                   argocd:                     source:                       path:
      .kubernetes/manifests/dev                       repoUrl: git@github.com:saritasa-nest/xxx-frontend.git                       targetRevision:
      develop                   eventlistener:                     template: buildpack-frontend-build-pipeline-trigger-template                   tektonKubernetesRepoDeployKeyName:
      xxx-frontend-deploy-key                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/frontend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Example with
      creating an ArgoCD project and application with its custom `environment` (case
      when in common `staging` environment we need to create for some reason project
      with   `dev` environment). Here is added an extra `apps[PROJECT].environment`
      param, which overrides default `environment` in helm values for this project,
      and   `apps[PROJECT].components[NAME].eventlistener.gitWebhookBranches` param,
      which defines that ci/cd should be trigger on push to `develop` branch.    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack-django-build-pipeline                   applicationURL: https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Also there might
      a situation that you would like to provision custom utility ArgoCD Application
      in argo-cd from project''s kubernetes repo (for example VP project provisions   like
      this `jitsi` application). To reach this you might need to add an extra destination
      namespace to ArgoCD Project, you should use   `apps[PROJECT].argocd.extraDestinationNamespaces[]`
      param for that like in below example.    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev                 extraDestinationNamespaces:                   -
      argo-cd               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack-django-build-pipeline                   applicationURL: https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    If you want
      to enable ignoring deployment replicas count differences in ArgoCD application
      of your component add `apps[PROJECT].components[NAME].argocd.ignoreDeploymentReplicasDiff:
      true` flag like in the below example (it may be needed for `staging` and `prod`
      envs, where you have horizontal pod autoscheduling - HPA):    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev                 extraDestinationNamespaces:                   -
      argo-cd               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   argocd:                     ignoreDeploymentReplicasDiff:
      true                   pipeline: buildpack-django-build-pipeline                   applicationURL:
      https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Simple wordpress
      application example filled by default:    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: wordpress                   repository:
      xxx-wordpress                   pipeline: wordpress-build-pipeline                   applicationURL:
      https://xxx.site.url                   wordpress:                     repository_ssh_url:
      git@github.com:saritasa-nest/xxx-wordpress.git                     externalDatabase:                       host:
      xxx.xxx.us-west-2.rds.amazonaws.com                       user: xxx-wordpress-user-dev                       existingSecret:
      xxx-wordpress-dev-externaldb                       database: xxx-wordpress-dev                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Simple wordpress
      application example filled by default, but without ci/cd:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: wordpress                   repository:
      xxx-wordpress                   pipeline: wordpress-build-pipeline                   applicationURL:
      https://xxx.site.url                   wordpress:                     ci: false                     externalDatabase:                       host:
      xxx.xxx.us-west-2.rds.amazonaws.com                       user: xxx-wordpress-user-dev                       existingSecret:
      xxx-wordpress-dev-externaldb                       database: xxx-wordpress-dev                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    More difficult
      example of project containing `wordpress` and `frontend` component. Also defined
      for example all extra wordpress params that could be set:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami                   - git@github.com:saritasa-nest/xxx-kubernetes-aws.git               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: wordpress                   repository: xxx-wordpress                   pipeline:
      wordpress-build-pipeline                   applicationURL: https://xxx.site.url                   wordpress:                     imageTag:
      "5.8.1"                     repository_ssh_url: "git@github.com:saritasa-nest/xxx-wordpress.git"                     resources:                       requests:                         memory:
      512Mi                         cpu: 100m                     commonLabels:                       tech_stack:
      php                       application: wordpress                     wordpressTablePrefix:
      "qbf_"                     existingSecret: xxx-wordpress                     updateStrategy:                       type:
      RollingUpdate                       rollingUpdate:                         maxSurge:
      25%                         maxUnavailable: 25%                     smtp:                       host:
      mysmtp.site.url                       port: 1010                       user:
      myuser                       password: mypassword                     nodeSelector:                       tech_stack:
      php                       pvc: "true"                     podSecurityContext:                       enabled:
      true                       fsGroup: 1001                     containerSecurityContext:                       enabled:
      true                       runAsUser: 1001                     ci: true                     extraInitContainers:                       -
      name: build-frontend                         image: node:14                         imagePullPolicy:
      Always                         command:                           - bash                           -
      -c                           - |                             git -c core.sshCommand="ssh
      -i ~/.ssh/id_rsa" clone git@github.com:saritasa-nest/xxx.git -b develop ~/xxx                             cd
      ~/xxx                             npm install                             npm
      run build:embedded-questionnaire                             cp -Rf $(pwd)/dist/*
      /bitnami/wordpress/wp-content/                             echo "Copied built
      files into /bitnami/wordpress/wp-content/"                             ls -la
      /bitnami/wordpress/wp-content/                             echo "Done BUILD
      FRONTEND"                         volumeMounts:                         - mountPath:
      /bitnami/wordpress                           name: wordpress-data                           subPath:
      wordpress                         - mountPath: /home/node/.ssh/id_rsa                           name:
      xxx-ssh-key                           subPath: ssh-privatekey                         -
      mountPath: /home/node/.ssh/known_hosts                           name: github-known-hosts                           subPath:
      config.ssh                         securityContext:                           runAsNonRoot:
      true                           runAsUser: 1000                           allowPrivilegeEscalation:
      false                     extraVolumesSshKeySecret: xxx-wordpress-deploy-key                     extraVolumes:                     -
      name: xxx-ssh-key                       secret:                         secretName:
      xxx-deploy-key                     ingress:                       hostname:
      test.xxx.site.url                       annotations:                         kubernetes.io/ingress.class:
      "nginx"                         cert-manager.io/cluster-issuer: "letsencrypt-prod"                         nginx.ingress.kubernetes.io/proxy-body-size:
      100m                         nginx.ingress.kubernetes.io/client-max-body-size:
      100m                         nginx.ingress.kubernetes.io/server-snippet: |-                           add_header
      X-Robots-Tag "noindex, nofollow, nosnippet, noarchive";                         nginx.ingress.kubernetes.io/whitelist-source-range:
      |                           35.85.92.224/32,                           100.21.244.185/32                       extraHosts:                         -
      name: test.xxx.site.url                           path: /wp-admin                     externalDatabase:                       host:
      "xxx.xxx.us-west-2.rds.amazonaws.com"                       user: "xxx-wp-user-dev"                       existingSecret:
      "xxx-wordpress-dev-externaldb"                       database: "xxx-wp-dev"                     wordpressExtraConfigContent:
      |                       @ini_set(''WP_MEMORY_LIMIT'', ''512M'');                       @ini_set(''ALLOW_UNFILTERED_UPLOADS'',
      true);                     extraEnvVars:                       KEY: VALUE                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template                  - name: frontend                   repository:
      xxx-frontend                   pipeline: buildpack-frontend-build-pipeline                   applicationURL:
      https://app.xxx.site.url                   eventlistener:                     template:
      buildpack-frontend-build-pipeline-trigger-template                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/frontend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ``` '
    digest: 52c1b783c8386609a70388c5d99a4c2070bf6a66b65a8aab640b21b431d3e2de
    maintainers:
    - email: nospam@saritasa.com
      name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-apps
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-apps-0.1.23-dev/saritasa-tekton-apps-0.1.23-dev.tgz
    version: 0.1.23-dev
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2022-09-21T07:01:29.104183702Z"
    description: 'A Helm chart for tekton apps (rbac, eventlistener)  Implements:
      - dynamic records for eventlistener - PVCs - RBAC - configmaps for each app
      - triggerbindings for each app - kubernetes job to make sure the PVCs are bound
      and argocd marks the app as healthy - argocd project for each app - argocd application
      for each app component  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then declare dynamic list of projects (and associated components of that
      project like backend, api, frontend, etc) that would be dynamically added into
      the tekton''s eventlistener manifest.  Each component should be a separate git
      repository.  ```yaml --- apiVersion: argoproj.io/v1alpha1 kind: Application
      metadata:   name: tekton-apps   namespace: argo-cd   finalizers:   - resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "41" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-apps     helm:       values: |         environment: staging         gitBranchPrefixes:           -
      staging         storageClassName: gp3         nodeSelector:           ops: ''true''         aws:           region:
      "us-west-2"           dns: staging.site.com         defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com         argocd:           server:
      deploy.staging.site.com         eventlistener:           enableWebhookSecret:
      true         apps:           - project: vp             enabled: true             argocd:               labels:                 created-by:
      xxx                 ops-main: xxx                 ops-secondary: xxx                 pm:
      xxx                 tm: xxx               namespace: prod             mailList:
      vp@site.com             devopsMailList: devops+vp@site.com             jiraURL:
      https://site.atlassian.net/browse/vp             tektonURL: https://tekton.staging.site.com/#/namespaces/ci/pipelineruns             slack:
      client-vp-ci             kubernetesRepository:               name: vp-kubernetes-aws               branch:
      main               url: git@github.com:org-name/vp-kubernetes-aws.git              components:               -
      name: backend                 repository: vp-backend                 pipeline:
      buildpack-django-build-pipeline                 applicationURL: https://api.staging.site.com                 eventlistener:                   template:
      buildpack-django-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/backend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/builder:v1                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/runner:v1               -
      name: frontend                 repository: vp-frontend                 pipeline:
      buildpack-frontend-build-pipeline                 applicationURL: https://staging.site.com                 eventlistener:                   template:
      buildpack-frontend-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/frontend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/builder:full                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/runner:full                   -
      name: source_subpath                     value: dist/web          # make sure
      PVCs are bound after the chart is synced         # by temporarily mount them
      into short-live job.         runPostInstallMountPvcJob: false      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.16"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true    ```    Above helm chart creates a new ArgoCD project
      for each project in values, for each component in project''s components there
      is created a separate ArgoCD   application and required for Tekton ci/cd resources
      (triggerbindings, roles, configmaps, jobs, serviceaccounts, pvcs and etc).    #
      fill below parameters for each `project` block    - apps[PROJECT].environment
      - possbility to define custom project''s environment, needed for cases when
      need to deploy `dev` and `prod` envs to the same cluster. For example `xxx`
      dev     and prod both deployed in rocks EKS (not required)   - apps[PROJECT].enabled
      - boolean value to define whether the project enabled or not (required)   -
      apps[PROJECT].argocd.labels - labels which are added to ArgoCD project (required)   -
      apps[PROJECT].argocd.namespace - allowed for ArgoCD project namespace (required)   -
      apps[PROJECT].argocd.syncWave - ArgoCD project sync wave, i.e. sequence in which
      project should be synced (not required, default: "200")   - apps[PROJECT].argocd.sourceRepos[]
      - source repositories added to ArgoCD project (not required, default: [<apps[PROJECT].kubernetesRepository.url>])   -
      apps[PROJECT].argocd.extraDestinationNamespaces[] - adds extra destination namespaces
      for ArgoCD project to be able to create custom apps within project''s kubernetes
      repo (not required, default: null)   - apps[PROJECT].mailList - project''s team
      email address (required)   - apps[PROJECT].devopsMailList - project''s devops
      team email address (required)   - apps[PROJECT].jiraURL - project''s JIRA url
      (required)   - apps[PROJECT].tektonURL - link to Tekton pipelineruns used in
      Tekton ConfigMap as `TEKTON_URL` during Slack notification send (required)   -
      apps[PROJECT].slack - project''s Slack channel name (required)   - apps[PROJECT].kubernetesRepository.name
      - project''s kubernetes repository name used in ArgoCD application and Tekton
      TriggerBinding (may be absent and replaced with     `apps[PROJECT].components[NAME].argocd`
      and `apps[PROJECT].argocd.sourceRepos[]` blocks in case if project has no kubernetes
      repo)   - apps[PROJECT].kubernetesRepository.branch - project''s kubernetes
      repository branch used in ArgoCD application and Tekton TriggerBinding (may
      be absent and replaced     with `apps[PROJECT].components[NAME].argocd` and
      `apps[PROJECT].argocd.sourceRepos[]` blocks in case if project has no kubernetes
      repo)   - apps[PROJECT].kubernetesRepository.url - project''s kubernetes repository
      url used in ArgoCD application and Tekton TriggerBinding (may be absent and
      replaced with     `apps[PROJECT].components[NAME].argocd` and `apps[PROJECT].argocd.sourceRepos[]`
      blocks in case if project has no kubernetes repo)    Basically we have 2 different
      types of ci/cd - basic (buildpacks, kaniko) and wordpress ones. So depending
      on project''s component type you will need to fill different parameters.    #
      fill below parameters for each `component` block    - apps[PROJECT].components[NAME].repository
      - the name of the repository containing the code (may be absent in case of wordpress
      application without deployment, i.e. bolrdswp, taco,     saritasa-wordpress-demo)   -
      apps[PROJECT].components[NAME].pipeline - the name of the pipeline building
      the code from the repository above   - apps[PROJECT].components[NAME].argocd.source.syncWave
      - custom component ArgoCD application sync wave (default: "210")   - apps[PROJECT].components[NAME].argocd.source.path
      - path to directory responsible for kubernetes resources creation of the ArgoCD
      Application (default: kubernetes repo path for basic     projects "apps/<apps[PROJECT].components[NAME].name>/manifests/<environment>"
      or "null" for wordpress projects)   - apps[PROJECT].components[NAME].argocd.source.repoUrl
      - url of repository which should be used for ArgoCD Application (default: kubernetes
      repo for basic projects     "<apps[PROJECT].kubernetesRepository.url>" or `https://charts.bitnami.com/bitnami`
      for wordpress projects)   - apps[PROJECT].components[NAME].argocd.source.targetRevision
      - tag or branch in the repository for ArgoCD Application (default: kubernetes
      branch for basic projects     "<apps[PROJECT].kubernetesRepository.branch>"
      or "11.0.14" for wordpress projects)   - apps[PROJECT].components[NAME].argocd.ignoreDeploymentReplicasDiff
      - flag whether this exact ArgoCD application should ignore `Replicas` count
      differences for deployments. It may be needed for `staging` and `prod` environments
      which use HPA (default: false)   - apps[PROJECT].components[NAME].applicationURL
      - url that should be used in tekton build ConfigMap `APPLICATION_URL` param   -
      apps[PROJECT].components[NAME].tektonKubernetesRepoDeployKeyName - name of existing
      in kubernetes cluster secret with SSH key to kubernetes repository, used in
      `kustomize` deployment     step (i.e. addon-backend-deploy-key). This param
      sets by default to `<project>-kubernetes-aws-deploy-key` if project has `kubernetesRepository`
      param in values (actual only for basic     components, not wordpress)   - apps[PROJECT].components[NAME].eventlistener.template
      - the name of the trigger template for the component to be used   - apps[PROJECT].components[NAME].eventlistener.enableWebhookSecret
      - should you enable the git web hook for this particular app/component in the
      eventlistener configuration   - apps[PROJECT].components[NAME].eventlistener.filter
      - custom filter for the component of the eventlistener   - apps[PROJECT].components[NAME].eventlistener.extraOverlays
      - extra overlays to be added into the eventlistener for the component   - apps[PROJECT].components[NAME].eventlistener.eventTypes
      - github event types to trigger the ci/cd   - apps[PROJECT].components[NAME].eventlistener.gitWebhookBranches[]
      - list of branches, push to which triggers ci/cd   - apps[PROJECT].components[NAME].extraBuildConfigParams
      - additional key/values to be added into `build-pipeline-config configmap` ConfigMap
      associated with the app   - apps[PROJECT].components[NAME].triggerBinding -
      values to be added into the TriggerBinding manifest except default ones    What
      is important to know is that any key defined in apps[PROJECT].components[NAME].triggerBinding
      would be added as is   into the generated triggerbinding associated with your
      app. However the chart renders some default values based on the values   in
      this values.yaml file:      - application, project, environment, docker_registry,
      kubernetes_repository_ssh_url, kubernetes_branch, kubernetes_repository_kustomize_path,
      source_subpath (for basic components)     - application, project, environment,
      namespace (for wordpress components)     # fill below parameters block only
      for `wordpress` components    - apps[PROJECT].components[NAME].wordpress.imageTag
      - tag of the wordpress image (default: "5.7.2")   - apps[PROJECT].components[NAME].wordpress.repository_ssh_url
      - project''s wordpress repository SSH url (default: null, may be absent if project
      has no wordpress repo)   - apps[PROJECT].components[NAME].wordpress.resources
      - wordpress pod resources params (default: requests.cpu: 100m, requests.memory:
      128Mi)   - apps[PROJECT].components[NAME].wordpress.commonLabels - wordpress
      pod common labels (default: commonLabels.tech_stack: php, commonLabels.application:
      wordpress)   - apps[PROJECT].components[NAME].wordpress.wordpressTablePrefix
      - wordpress DB tables prefix (default: wp_)   - apps[PROJECT].components[NAME].wordpress.existingSecret
      - name of existing in kubernetes secret with wp admin auth info (default: "<project_name>-<component_name>-<env>",     i.e.
      "taco-wordpress-dev")   - apps[PROJECT].components[NAME].wordpress.updateStrategy
      - strategy that should be used for wordpress pod update (default: updateStrategy.type:
      RollingUpdate,     updateStrategy.rollingUpdate.maxSurge: 0%, updateStrategy.rollingUpdate.maxUnavailable:
      100%, i.e. stop old pod and then create a new one)   - apps[PROJECT].components[NAME].wordpress.smtp.host
      - SMTP host for sending emails (default: mailhog.mailhog.svc.cluster.local)   -
      apps[PROJECT].components[NAME].wordpress.smtp.port - SMTP port for sending emails
      (default: 1025)   - apps[PROJECT].components[NAME].wordpress.smtp.user - SMTP
      user for sending emails (default: <project_name>, i.e. taco)   - apps[PROJECT].components[NAME].wordpress.smtp.password
      - SMTP password for sending emails (default: anypassword)   - apps[PROJECT].components[NAME].wordpress.nodeSelector
      - wordpress pod node selector params (default: nodeSelector.tech_stack: php,
      nodeSelector.pvc: "true")   - apps[PROJECT].components[NAME].wordpress.podSecurityContext
      - wordpress pod''s security context params (default: podSecurityContext.enabled:
      true, podSecurityContext.fsGroup: 1000)   - apps[PROJECT].components[NAME].wordpress.containerSecurityContext
      - wordpress pod container''s security context params (default: containerSecurityContext.enabled:
      true,     containerSecurityContext.runAsUser: 1000)   - apps[PROJECT].components[NAME].wordpress.ci
      - boolean flag which defines whether wordpress project has ci/cd or not (default:
      true)   - apps[PROJECT].components[NAME].wordpress.extraInitContainers - extra
      ci/cd init containers if needed, enabled only if wordpress component has `ci`
      flag enabled (default: null)   - apps[PROJECT].components[NAME].wordpress.extraVolumesSshKeySecret
      - name of a secret with wordpress repository SSH url (default: "<project_name>-<component_name>-deploy-key",     i.e.
      "taco-wordpress-deploy-key")   - apps[PROJECT].components[NAME].wordpress.extraVolumes
      - extra volumes that might be needed to wordpress pod (default: null)   - apps[PROJECT].components[NAME].wordpress.ingress.hostname
      - wordpress ingress hostname (default: "<project_name>.saritasa.rocks", i.e.
      "taco.saritasa.rocks")   - apps[PROJECT].components[NAME].wordpress.ingress.annotations
      - wordpress ingress annotations (default: kubernetes.io/ingress.class: "nginx",
      cert-manager.io/cluster-issuer: "letsencrypt-prod",     nginx.ingress.kubernetes.io/proxy-body-size:
      100m, nginx.ingress.kubernetes.io/proxy-connect-timeout: "300", nginx.ingress.kubernetes.io/proxy-next-upstream-timeout:
      "300",     nginx.ingress.kubernetes.io/auth-type: basic, nginx.ingress.kubernetes.io/auth-secret:
      <ingress.authSecret>, nginx.ingress.kubernetes.io/auth-realm: "Authentication
      Required",     nginx.ingress.kubernetes.io/server-snippet: |-,   add_header
      X-Robots-Tag "noindex, nofollow, nosnippet, noarchive")   - apps[PROJECT].components[NAME].wordpress.ingress.authSecret
      - name of kubernetes secret that should be used in ingress for basic auth (default:
      "<project_name>-<compinent_name>-<env>-basic-auth",     i.e. "taco-wordpress-dev-basic-auth")   -
      apps[PROJECT].components[NAME].wordpress.ingress.extraHosts - list of extra
      hosts that may be defined in ingress (default: null)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.host
      - wordpress DB host (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.user
      - wordpress DB user (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.existingSecret
      - name of existing in kubernetes secret with DB user password (required)   -
      apps[PROJECT].components[NAME].wordpress.externalDatabase.database - wordpress
      DB name (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.port
      - wordpress DB port (default: 3306)   - apps[PROJECT].components[NAME].wordpress.wordpressExtraConfigContent
      - wordpress extra configs if needed (default: null)   - apps[PROJECT].components[NAME].wordpress.extraEnvVars
      - wordpress extra env vars if needed (default: null)    Example of values with
      extra `eventlistener` and `extraBuildConfigParams` in component:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           gitBranchPrefixes:             -
      staging           storageClassName: gp2           aws:             region: "us-west-2"             dns:
      staging.site.com           defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com           argocd:             server:
      deploy.staging.site.com           eventlistener:             enableWebhookSecret:
      true           apps:             - project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: prod               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.site.com/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack                   applicationURL: https://api.site.com                   eventlistener:                     template:
      buildpack-backend-build-pipeline-trigger-template                   extraBuildConfigParams:
      # what additional K/V pairs you want to add into the build-pipeline-config configmap                     KEY:
      value                   triggerBinding:                     - name: docker_registry_repository                       value:
      XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/backend                     - name:
      buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/runner:v1                 -
      name: frontend                   repository: xxx-frontend                   pipeline:
      buildpack                   applicationURL: https://site.com                   eventlistener:                     enableWebhookSecret:
      false                     filter: (body.ref.startsWith(''refs/heads/develop'')
      || body.ref.startsWith(''refs/heads/release/''))                     template:
      buildpack-frontend-build-pipeline-trigger-template                     extraOverlays:
      []                     # - key: truncated_sha                     #   expression:
      "body.head_commit.id.truncate(7)"                     eventTypes: ["pull_request",
      "push"]                   extraBuildConfigParams: {}                   triggerBinding:                     -
      name: docker_registry_repository                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/frontend                     -
      name: buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web            # make
      sure PVCs are bound after the chart is synced           # by temporarily mount
      them into short-live job.           runPostInstallMountPvcJob: false        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true    ```    Example of
      old application from `saritasa-clients` repo, which has no separate `kubernetes`
      repository. Here we replace `apps[PROJECT].kubernetesRepository` block with   `apps[PROJECT].argocd.sourceRepos`
      and `apps[PROJECT].components[NAME].argocd` block, also it is required to set
      `apps[PROJECT].components[NAME].tektonKubernetesRepoDeployKeyName`   in such
      a case to use correct secret with deploy key as far as there is no kubernetes
      repo that is used by default.    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      git@github.com:saritasa-nest/xxx-backend.git                   - git@github.com:saritasa-nest/xxx-frontend.git               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: backend                   repository:
      xxx-backend                   pipeline: buildpack-django-build-pipeline                   applicationURL:
      https://api.xxx.site.url                   argocd:                     source:                       path:
      .kubernetes/manifests/dev                       repoUrl: git@github.com:saritasa-nest/xxx-backend.git                       targetRevision:
      develop                   eventlistener:                     template: buildpack-django-build-pipeline-trigger-template                   tektonKubernetesRepoDeployKeyName:
      xxx-backend-deploy-key                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1                 -
      name: frontend                   repository: xxx-frontend                   pipeline:
      buildpack-frontend-build-pipeline                   applicationURL: https://xxx.site.url                   argocd:                     source:                       path:
      .kubernetes/manifests/dev                       repoUrl: git@github.com:saritasa-nest/xxx-frontend.git                       targetRevision:
      develop                   eventlistener:                     template: buildpack-frontend-build-pipeline-trigger-template                   tektonKubernetesRepoDeployKeyName:
      xxx-frontend-deploy-key                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/frontend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Example with
      creating an ArgoCD project and application with its custom `environment` (case
      when in common `staging` environment we need to create for some reason project
      with   `dev` environment). Here is added an extra `apps[PROJECT].environment`
      param, which overrides default `environment` in helm values for this project,
      and   `apps[PROJECT].components[NAME].eventlistener.gitWebhookBranches` param,
      which defines that ci/cd should be trigger on push to `develop` branch.    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack-django-build-pipeline                   applicationURL: https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Also there might
      a situation that you would like to provision custom utility ArgoCD Application
      in argo-cd from project''s kubernetes repo (for example VP project provisions   like
      this `jitsi` application). To reach this you might need to add an extra destination
      namespace to ArgoCD Project, you should use   `apps[PROJECT].argocd.extraDestinationNamespaces[]`
      param for that like in below example.    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev                 extraDestinationNamespaces:                   -
      argo-cd               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack-django-build-pipeline                   applicationURL: https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    If you want
      to enable ignoring deployment replicas count differences in ArgoCD application
      of your component add `apps[PROJECT].components[NAME].argocd.ignoreDeploymentReplicasDiff:
      true` flag like in the below example (it may be needed for `staging` and `prod`
      envs, where you have horizontal pod autoscheduling - HPA):    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev                 extraDestinationNamespaces:                   -
      argo-cd               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   argocd:                     ignoreDeploymentReplicasDiff:
      true                   pipeline: buildpack-django-build-pipeline                   applicationURL:
      https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Simple wordpress
      application example filled by default:    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: wordpress                   repository:
      xxx-wordpress                   pipeline: wordpress-build-pipeline                   applicationURL:
      https://xxx.site.url                   wordpress:                     repository_ssh_url:
      git@github.com:saritasa-nest/xxx-wordpress.git                     externalDatabase:                       host:
      xxx.xxx.us-west-2.rds.amazonaws.com                       user: xxx-wordpress-user-dev                       existingSecret:
      xxx-wordpress-dev-externaldb                       database: xxx-wordpress-dev                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Simple wordpress
      application example filled by default, but without ci/cd:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: wordpress                   repository:
      xxx-wordpress                   pipeline: wordpress-build-pipeline                   applicationURL:
      https://xxx.site.url                   wordpress:                     ci: false                     externalDatabase:                       host:
      xxx.xxx.us-west-2.rds.amazonaws.com                       user: xxx-wordpress-user-dev                       existingSecret:
      xxx-wordpress-dev-externaldb                       database: xxx-wordpress-dev                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    More difficult
      example of project containing `wordpress` and `frontend` component. Also defined
      for example all extra wordpress params that could be set:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami                   - git@github.com:saritasa-nest/xxx-kubernetes-aws.git               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: wordpress                   repository: xxx-wordpress                   pipeline:
      wordpress-build-pipeline                   applicationURL: https://xxx.site.url                   wordpress:                     imageTag:
      "5.8.1"                     repository_ssh_url: "git@github.com:saritasa-nest/xxx-wordpress.git"                     resources:                       requests:                         memory:
      512Mi                         cpu: 100m                     commonLabels:                       tech_stack:
      php                       application: wordpress                     wordpressTablePrefix:
      "qbf_"                     existingSecret: xxx-wordpress                     updateStrategy:                       type:
      RollingUpdate                       rollingUpdate:                         maxSurge:
      25%                         maxUnavailable: 25%                     smtp:                       host:
      mysmtp.site.url                       port: 1010                       user:
      myuser                       password: mypassword                     nodeSelector:                       tech_stack:
      php                       pvc: "true"                     podSecurityContext:                       enabled:
      true                       fsGroup: 1001                     containerSecurityContext:                       enabled:
      true                       runAsUser: 1001                     ci: true                     extraInitContainers:                       -
      name: build-frontend                         image: node:14                         imagePullPolicy:
      Always                         command:                           - bash                           -
      -c                           - |                             git -c core.sshCommand="ssh
      -i ~/.ssh/id_rsa" clone git@github.com:saritasa-nest/xxx.git -b develop ~/xxx                             cd
      ~/xxx                             npm install                             npm
      run build:embedded-questionnaire                             cp -Rf $(pwd)/dist/*
      /bitnami/wordpress/wp-content/                             echo "Copied built
      files into /bitnami/wordpress/wp-content/"                             ls -la
      /bitnami/wordpress/wp-content/                             echo "Done BUILD
      FRONTEND"                         volumeMounts:                         - mountPath:
      /bitnami/wordpress                           name: wordpress-data                           subPath:
      wordpress                         - mountPath: /home/node/.ssh/id_rsa                           name:
      xxx-ssh-key                           subPath: ssh-privatekey                         -
      mountPath: /home/node/.ssh/known_hosts                           name: github-known-hosts                           subPath:
      config.ssh                         securityContext:                           runAsNonRoot:
      true                           runAsUser: 1000                           allowPrivilegeEscalation:
      false                     extraVolumesSshKeySecret: xxx-wordpress-deploy-key                     extraVolumes:                     -
      name: xxx-ssh-key                       secret:                         secretName:
      xxx-deploy-key                     ingress:                       hostname:
      test.xxx.site.url                       annotations:                         kubernetes.io/ingress.class:
      "nginx"                         cert-manager.io/cluster-issuer: "letsencrypt-prod"                         nginx.ingress.kubernetes.io/proxy-body-size:
      100m                         nginx.ingress.kubernetes.io/client-max-body-size:
      100m                         nginx.ingress.kubernetes.io/server-snippet: |-                           add_header
      X-Robots-Tag "noindex, nofollow, nosnippet, noarchive";                         nginx.ingress.kubernetes.io/whitelist-source-range:
      |                           35.85.92.224/32,                           100.21.244.185/32                       extraHosts:                         -
      name: test.xxx.site.url                           path: /wp-admin                     externalDatabase:                       host:
      "xxx.xxx.us-west-2.rds.amazonaws.com"                       user: "xxx-wp-user-dev"                       existingSecret:
      "xxx-wordpress-dev-externaldb"                       database: "xxx-wp-dev"                     wordpressExtraConfigContent:
      |                       @ini_set(''WP_MEMORY_LIMIT'', ''512M'');                       @ini_set(''ALLOW_UNFILTERED_UPLOADS'',
      true);                     extraEnvVars:                       KEY: VALUE                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template                  - name: frontend                   repository:
      xxx-frontend                   pipeline: buildpack-frontend-build-pipeline                   applicationURL:
      https://app.xxx.site.url                   eventlistener:                     template:
      buildpack-frontend-build-pipeline-trigger-template                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/frontend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ``` '
    digest: 213c977cdd8581c47b024fb37c8253d8a8b954f0a2c5165c2e1967253b84eef4
    maintainers:
    - email: nospam@saritasa.com
      name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-apps
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-apps-0.1.23-dev/saritasa-tekton-apps-0.1.23-dev.tgz
    version: 0.1.23-dev
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2022-09-21T09:53:45.95616684Z"
    description: 'A Helm chart for tekton apps (rbac, eventlistener)  Implements:
      - dynamic records for eventlistener - PVCs - RBAC - configmaps for each app
      - triggerbindings for each app - kubernetes job to make sure the PVCs are bound
      and argocd marks the app as healthy - argocd project for each app - argocd application
      for each app component  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then declare dynamic list of projects (and associated components of that
      project like backend, api, frontend, etc) that would be dynamically added into
      the tekton''s eventlistener manifest.  Each component should be a separate git
      repository.  ```yaml --- apiVersion: argoproj.io/v1alpha1 kind: Application
      metadata:   name: tekton-apps   namespace: argo-cd   finalizers:   - resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "41" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-apps     helm:       values: |         environment: staging         gitBranchPrefixes:           -
      staging         storageClassName: gp3         nodeSelector:           ops: ''true''         aws:           region:
      "us-west-2"           dns: staging.site.com         defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com         argocd:           server:
      deploy.staging.site.com         eventlistener:           enableWebhookSecret:
      true         apps:           - project: vp             enabled: true             argocd:               labels:                 created-by:
      xxx                 ops-main: xxx                 ops-secondary: xxx                 pm:
      xxx                 tm: xxx               namespace: prod             mailList:
      vp@site.com             devopsMailList: devops+vp@site.com             jiraURL:
      https://site.atlassian.net/browse/vp             tektonURL: https://tekton.staging.site.com/#/namespaces/ci/pipelineruns             slack:
      client-vp-ci             kubernetesRepository:               name: vp-kubernetes-aws               branch:
      main               url: git@github.com:org-name/vp-kubernetes-aws.git              components:               -
      name: backend                 repository: vp-backend                 pipeline:
      buildpack-django-build-pipeline                 applicationURL: https://api.staging.site.com                 eventlistener:                   template:
      buildpack-django-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/backend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/builder:v1                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/runner:v1               -
      name: frontend                 repository: vp-frontend                 pipeline:
      buildpack-frontend-build-pipeline                 applicationURL: https://staging.site.com                 eventlistener:                   template:
      buildpack-frontend-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/frontend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/builder:full                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/runner:full                   -
      name: source_subpath                     value: dist/web          # make sure
      PVCs are bound after the chart is synced         # by temporarily mount them
      into short-live job.         runPostInstallMountPvcJob: false      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.16"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true    ```    Above helm chart creates a new ArgoCD project
      for each project in values, for each component in project''s components there
      is created a separate ArgoCD   application and required for Tekton ci/cd resources
      (triggerbindings, roles, configmaps, jobs, serviceaccounts, pvcs and etc).    #
      fill below parameters for each `project` block    - apps[PROJECT].environment
      - possbility to define custom project''s environment, needed for cases when
      need to deploy `dev` and `prod` envs to the same cluster. For example `xxx`
      dev     and prod both deployed in rocks EKS (not required)   - apps[PROJECT].enabled
      - boolean value to define whether the project enabled or not (required)   -
      apps[PROJECT].argocd.labels - labels which are added to ArgoCD project (required)   -
      apps[PROJECT].argocd.namespace - allowed for ArgoCD project namespace (required)   -
      apps[PROJECT].argocd.syncWave - ArgoCD project sync wave, i.e. sequence in which
      project should be synced (not required, default: "200")   - apps[PROJECT].argocd.sourceRepos[]
      - source repositories added to ArgoCD project (not required, default: [<apps[PROJECT].kubernetesRepository.url>])   -
      apps[PROJECT].argocd.extraDestinationNamespaces[] - adds extra destination namespaces
      for ArgoCD project to be able to create custom apps within project''s kubernetes
      repo (not required, default: null)   - apps[PROJECT].mailList - project''s team
      email address (required)   - apps[PROJECT].devopsMailList - project''s devops
      team email address (required)   - apps[PROJECT].jiraURL - project''s JIRA url
      (required)   - apps[PROJECT].tektonURL - link to Tekton pipelineruns used in
      Tekton ConfigMap as `TEKTON_URL` during Slack notification send (required)   -
      apps[PROJECT].slack - project''s Slack channel name (required)   - apps[PROJECT].kubernetesRepository.name
      - project''s kubernetes repository name used in ArgoCD application and Tekton
      TriggerBinding (may be absent and replaced with     `apps[PROJECT].components[NAME].argocd`
      and `apps[PROJECT].argocd.sourceRepos[]` blocks in case if project has no kubernetes
      repo)   - apps[PROJECT].kubernetesRepository.branch - project''s kubernetes
      repository branch used in ArgoCD application and Tekton TriggerBinding (may
      be absent and replaced     with `apps[PROJECT].components[NAME].argocd` and
      `apps[PROJECT].argocd.sourceRepos[]` blocks in case if project has no kubernetes
      repo)   - apps[PROJECT].kubernetesRepository.url - project''s kubernetes repository
      url used in ArgoCD application and Tekton TriggerBinding (may be absent and
      replaced with     `apps[PROJECT].components[NAME].argocd` and `apps[PROJECT].argocd.sourceRepos[]`
      blocks in case if project has no kubernetes repo)    Basically we have 2 different
      types of ci/cd - basic (buildpacks, kaniko) and wordpress ones. So depending
      on project''s component type you will need to fill different parameters.    #
      fill below parameters for each `component` block    - apps[PROJECT].components[NAME].repository
      - the name of the repository containing the code (may be absent in case of wordpress
      application without deployment, i.e. bolrdswp, taco,     saritasa-wordpress-demo)   -
      apps[PROJECT].components[NAME].pipeline - the name of the pipeline building
      the code from the repository above   - apps[PROJECT].components[NAME].argocd.source.syncWave
      - custom component ArgoCD application sync wave (default: "210")   - apps[PROJECT].components[NAME].argocd.source.path
      - path to directory responsible for kubernetes resources creation of the ArgoCD
      Application (default: kubernetes repo path for basic     projects "apps/<apps[PROJECT].components[NAME].name>/manifests/<environment>"
      or "null" for wordpress projects)   - apps[PROJECT].components[NAME].argocd.source.repoUrl
      - url of repository which should be used for ArgoCD Application (default: kubernetes
      repo for basic projects     "<apps[PROJECT].kubernetesRepository.url>" or `https://charts.bitnami.com/bitnami`
      for wordpress projects)   - apps[PROJECT].components[NAME].argocd.source.targetRevision
      - tag or branch in the repository for ArgoCD Application (default: kubernetes
      branch for basic projects     "<apps[PROJECT].kubernetesRepository.branch>"
      or "11.0.14" for wordpress projects)   - apps[PROJECT].components[NAME].argocd.ignoreDeploymentReplicasDiff
      - flag whether this exact ArgoCD application should ignore `Replicas` count
      differences for deployments. It may be needed for `staging` and `prod` environments
      which use HPA (default: false)   - apps[PROJECT].components[NAME].applicationURL
      - url that should be used in tekton build ConfigMap `APPLICATION_URL` param   -
      apps[PROJECT].components[NAME].tektonKubernetesRepoDeployKeyName - name of existing
      in kubernetes cluster secret with SSH key to kubernetes repository, used in
      `kustomize` deployment     step (i.e. addon-backend-deploy-key). This param
      sets by default to `<project>-kubernetes-aws-deploy-key` if project has `kubernetesRepository`
      param in values (actual only for basic     components, not wordpress)   - apps[PROJECT].components[NAME].eventlistener.template
      - the name of the trigger template for the component to be used   - apps[PROJECT].components[NAME].eventlistener.enableWebhookSecret
      - should you enable the git web hook for this particular app/component in the
      eventlistener configuration   - apps[PROJECT].components[NAME].eventlistener.filter
      - custom filter for the component of the eventlistener   - apps[PROJECT].components[NAME].eventlistener.extraOverlays
      - extra overlays to be added into the eventlistener for the component   - apps[PROJECT].components[NAME].eventlistener.eventTypes
      - github event types to trigger the ci/cd   - apps[PROJECT].components[NAME].eventlistener.gitWebhookBranches[]
      - list of branches, push to which triggers ci/cd   - apps[PROJECT].components[NAME].extraBuildConfigParams
      - additional key/values to be added into `build-pipeline-config configmap` ConfigMap
      associated with the app   - apps[PROJECT].components[NAME].triggerBinding -
      values to be added into the TriggerBinding manifest except default ones    What
      is important to know is that any key defined in apps[PROJECT].components[NAME].triggerBinding
      would be added as is   into the generated triggerbinding associated with your
      app. However the chart renders some default values based on the values   in
      this values.yaml file:      - application, project, environment, docker_registry,
      kubernetes_repository_ssh_url, kubernetes_branch, kubernetes_repository_kustomize_path,
      source_subpath (for basic components)     - application, project, environment,
      namespace (for wordpress components)     # fill below parameters block only
      for `wordpress` components    - apps[PROJECT].components[NAME].wordpress.imageTag
      - tag of the wordpress image (default: "5.7.2")   - apps[PROJECT].components[NAME].wordpress.repository_ssh_url
      - project''s wordpress repository SSH url (default: null, may be absent if project
      has no wordpress repo)   - apps[PROJECT].components[NAME].wordpress.resources
      - wordpress pod resources params (default: requests.cpu: 100m, requests.memory:
      128Mi)   - apps[PROJECT].components[NAME].wordpress.commonLabels - wordpress
      pod common labels (default: commonLabels.tech_stack: php, commonLabels.application:
      wordpress)   - apps[PROJECT].components[NAME].wordpress.wordpressTablePrefix
      - wordpress DB tables prefix (default: wp_)   - apps[PROJECT].components[NAME].wordpress.existingSecret
      - name of existing in kubernetes secret with wp admin auth info (default: "<project_name>-<component_name>-<env>",     i.e.
      "taco-wordpress-dev")   - apps[PROJECT].components[NAME].wordpress.updateStrategy
      - strategy that should be used for wordpress pod update (default: updateStrategy.type:
      RollingUpdate,     updateStrategy.rollingUpdate.maxSurge: 0%, updateStrategy.rollingUpdate.maxUnavailable:
      100%, i.e. stop old pod and then create a new one)   - apps[PROJECT].components[NAME].wordpress.smtp.host
      - SMTP host for sending emails (default: mailhog.mailhog.svc.cluster.local)   -
      apps[PROJECT].components[NAME].wordpress.smtp.port - SMTP port for sending emails
      (default: 1025)   - apps[PROJECT].components[NAME].wordpress.smtp.user - SMTP
      user for sending emails (default: <project_name>, i.e. taco)   - apps[PROJECT].components[NAME].wordpress.smtp.password
      - SMTP password for sending emails (default: anypassword)   - apps[PROJECT].components[NAME].wordpress.nodeSelector
      - wordpress pod node selector params (default: nodeSelector.tech_stack: php,
      nodeSelector.pvc: "true")   - apps[PROJECT].components[NAME].wordpress.podSecurityContext
      - wordpress pod''s security context params (default: podSecurityContext.enabled:
      true, podSecurityContext.fsGroup: 1000)   - apps[PROJECT].components[NAME].wordpress.containerSecurityContext
      - wordpress pod container''s security context params (default: containerSecurityContext.enabled:
      true,     containerSecurityContext.runAsUser: 1000)   - apps[PROJECT].components[NAME].wordpress.ci
      - boolean flag which defines whether wordpress project has ci/cd or not (default:
      true)   - apps[PROJECT].components[NAME].wordpress.extraInitContainers - extra
      ci/cd init containers if needed, enabled only if wordpress component has `ci`
      flag enabled (default: null)   - apps[PROJECT].components[NAME].wordpress.extraVolumesSshKeySecret
      - name of a secret with wordpress repository SSH url (default: "<project_name>-<component_name>-deploy-key",     i.e.
      "taco-wordpress-deploy-key")   - apps[PROJECT].components[NAME].wordpress.extraVolumes
      - extra volumes that might be needed to wordpress pod (default: null)   - apps[PROJECT].components[NAME].wordpress.ingress.hostname
      - wordpress ingress hostname (default: "<project_name>.saritasa.rocks", i.e.
      "taco.saritasa.rocks")   - apps[PROJECT].components[NAME].wordpress.ingress.annotations
      - wordpress ingress annotations (default: kubernetes.io/ingress.class: "nginx",
      cert-manager.io/cluster-issuer: "letsencrypt-prod",     nginx.ingress.kubernetes.io/proxy-body-size:
      100m, nginx.ingress.kubernetes.io/proxy-connect-timeout: "300", nginx.ingress.kubernetes.io/proxy-next-upstream-timeout:
      "300",     nginx.ingress.kubernetes.io/auth-type: basic, nginx.ingress.kubernetes.io/auth-secret:
      <ingress.authSecret>, nginx.ingress.kubernetes.io/auth-realm: "Authentication
      Required",     nginx.ingress.kubernetes.io/server-snippet: |-,   add_header
      X-Robots-Tag "noindex, nofollow, nosnippet, noarchive")   - apps[PROJECT].components[NAME].wordpress.ingress.authSecret
      - name of kubernetes secret that should be used in ingress for basic auth (default:
      "<project_name>-<compinent_name>-<env>-basic-auth",     i.e. "taco-wordpress-dev-basic-auth")   -
      apps[PROJECT].components[NAME].wordpress.ingress.extraHosts - list of extra
      hosts that may be defined in ingress (default: null)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.host
      - wordpress DB host (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.user
      - wordpress DB user (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.existingSecret
      - name of existing in kubernetes secret with DB user password (required)   -
      apps[PROJECT].components[NAME].wordpress.externalDatabase.database - wordpress
      DB name (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.port
      - wordpress DB port (default: 3306)   - apps[PROJECT].components[NAME].wordpress.wordpressExtraConfigContent
      - wordpress extra configs if needed (default: null)   - apps[PROJECT].components[NAME].wordpress.extraEnvVars
      - wordpress extra env vars if needed (default: null)    Example of values with
      extra `eventlistener` and `extraBuildConfigParams` in component:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           gitBranchPrefixes:             -
      staging           storageClassName: gp2           aws:             region: "us-west-2"             dns:
      staging.site.com           defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com           argocd:             server:
      deploy.staging.site.com           eventlistener:             enableWebhookSecret:
      true           apps:             - project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: prod               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.site.com/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack                   applicationURL: https://api.site.com                   eventlistener:                     template:
      buildpack-backend-build-pipeline-trigger-template                   extraBuildConfigParams:
      # what additional K/V pairs you want to add into the build-pipeline-config configmap                     KEY:
      value                   triggerBinding:                     - name: docker_registry_repository                       value:
      XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/backend                     - name:
      buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/runner:v1                 -
      name: frontend                   repository: xxx-frontend                   pipeline:
      buildpack                   applicationURL: https://site.com                   eventlistener:                     enableWebhookSecret:
      false                     filter: (body.ref.startsWith(''refs/heads/develop'')
      || body.ref.startsWith(''refs/heads/release/''))                     template:
      buildpack-frontend-build-pipeline-trigger-template                     extraOverlays:
      []                     # - key: truncated_sha                     #   expression:
      "body.head_commit.id.truncate(7)"                     eventTypes: ["pull_request",
      "push"]                   extraBuildConfigParams: {}                   triggerBinding:                     -
      name: docker_registry_repository                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/frontend                     -
      name: buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web            # make
      sure PVCs are bound after the chart is synced           # by temporarily mount
      them into short-live job.           runPostInstallMountPvcJob: false        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true    ```    Example of
      old application from `saritasa-clients` repo, which has no separate `kubernetes`
      repository. Here we replace `apps[PROJECT].kubernetesRepository` block with   `apps[PROJECT].argocd.sourceRepos`
      and `apps[PROJECT].components[NAME].argocd` block, also it is required to set
      `apps[PROJECT].components[NAME].tektonKubernetesRepoDeployKeyName`   in such
      a case to use correct secret with deploy key as far as there is no kubernetes
      repo that is used by default.    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      git@github.com:saritasa-nest/xxx-backend.git                   - git@github.com:saritasa-nest/xxx-frontend.git               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: backend                   repository:
      xxx-backend                   pipeline: buildpack-django-build-pipeline                   applicationURL:
      https://api.xxx.site.url                   argocd:                     source:                       path:
      .kubernetes/manifests/dev                       repoUrl: git@github.com:saritasa-nest/xxx-backend.git                       targetRevision:
      develop                   eventlistener:                     template: buildpack-django-build-pipeline-trigger-template                   tektonKubernetesRepoDeployKeyName:
      xxx-backend-deploy-key                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1                 -
      name: frontend                   repository: xxx-frontend                   pipeline:
      buildpack-frontend-build-pipeline                   applicationURL: https://xxx.site.url                   argocd:                     source:                       path:
      .kubernetes/manifests/dev                       repoUrl: git@github.com:saritasa-nest/xxx-frontend.git                       targetRevision:
      develop                   eventlistener:                     template: buildpack-frontend-build-pipeline-trigger-template                   tektonKubernetesRepoDeployKeyName:
      xxx-frontend-deploy-key                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/frontend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Example with
      creating an ArgoCD project and application with its custom `environment` (case
      when in common `staging` environment we need to create for some reason project
      with   `dev` environment). Here is added an extra `apps[PROJECT].environment`
      param, which overrides default `environment` in helm values for this project,
      and   `apps[PROJECT].components[NAME].eventlistener.gitWebhookBranches` param,
      which defines that ci/cd should be trigger on push to `develop` branch.    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack-django-build-pipeline                   applicationURL: https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Also there might
      a situation that you would like to provision custom utility ArgoCD Application
      in argo-cd from project''s kubernetes repo (for example VP project provisions   like
      this `jitsi` application). To reach this you might need to add an extra destination
      namespace to ArgoCD Project, you should use   `apps[PROJECT].argocd.extraDestinationNamespaces[]`
      param for that like in below example.    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev                 extraDestinationNamespaces:                   -
      argo-cd               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack-django-build-pipeline                   applicationURL: https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    If you want
      to enable ignoring deployment replicas count differences in ArgoCD application
      of your component add `apps[PROJECT].components[NAME].argocd.ignoreDeploymentReplicasDiff:
      true` flag like in the below example (it may be needed for `staging` and `prod`
      envs, where you have horizontal pod autoscheduling - HPA):    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev                 extraDestinationNamespaces:                   -
      argo-cd               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   argocd:                     ignoreDeploymentReplicasDiff:
      true                   pipeline: buildpack-django-build-pipeline                   applicationURL:
      https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Simple wordpress
      application example filled by default:    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: wordpress                   repository:
      xxx-wordpress                   pipeline: wordpress-build-pipeline                   applicationURL:
      https://xxx.site.url                   wordpress:                     repository_ssh_url:
      git@github.com:saritasa-nest/xxx-wordpress.git                     externalDatabase:                       host:
      xxx.xxx.us-west-2.rds.amazonaws.com                       user: xxx-wordpress-user-dev                       existingSecret:
      xxx-wordpress-dev-externaldb                       database: xxx-wordpress-dev                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Simple wordpress
      application example filled by default, but without ci/cd:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: wordpress                   repository:
      xxx-wordpress                   pipeline: wordpress-build-pipeline                   applicationURL:
      https://xxx.site.url                   wordpress:                     ci: false                     externalDatabase:                       host:
      xxx.xxx.us-west-2.rds.amazonaws.com                       user: xxx-wordpress-user-dev                       existingSecret:
      xxx-wordpress-dev-externaldb                       database: xxx-wordpress-dev                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    More difficult
      example of project containing `wordpress` and `frontend` component. Also defined
      for example all extra wordpress params that could be set:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami                   - git@github.com:saritasa-nest/xxx-kubernetes-aws.git               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: wordpress                   repository: xxx-wordpress                   pipeline:
      wordpress-build-pipeline                   applicationURL: https://xxx.site.url                   wordpress:                     imageTag:
      "5.8.1"                     repository_ssh_url: "git@github.com:saritasa-nest/xxx-wordpress.git"                     resources:                       requests:                         memory:
      512Mi                         cpu: 100m                     commonLabels:                       tech_stack:
      php                       application: wordpress                     wordpressTablePrefix:
      "qbf_"                     existingSecret: xxx-wordpress                     updateStrategy:                       type:
      RollingUpdate                       rollingUpdate:                         maxSurge:
      25%                         maxUnavailable: 25%                     smtp:                       host:
      mysmtp.site.url                       port: 1010                       user:
      myuser                       password: mypassword                     nodeSelector:                       tech_stack:
      php                       pvc: "true"                     podSecurityContext:                       enabled:
      true                       fsGroup: 1001                     containerSecurityContext:                       enabled:
      true                       runAsUser: 1001                     ci: true                     extraInitContainers:                       -
      name: build-frontend                         image: node:14                         imagePullPolicy:
      Always                         command:                           - bash                           -
      -c                           - |                             git -c core.sshCommand="ssh
      -i ~/.ssh/id_rsa" clone git@github.com:saritasa-nest/xxx.git -b develop ~/xxx                             cd
      ~/xxx                             npm install                             npm
      run build:embedded-questionnaire                             cp -Rf $(pwd)/dist/*
      /bitnami/wordpress/wp-content/                             echo "Copied built
      files into /bitnami/wordpress/wp-content/"                             ls -la
      /bitnami/wordpress/wp-content/                             echo "Done BUILD
      FRONTEND"                         volumeMounts:                         - mountPath:
      /bitnami/wordpress                           name: wordpress-data                           subPath:
      wordpress                         - mountPath: /home/node/.ssh/id_rsa                           name:
      xxx-ssh-key                           subPath: ssh-privatekey                         -
      mountPath: /home/node/.ssh/known_hosts                           name: github-known-hosts                           subPath:
      config.ssh                         securityContext:                           runAsNonRoot:
      true                           runAsUser: 1000                           allowPrivilegeEscalation:
      false                     extraVolumesSshKeySecret: xxx-wordpress-deploy-key                     extraVolumes:                     -
      name: xxx-ssh-key                       secret:                         secretName:
      xxx-deploy-key                     ingress:                       hostname:
      test.xxx.site.url                       annotations:                         kubernetes.io/ingress.class:
      "nginx"                         cert-manager.io/cluster-issuer: "letsencrypt-prod"                         nginx.ingress.kubernetes.io/proxy-body-size:
      100m                         nginx.ingress.kubernetes.io/client-max-body-size:
      100m                         nginx.ingress.kubernetes.io/server-snippet: |-                           add_header
      X-Robots-Tag "noindex, nofollow, nosnippet, noarchive";                         nginx.ingress.kubernetes.io/whitelist-source-range:
      |                           35.85.92.224/32,                           100.21.244.185/32                       extraHosts:                         -
      name: test.xxx.site.url                           path: /wp-admin                     externalDatabase:                       host:
      "xxx.xxx.us-west-2.rds.amazonaws.com"                       user: "xxx-wp-user-dev"                       existingSecret:
      "xxx-wordpress-dev-externaldb"                       database: "xxx-wp-dev"                     wordpressExtraConfigContent:
      |                       @ini_set(''WP_MEMORY_LIMIT'', ''512M'');                       @ini_set(''ALLOW_UNFILTERED_UPLOADS'',
      true);                     extraEnvVars:                       KEY: VALUE                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template                  - name: frontend                   repository:
      xxx-frontend                   pipeline: buildpack-frontend-build-pipeline                   applicationURL:
      https://app.xxx.site.url                   eventlistener:                     template:
      buildpack-frontend-build-pipeline-trigger-template                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/frontend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ``` '
    digest: fae7efb364dd388359dd0721dc184c1e0b8e80b38f4d1b894aab215a2a67f012
    maintainers:
    - email: nospam@saritasa.com
      name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-apps
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-apps-0.1.23-dev/saritasa-tekton-apps-0.1.23-dev.tgz
    version: 0.1.23-dev
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2022-09-21T11:08:59.213929951Z"
    description: 'A Helm chart for tekton apps (rbac, eventlistener)  Implements:
      - dynamic records for eventlistener - PVCs - RBAC - configmaps for each app
      - triggerbindings for each app - kubernetes job to make sure the PVCs are bound
      and argocd marks the app as healthy - argocd project for each app - argocd application
      for each app component  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then declare dynamic list of projects (and associated components of that
      project like backend, api, frontend, etc) that would be dynamically added into
      the tekton''s eventlistener manifest.  Each component should be a separate git
      repository.  ```yaml --- apiVersion: argoproj.io/v1alpha1 kind: Application
      metadata:   name: tekton-apps   namespace: argo-cd   finalizers:   - resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "41" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-apps     helm:       values: |         environment: staging         gitBranchPrefixes:           -
      staging         storageClassName: gp3         nodeSelector:           ops: ''true''         aws:           region:
      "us-west-2"           dns: staging.site.com         defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com         argocd:           server:
      deploy.staging.site.com         eventlistener:           enableWebhookSecret:
      true         apps:           - project: vp             enabled: true             argocd:               labels:                 created-by:
      xxx                 ops-main: xxx                 ops-secondary: xxx                 pm:
      xxx                 tm: xxx               namespace: prod             mailList:
      vp@site.com             devopsMailList: devops+vp@site.com             jiraURL:
      https://site.atlassian.net/browse/vp             tektonURL: https://tekton.staging.site.com/#/namespaces/ci/pipelineruns             slack:
      client-vp-ci             kubernetesRepository:               name: vp-kubernetes-aws               branch:
      main               url: git@github.com:org-name/vp-kubernetes-aws.git              components:               -
      name: backend                 repository: vp-backend                 pipeline:
      buildpack-django-build-pipeline                 applicationURL: https://api.staging.site.com                 eventlistener:                   template:
      buildpack-django-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/backend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/builder:v1                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/runner:v1               -
      name: frontend                 repository: vp-frontend                 pipeline:
      buildpack-frontend-build-pipeline                 applicationURL: https://staging.site.com                 eventlistener:                   template:
      buildpack-frontend-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/frontend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/builder:full                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/runner:full                   -
      name: source_subpath                     value: dist/web          # make sure
      PVCs are bound after the chart is synced         # by temporarily mount them
      into short-live job.         runPostInstallMountPvcJob: false      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.16"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true    ```    Above helm chart creates a new ArgoCD project
      for each project in values, for each component in project''s components there
      is created a separate ArgoCD   application and required for Tekton ci/cd resources
      (triggerbindings, roles, configmaps, jobs, serviceaccounts, pvcs and etc).    #
      fill below parameters for each `project` block    - apps[PROJECT].environment
      - possbility to define custom project''s environment, needed for cases when
      need to deploy `dev` and `prod` envs to the same cluster. For example `xxx`
      dev     and prod both deployed in rocks EKS (not required)   - apps[PROJECT].enabled
      - boolean value to define whether the project enabled or not (required)   -
      apps[PROJECT].argocd.labels - labels which are added to ArgoCD project (required)   -
      apps[PROJECT].argocd.namespace - allowed for ArgoCD project namespace (required)   -
      apps[PROJECT].argocd.syncWave - ArgoCD project sync wave, i.e. sequence in which
      project should be synced (not required, default: "200")   - apps[PROJECT].argocd.sourceRepos[]
      - source repositories added to ArgoCD project (not required, default: [<apps[PROJECT].kubernetesRepository.url>])   -
      apps[PROJECT].argocd.extraDestinationNamespaces[] - adds extra destination namespaces
      for ArgoCD project to be able to create custom apps within project''s kubernetes
      repo (not required, default: null)   - apps[PROJECT].mailList - project''s team
      email address (required)   - apps[PROJECT].devopsMailList - project''s devops
      team email address (required)   - apps[PROJECT].jiraURL - project''s JIRA url
      (required)   - apps[PROJECT].tektonURL - link to Tekton pipelineruns used in
      Tekton ConfigMap as `TEKTON_URL` during Slack notification send (required)   -
      apps[PROJECT].slack - project''s Slack channel name (required)   - apps[PROJECT].kubernetesRepository.name
      - project''s kubernetes repository name used in ArgoCD application and Tekton
      TriggerBinding (may be absent and replaced with     `apps[PROJECT].components[NAME].argocd`
      and `apps[PROJECT].argocd.sourceRepos[]` blocks in case if project has no kubernetes
      repo)   - apps[PROJECT].kubernetesRepository.branch - project''s kubernetes
      repository branch used in ArgoCD application and Tekton TriggerBinding (may
      be absent and replaced     with `apps[PROJECT].components[NAME].argocd` and
      `apps[PROJECT].argocd.sourceRepos[]` blocks in case if project has no kubernetes
      repo)   - apps[PROJECT].kubernetesRepository.url - project''s kubernetes repository
      url used in ArgoCD application and Tekton TriggerBinding (may be absent and
      replaced with     `apps[PROJECT].components[NAME].argocd` and `apps[PROJECT].argocd.sourceRepos[]`
      blocks in case if project has no kubernetes repo)    Basically we have 2 different
      types of ci/cd - basic (buildpacks, kaniko) and wordpress ones. So depending
      on project''s component type you will need to fill different parameters.    #
      fill below parameters for each `component` block    - apps[PROJECT].components[NAME].repository
      - the name of the repository containing the code (may be absent in case of wordpress
      application without deployment, i.e. bolrdswp, taco,     saritasa-wordpress-demo)   -
      apps[PROJECT].components[NAME].pipeline - the name of the pipeline building
      the code from the repository above   - apps[PROJECT].components[NAME].argocd.source.syncWave
      - custom component ArgoCD application sync wave (default: "210")   - apps[PROJECT].components[NAME].argocd.source.path
      - path to directory responsible for kubernetes resources creation of the ArgoCD
      Application (default: kubernetes repo path for basic     projects "apps/<apps[PROJECT].components[NAME].name>/manifests/<environment>"
      or "null" for wordpress projects)   - apps[PROJECT].components[NAME].argocd.source.repoUrl
      - url of repository which should be used for ArgoCD Application (default: kubernetes
      repo for basic projects     "<apps[PROJECT].kubernetesRepository.url>" or `https://charts.bitnami.com/bitnami`
      for wordpress projects)   - apps[PROJECT].components[NAME].argocd.source.targetRevision
      - tag or branch in the repository for ArgoCD Application (default: kubernetes
      branch for basic projects     "<apps[PROJECT].kubernetesRepository.branch>"
      or "11.0.14" for wordpress projects)   - apps[PROJECT].components[NAME].argocd.ignoreDeploymentReplicasDiff
      - flag whether this exact ArgoCD application should ignore `Replicas` count
      differences for deployments. It may be needed for `staging` and `prod` environments
      which use HPA (default: false)   - apps[PROJECT].components[NAME].applicationURL
      - url that should be used in tekton build ConfigMap `APPLICATION_URL` param   -
      apps[PROJECT].components[NAME].tektonKubernetesRepoDeployKeyName - name of existing
      in kubernetes cluster secret with SSH key to kubernetes repository, used in
      `kustomize` deployment     step (i.e. addon-backend-deploy-key). This param
      sets by default to `<project>-kubernetes-aws-deploy-key` if project has `kubernetesRepository`
      param in values (actual only for basic     components, not wordpress)   - apps[PROJECT].components[NAME].eventlistener.template
      - the name of the trigger template for the component to be used   - apps[PROJECT].components[NAME].eventlistener.enableWebhookSecret
      - should you enable the git web hook for this particular app/component in the
      eventlistener configuration   - apps[PROJECT].components[NAME].eventlistener.filter
      - custom filter for the component of the eventlistener   - apps[PROJECT].components[NAME].eventlistener.extraOverlays
      - extra overlays to be added into the eventlistener for the component   - apps[PROJECT].components[NAME].eventlistener.eventTypes
      - github event types to trigger the ci/cd   - apps[PROJECT].components[NAME].eventlistener.gitWebhookBranches[]
      - list of branches, push to which triggers ci/cd   - apps[PROJECT].components[NAME].extraBuildConfigParams
      - additional key/values to be added into `build-pipeline-config configmap` ConfigMap
      associated with the app   - apps[PROJECT].components[NAME].triggerBinding -
      values to be added into the TriggerBinding manifest except default ones    What
      is important to know is that any key defined in apps[PROJECT].components[NAME].triggerBinding
      would be added as is   into the generated triggerbinding associated with your
      app. However the chart renders some default values based on the values   in
      this values.yaml file:      - application, project, environment, docker_registry,
      kubernetes_repository_ssh_url, kubernetes_branch, kubernetes_repository_kustomize_path,
      source_subpath (for basic components)     - application, project, environment,
      namespace (for wordpress components)     # fill below parameters block only
      for `wordpress` components    - apps[PROJECT].components[NAME].wordpress.imageTag
      - tag of the wordpress image (default: "5.7.2")   - apps[PROJECT].components[NAME].wordpress.repository_ssh_url
      - project''s wordpress repository SSH url (default: null, may be absent if project
      has no wordpress repo)   - apps[PROJECT].components[NAME].wordpress.resources
      - wordpress pod resources params (default: requests.cpu: 100m, requests.memory:
      128Mi)   - apps[PROJECT].components[NAME].wordpress.commonLabels - wordpress
      pod common labels (default: commonLabels.tech_stack: php, commonLabels.application:
      wordpress)   - apps[PROJECT].components[NAME].wordpress.wordpressTablePrefix
      - wordpress DB tables prefix (default: wp_)   - apps[PROJECT].components[NAME].wordpress.existingSecret
      - name of existing in kubernetes secret with wp admin auth info (default: "<project_name>-<component_name>-<env>",     i.e.
      "taco-wordpress-dev")   - apps[PROJECT].components[NAME].wordpress.updateStrategy
      - strategy that should be used for wordpress pod update (default: updateStrategy.type:
      RollingUpdate,     updateStrategy.rollingUpdate.maxSurge: 0%, updateStrategy.rollingUpdate.maxUnavailable:
      100%, i.e. stop old pod and then create a new one)   - apps[PROJECT].components[NAME].wordpress.smtp.host
      - SMTP host for sending emails (default: mailhog.mailhog.svc.cluster.local)   -
      apps[PROJECT].components[NAME].wordpress.smtp.port - SMTP port for sending emails
      (default: 1025)   - apps[PROJECT].components[NAME].wordpress.smtp.user - SMTP
      user for sending emails (default: <project_name>, i.e. taco)   - apps[PROJECT].components[NAME].wordpress.smtp.password
      - SMTP password for sending emails (default: anypassword)   - apps[PROJECT].components[NAME].wordpress.nodeSelector
      - wordpress pod node selector params (default: nodeSelector.tech_stack: php,
      nodeSelector.pvc: "true")   - apps[PROJECT].components[NAME].wordpress.podSecurityContext
      - wordpress pod''s security context params (default: podSecurityContext.enabled:
      true, podSecurityContext.fsGroup: 1000)   - apps[PROJECT].components[NAME].wordpress.containerSecurityContext
      - wordpress pod container''s security context params (default: containerSecurityContext.enabled:
      true,     containerSecurityContext.runAsUser: 1000)   - apps[PROJECT].components[NAME].wordpress.ci
      - boolean flag which defines whether wordpress project has ci/cd or not (default:
      true)   - apps[PROJECT].components[NAME].wordpress.extraInitContainers - extra
      ci/cd init containers if needed, enabled only if wordpress component has `ci`
      flag enabled (default: null)   - apps[PROJECT].components[NAME].wordpress.extraVolumesSshKeySecret
      - name of a secret with wordpress repository SSH url (default: "<project_name>-<component_name>-deploy-key",     i.e.
      "taco-wordpress-deploy-key")   - apps[PROJECT].components[NAME].wordpress.extraVolumes
      - extra volumes that might be needed to wordpress pod (default: null)   - apps[PROJECT].components[NAME].wordpress.ingress.hostname
      - wordpress ingress hostname (default: "<project_name>.saritasa.rocks", i.e.
      "taco.saritasa.rocks")   - apps[PROJECT].components[NAME].wordpress.ingress.annotations
      - wordpress ingress annotations (default: kubernetes.io/ingress.class: "nginx",
      cert-manager.io/cluster-issuer: "letsencrypt-prod",     nginx.ingress.kubernetes.io/proxy-body-size:
      100m, nginx.ingress.kubernetes.io/proxy-connect-timeout: "300", nginx.ingress.kubernetes.io/proxy-next-upstream-timeout:
      "300",     nginx.ingress.kubernetes.io/auth-type: basic, nginx.ingress.kubernetes.io/auth-secret:
      <ingress.authSecret>, nginx.ingress.kubernetes.io/auth-realm: "Authentication
      Required",     nginx.ingress.kubernetes.io/server-snippet: |-,   add_header
      X-Robots-Tag "noindex, nofollow, nosnippet, noarchive")   - apps[PROJECT].components[NAME].wordpress.ingress.authSecret
      - name of kubernetes secret that should be used in ingress for basic auth (default:
      "<project_name>-<compinent_name>-<env>-basic-auth",     i.e. "taco-wordpress-dev-basic-auth")   -
      apps[PROJECT].components[NAME].wordpress.ingress.extraHosts - list of extra
      hosts that may be defined in ingress (default: null)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.host
      - wordpress DB host (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.user
      - wordpress DB user (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.existingSecret
      - name of existing in kubernetes secret with DB user password (required)   -
      apps[PROJECT].components[NAME].wordpress.externalDatabase.database - wordpress
      DB name (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.port
      - wordpress DB port (default: 3306)   - apps[PROJECT].components[NAME].wordpress.wordpressExtraConfigContent
      - wordpress extra configs if needed (default: null)   - apps[PROJECT].components[NAME].wordpress.extraEnvVars
      - wordpress extra env vars if needed (default: null)    Example of values with
      extra `eventlistener` and `extraBuildConfigParams` in component:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           gitBranchPrefixes:             -
      staging           storageClassName: gp2           aws:             region: "us-west-2"             dns:
      staging.site.com           defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com           argocd:             server:
      deploy.staging.site.com           eventlistener:             enableWebhookSecret:
      true           apps:             - project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: prod               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.site.com/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack                   applicationURL: https://api.site.com                   eventlistener:                     template:
      buildpack-backend-build-pipeline-trigger-template                   extraBuildConfigParams:
      # what additional K/V pairs you want to add into the build-pipeline-config configmap                     KEY:
      value                   triggerBinding:                     - name: docker_registry_repository                       value:
      XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/backend                     - name:
      buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/runner:v1                 -
      name: frontend                   repository: xxx-frontend                   pipeline:
      buildpack                   applicationURL: https://site.com                   eventlistener:                     enableWebhookSecret:
      false                     filter: (body.ref.startsWith(''refs/heads/develop'')
      || body.ref.startsWith(''refs/heads/release/''))                     template:
      buildpack-frontend-build-pipeline-trigger-template                     extraOverlays:
      []                     # - key: truncated_sha                     #   expression:
      "body.head_commit.id.truncate(7)"                     eventTypes: ["pull_request",
      "push"]                   extraBuildConfigParams: {}                   triggerBinding:                     -
      name: docker_registry_repository                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/frontend                     -
      name: buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web            # make
      sure PVCs are bound after the chart is synced           # by temporarily mount
      them into short-live job.           runPostInstallMountPvcJob: false        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true    ```    Example of
      old application from `saritasa-clients` repo, which has no separate `kubernetes`
      repository. Here we replace `apps[PROJECT].kubernetesRepository` block with   `apps[PROJECT].argocd.sourceRepos`
      and `apps[PROJECT].components[NAME].argocd` block, also it is required to set
      `apps[PROJECT].components[NAME].tektonKubernetesRepoDeployKeyName`   in such
      a case to use correct secret with deploy key as far as there is no kubernetes
      repo that is used by default.    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      git@github.com:saritasa-nest/xxx-backend.git                   - git@github.com:saritasa-nest/xxx-frontend.git               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: backend                   repository:
      xxx-backend                   pipeline: buildpack-django-build-pipeline                   applicationURL:
      https://api.xxx.site.url                   argocd:                     source:                       path:
      .kubernetes/manifests/dev                       repoUrl: git@github.com:saritasa-nest/xxx-backend.git                       targetRevision:
      develop                   eventlistener:                     template: buildpack-django-build-pipeline-trigger-template                   tektonKubernetesRepoDeployKeyName:
      xxx-backend-deploy-key                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1                 -
      name: frontend                   repository: xxx-frontend                   pipeline:
      buildpack-frontend-build-pipeline                   applicationURL: https://xxx.site.url                   argocd:                     source:                       path:
      .kubernetes/manifests/dev                       repoUrl: git@github.com:saritasa-nest/xxx-frontend.git                       targetRevision:
      develop                   eventlistener:                     template: buildpack-frontend-build-pipeline-trigger-template                   tektonKubernetesRepoDeployKeyName:
      xxx-frontend-deploy-key                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/frontend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Example with
      creating an ArgoCD project and application with its custom `environment` (case
      when in common `staging` environment we need to create for some reason project
      with   `dev` environment). Here is added an extra `apps[PROJECT].environment`
      param, which overrides default `environment` in helm values for this project,
      and   `apps[PROJECT].components[NAME].eventlistener.gitWebhookBranches` param,
      which defines that ci/cd should be trigger on push to `develop` branch.    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack-django-build-pipeline                   applicationURL: https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Also there might
      a situation that you would like to provision custom utility ArgoCD Application
      in argo-cd from project''s kubernetes repo (for example VP project provisions   like
      this `jitsi` application). To reach this you might need to add an extra destination
      namespace to ArgoCD Project, you should use   `apps[PROJECT].argocd.extraDestinationNamespaces[]`
      param for that like in below example.    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev                 extraDestinationNamespaces:                   -
      argo-cd               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack-django-build-pipeline                   applicationURL: https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    If you want
      to enable ignoring deployment replicas count differences in ArgoCD application
      of your component add `apps[PROJECT].components[NAME].argocd.ignoreDeploymentReplicasDiff:
      true` flag like in the below example (it may be needed for `staging` and `prod`
      envs, where you have horizontal pod autoscheduling - HPA):    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev                 extraDestinationNamespaces:                   -
      argo-cd               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   argocd:                     ignoreDeploymentReplicasDiff:
      true                   pipeline: buildpack-django-build-pipeline                   applicationURL:
      https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Simple wordpress
      application example filled by default:    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: wordpress                   repository:
      xxx-wordpress                   pipeline: wordpress-build-pipeline                   applicationURL:
      https://xxx.site.url                   wordpress:                     repository_ssh_url:
      git@github.com:saritasa-nest/xxx-wordpress.git                     externalDatabase:                       host:
      xxx.xxx.us-west-2.rds.amazonaws.com                       user: xxx-wordpress-user-dev                       existingSecret:
      xxx-wordpress-dev-externaldb                       database: xxx-wordpress-dev                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Simple wordpress
      application example filled by default, but without ci/cd:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: wordpress                   repository:
      xxx-wordpress                   pipeline: wordpress-build-pipeline                   applicationURL:
      https://xxx.site.url                   wordpress:                     ci: false                     externalDatabase:                       host:
      xxx.xxx.us-west-2.rds.amazonaws.com                       user: xxx-wordpress-user-dev                       existingSecret:
      xxx-wordpress-dev-externaldb                       database: xxx-wordpress-dev                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    More difficult
      example of project containing `wordpress` and `frontend` component. Also defined
      for example all extra wordpress params that could be set:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami                   - git@github.com:saritasa-nest/xxx-kubernetes-aws.git               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: wordpress                   repository: xxx-wordpress                   pipeline:
      wordpress-build-pipeline                   applicationURL: https://xxx.site.url                   wordpress:                     imageTag:
      "5.8.1"                     repository_ssh_url: "git@github.com:saritasa-nest/xxx-wordpress.git"                     resources:                       requests:                         memory:
      512Mi                         cpu: 100m                     commonLabels:                       tech_stack:
      php                       application: wordpress                     wordpressTablePrefix:
      "qbf_"                     existingSecret: xxx-wordpress                     updateStrategy:                       type:
      RollingUpdate                       rollingUpdate:                         maxSurge:
      25%                         maxUnavailable: 25%                     smtp:                       host:
      mysmtp.site.url                       port: 1010                       user:
      myuser                       password: mypassword                     nodeSelector:                       tech_stack:
      php                       pvc: "true"                     podSecurityContext:                       enabled:
      true                       fsGroup: 1001                     containerSecurityContext:                       enabled:
      true                       runAsUser: 1001                     ci: true                     extraInitContainers:                       -
      name: build-frontend                         image: node:14                         imagePullPolicy:
      Always                         command:                           - bash                           -
      -c                           - |                             git -c core.sshCommand="ssh
      -i ~/.ssh/id_rsa" clone git@github.com:saritasa-nest/xxx.git -b develop ~/xxx                             cd
      ~/xxx                             npm install                             npm
      run build:embedded-questionnaire                             cp -Rf $(pwd)/dist/*
      /bitnami/wordpress/wp-content/                             echo "Copied built
      files into /bitnami/wordpress/wp-content/"                             ls -la
      /bitnami/wordpress/wp-content/                             echo "Done BUILD
      FRONTEND"                         volumeMounts:                         - mountPath:
      /bitnami/wordpress                           name: wordpress-data                           subPath:
      wordpress                         - mountPath: /home/node/.ssh/id_rsa                           name:
      xxx-ssh-key                           subPath: ssh-privatekey                         -
      mountPath: /home/node/.ssh/known_hosts                           name: github-known-hosts                           subPath:
      config.ssh                         securityContext:                           runAsNonRoot:
      true                           runAsUser: 1000                           allowPrivilegeEscalation:
      false                     extraVolumesSshKeySecret: xxx-wordpress-deploy-key                     extraVolumes:                     -
      name: xxx-ssh-key                       secret:                         secretName:
      xxx-deploy-key                     ingress:                       hostname:
      test.xxx.site.url                       annotations:                         kubernetes.io/ingress.class:
      "nginx"                         cert-manager.io/cluster-issuer: "letsencrypt-prod"                         nginx.ingress.kubernetes.io/proxy-body-size:
      100m                         nginx.ingress.kubernetes.io/client-max-body-size:
      100m                         nginx.ingress.kubernetes.io/server-snippet: |-                           add_header
      X-Robots-Tag "noindex, nofollow, nosnippet, noarchive";                         nginx.ingress.kubernetes.io/whitelist-source-range:
      |                           35.85.92.224/32,                           100.21.244.185/32                       extraHosts:                         -
      name: test.xxx.site.url                           path: /wp-admin                     externalDatabase:                       host:
      "xxx.xxx.us-west-2.rds.amazonaws.com"                       user: "xxx-wp-user-dev"                       existingSecret:
      "xxx-wordpress-dev-externaldb"                       database: "xxx-wp-dev"                     wordpressExtraConfigContent:
      |                       @ini_set(''WP_MEMORY_LIMIT'', ''512M'');                       @ini_set(''ALLOW_UNFILTERED_UPLOADS'',
      true);                     extraEnvVars:                       KEY: VALUE                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template                  - name: frontend                   repository:
      xxx-frontend                   pipeline: buildpack-frontend-build-pipeline                   applicationURL:
      https://app.xxx.site.url                   eventlistener:                     template:
      buildpack-frontend-build-pipeline-trigger-template                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/frontend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ``` '
    digest: b4650bd5b5424418d533ec6febfe5681d5738fd62526f7e4dfebf648d1846cd3
    maintainers:
    - email: nospam@saritasa.com
      name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-apps
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-apps-0.1.23-dev/saritasa-tekton-apps-0.1.23-dev.tgz
    version: 0.1.23-dev
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2022-09-21T11:25:15.966421085Z"
    description: 'A Helm chart for tekton apps (rbac, eventlistener)  Implements:
      - dynamic records for eventlistener - PVCs - RBAC - configmaps for each app
      - triggerbindings for each app - kubernetes job to make sure the PVCs are bound
      and argocd marks the app as healthy - argocd project for each app - argocd application
      for each app component  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then declare dynamic list of projects (and associated components of that
      project like backend, api, frontend, etc) that would be dynamically added into
      the tekton''s eventlistener manifest.  Each component should be a separate git
      repository.  ```yaml --- apiVersion: argoproj.io/v1alpha1 kind: Application
      metadata:   name: tekton-apps   namespace: argo-cd   finalizers:   - resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "41" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-apps     helm:       values: |         environment: staging         gitBranchPrefixes:           -
      staging         storageClassName: gp3         nodeSelector:           ops: ''true''         aws:           region:
      "us-west-2"           dns: staging.site.com         defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com         argocd:           server:
      deploy.staging.site.com         eventlistener:           enableWebhookSecret:
      true         apps:           - project: vp             enabled: true             argocd:               labels:                 created-by:
      xxx                 ops-main: xxx                 ops-secondary: xxx                 pm:
      xxx                 tm: xxx               namespace: prod             mailList:
      vp@site.com             devopsMailList: devops+vp@site.com             jiraURL:
      https://site.atlassian.net/browse/vp             tektonURL: https://tekton.staging.site.com/#/namespaces/ci/pipelineruns             slack:
      client-vp-ci             kubernetesRepository:               name: vp-kubernetes-aws               branch:
      main               url: git@github.com:org-name/vp-kubernetes-aws.git              components:               -
      name: backend                 repository: vp-backend                 pipeline:
      buildpack-django-build-pipeline                 applicationURL: https://api.staging.site.com                 eventlistener:                   template:
      buildpack-django-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/backend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/builder:v1                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/runner:v1               -
      name: frontend                 repository: vp-frontend                 pipeline:
      buildpack-frontend-build-pipeline                 applicationURL: https://staging.site.com                 eventlistener:                   template:
      buildpack-frontend-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/frontend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/builder:full                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/runner:full                   -
      name: source_subpath                     value: dist/web          # make sure
      PVCs are bound after the chart is synced         # by temporarily mount them
      into short-live job.         runPostInstallMountPvcJob: false      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.16"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true    ```    Above helm chart creates a new ArgoCD project
      for each project in values, for each component in project''s components there
      is created a separate ArgoCD   application and required for Tekton ci/cd resources
      (triggerbindings, roles, configmaps, jobs, serviceaccounts, pvcs and etc).    #
      fill below parameters for each `project` block    - apps[PROJECT].environment
      - possbility to define custom project''s environment, needed for cases when
      need to deploy `dev` and `prod` envs to the same cluster. For example `xxx`
      dev     and prod both deployed in rocks EKS (not required)   - apps[PROJECT].enabled
      - boolean value to define whether the project enabled or not (required)   -
      apps[PROJECT].argocd.labels - labels which are added to ArgoCD project (required)   -
      apps[PROJECT].argocd.namespace - allowed for ArgoCD project namespace (required)   -
      apps[PROJECT].argocd.syncWave - ArgoCD project sync wave, i.e. sequence in which
      project should be synced (not required, default: "200")   - apps[PROJECT].argocd.sourceRepos[]
      - source repositories added to ArgoCD project (not required, default: [<apps[PROJECT].kubernetesRepository.url>])   -
      apps[PROJECT].argocd.extraDestinationNamespaces[] - adds extra destination namespaces
      for ArgoCD project to be able to create custom apps within project''s kubernetes
      repo (not required, default: null)   - apps[PROJECT].mailList - project''s team
      email address (required)   - apps[PROJECT].devopsMailList - project''s devops
      team email address (required)   - apps[PROJECT].jiraURL - project''s JIRA url
      (required)   - apps[PROJECT].tektonURL - link to Tekton pipelineruns used in
      Tekton ConfigMap as `TEKTON_URL` during Slack notification send (required)   -
      apps[PROJECT].slack - project''s Slack channel name (required)   - apps[PROJECT].kubernetesRepository.name
      - project''s kubernetes repository name used in ArgoCD application and Tekton
      TriggerBinding (may be absent and replaced with     `apps[PROJECT].components[NAME].argocd`
      and `apps[PROJECT].argocd.sourceRepos[]` blocks in case if project has no kubernetes
      repo)   - apps[PROJECT].kubernetesRepository.branch - project''s kubernetes
      repository branch used in ArgoCD application and Tekton TriggerBinding (may
      be absent and replaced     with `apps[PROJECT].components[NAME].argocd` and
      `apps[PROJECT].argocd.sourceRepos[]` blocks in case if project has no kubernetes
      repo)   - apps[PROJECT].kubernetesRepository.url - project''s kubernetes repository
      url used in ArgoCD application and Tekton TriggerBinding (may be absent and
      replaced with     `apps[PROJECT].components[NAME].argocd` and `apps[PROJECT].argocd.sourceRepos[]`
      blocks in case if project has no kubernetes repo)    Basically we have 2 different
      types of ci/cd - basic (buildpacks, kaniko) and wordpress ones. So depending
      on project''s component type you will need to fill different parameters.    #
      fill below parameters for each `component` block    - apps[PROJECT].components[NAME].repository
      - the name of the repository containing the code (may be absent in case of wordpress
      application without deployment, i.e. bolrdswp, taco,     saritasa-wordpress-demo)   -
      apps[PROJECT].components[NAME].pipeline - the name of the pipeline building
      the code from the repository above   - apps[PROJECT].components[NAME].argocd.source.syncWave
      - custom component ArgoCD application sync wave (default: "210")   - apps[PROJECT].components[NAME].argocd.source.path
      - path to directory responsible for kubernetes resources creation of the ArgoCD
      Application (default: kubernetes repo path for basic     projects "apps/<apps[PROJECT].components[NAME].name>/manifests/<environment>"
      or "null" for wordpress projects)   - apps[PROJECT].components[NAME].argocd.source.repoUrl
      - url of repository which should be used for ArgoCD Application (default: kubernetes
      repo for basic projects     "<apps[PROJECT].kubernetesRepository.url>" or `https://charts.bitnami.com/bitnami`
      for wordpress projects)   - apps[PROJECT].components[NAME].argocd.source.targetRevision
      - tag or branch in the repository for ArgoCD Application (default: kubernetes
      branch for basic projects     "<apps[PROJECT].kubernetesRepository.branch>"
      or "11.0.14" for wordpress projects)   - apps[PROJECT].components[NAME].argocd.ignoreDeploymentReplicasDiff
      - flag whether this exact ArgoCD application should ignore `Replicas` count
      differences for deployments. It may be needed for `staging` and `prod` environments
      which use HPA (default: false)   - apps[PROJECT].components[NAME].applicationURL
      - url that should be used in tekton build ConfigMap `APPLICATION_URL` param   -
      apps[PROJECT].components[NAME].tektonKubernetesRepoDeployKeyName - name of existing
      in kubernetes cluster secret with SSH key to kubernetes repository, used in
      `kustomize` deployment     step (i.e. addon-backend-deploy-key). This param
      sets by default to `<project>-kubernetes-aws-deploy-key` if project has `kubernetesRepository`
      param in values (actual only for basic     components, not wordpress)   - apps[PROJECT].components[NAME].eventlistener.template
      - the name of the trigger template for the component to be used   - apps[PROJECT].components[NAME].eventlistener.enableWebhookSecret
      - should you enable the git web hook for this particular app/component in the
      eventlistener configuration   - apps[PROJECT].components[NAME].eventlistener.filter
      - custom filter for the component of the eventlistener   - apps[PROJECT].components[NAME].eventlistener.extraOverlays
      - extra overlays to be added into the eventlistener for the component   - apps[PROJECT].components[NAME].eventlistener.eventTypes
      - github event types to trigger the ci/cd   - apps[PROJECT].components[NAME].eventlistener.gitWebhookBranches[]
      - list of branches, push to which triggers ci/cd   - apps[PROJECT].components[NAME].extraBuildConfigParams
      - additional key/values to be added into `build-pipeline-config configmap` ConfigMap
      associated with the app   - apps[PROJECT].components[NAME].triggerBinding -
      values to be added into the TriggerBinding manifest except default ones    What
      is important to know is that any key defined in apps[PROJECT].components[NAME].triggerBinding
      would be added as is   into the generated triggerbinding associated with your
      app. However the chart renders some default values based on the values   in
      this values.yaml file:      - application, project, environment, docker_registry,
      kubernetes_repository_ssh_url, kubernetes_branch, kubernetes_repository_kustomize_path,
      source_subpath (for basic components)     - application, project, environment,
      namespace (for wordpress components)     # fill below parameters block only
      for `wordpress` components    - apps[PROJECT].components[NAME].wordpress.imageTag
      - tag of the wordpress image (default: "5.7.2")   - apps[PROJECT].components[NAME].wordpress.repository_ssh_url
      - project''s wordpress repository SSH url (default: null, may be absent if project
      has no wordpress repo)   - apps[PROJECT].components[NAME].wordpress.resources
      - wordpress pod resources params (default: requests.cpu: 100m, requests.memory:
      128Mi)   - apps[PROJECT].components[NAME].wordpress.commonLabels - wordpress
      pod common labels (default: commonLabels.tech_stack: php, commonLabels.application:
      wordpress)   - apps[PROJECT].components[NAME].wordpress.wordpressTablePrefix
      - wordpress DB tables prefix (default: wp_)   - apps[PROJECT].components[NAME].wordpress.existingSecret
      - name of existing in kubernetes secret with wp admin auth info (default: "<project_name>-<component_name>-<env>",     i.e.
      "taco-wordpress-dev")   - apps[PROJECT].components[NAME].wordpress.updateStrategy
      - strategy that should be used for wordpress pod update (default: updateStrategy.type:
      RollingUpdate,     updateStrategy.rollingUpdate.maxSurge: 0%, updateStrategy.rollingUpdate.maxUnavailable:
      100%, i.e. stop old pod and then create a new one)   - apps[PROJECT].components[NAME].wordpress.smtp.host
      - SMTP host for sending emails (default: mailhog.mailhog.svc.cluster.local)   -
      apps[PROJECT].components[NAME].wordpress.smtp.port - SMTP port for sending emails
      (default: 1025)   - apps[PROJECT].components[NAME].wordpress.smtp.user - SMTP
      user for sending emails (default: <project_name>, i.e. taco)   - apps[PROJECT].components[NAME].wordpress.smtp.password
      - SMTP password for sending emails (default: anypassword)   - apps[PROJECT].components[NAME].wordpress.nodeSelector
      - wordpress pod node selector params (default: nodeSelector.tech_stack: php,
      nodeSelector.pvc: "true")   - apps[PROJECT].components[NAME].wordpress.podSecurityContext
      - wordpress pod''s security context params (default: podSecurityContext.enabled:
      true, podSecurityContext.fsGroup: 1000)   - apps[PROJECT].components[NAME].wordpress.containerSecurityContext
      - wordpress pod container''s security context params (default: containerSecurityContext.enabled:
      true,     containerSecurityContext.runAsUser: 1000)   - apps[PROJECT].components[NAME].wordpress.ci
      - boolean flag which defines whether wordpress project has ci/cd or not (default:
      true)   - apps[PROJECT].components[NAME].wordpress.extraInitContainers - extra
      ci/cd init containers if needed, enabled only if wordpress component has `ci`
      flag enabled (default: null)   - apps[PROJECT].components[NAME].wordpress.extraVolumesSshKeySecret
      - name of a secret with wordpress repository SSH url (default: "<project_name>-<component_name>-deploy-key",     i.e.
      "taco-wordpress-deploy-key")   - apps[PROJECT].components[NAME].wordpress.extraVolumes
      - extra volumes that might be needed to wordpress pod (default: null)   - apps[PROJECT].components[NAME].wordpress.ingress.hostname
      - wordpress ingress hostname (default: "<project_name>.saritasa.rocks", i.e.
      "taco.saritasa.rocks")   - apps[PROJECT].components[NAME].wordpress.ingress.annotations
      - wordpress ingress annotations (default: kubernetes.io/ingress.class: "nginx",
      cert-manager.io/cluster-issuer: "letsencrypt-prod",     nginx.ingress.kubernetes.io/proxy-body-size:
      100m, nginx.ingress.kubernetes.io/proxy-connect-timeout: "300", nginx.ingress.kubernetes.io/proxy-next-upstream-timeout:
      "300",     nginx.ingress.kubernetes.io/auth-type: basic, nginx.ingress.kubernetes.io/auth-secret:
      <ingress.authSecret>, nginx.ingress.kubernetes.io/auth-realm: "Authentication
      Required",     nginx.ingress.kubernetes.io/server-snippet: |-,   add_header
      X-Robots-Tag "noindex, nofollow, nosnippet, noarchive")   - apps[PROJECT].components[NAME].wordpress.ingress.authSecret
      - name of kubernetes secret that should be used in ingress for basic auth (default:
      "<project_name>-<compinent_name>-<env>-basic-auth",     i.e. "taco-wordpress-dev-basic-auth")   -
      apps[PROJECT].components[NAME].wordpress.ingress.extraHosts - list of extra
      hosts that may be defined in ingress (default: null)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.host
      - wordpress DB host (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.user
      - wordpress DB user (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.existingSecret
      - name of existing in kubernetes secret with DB user password (required)   -
      apps[PROJECT].components[NAME].wordpress.externalDatabase.database - wordpress
      DB name (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.port
      - wordpress DB port (default: 3306)   - apps[PROJECT].components[NAME].wordpress.wordpressExtraConfigContent
      - wordpress extra configs if needed (default: null)   - apps[PROJECT].components[NAME].wordpress.extraEnvVars
      - wordpress extra env vars if needed (default: null)    Example of values with
      extra `eventlistener` and `extraBuildConfigParams` in component:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           gitBranchPrefixes:             -
      staging           storageClassName: gp2           aws:             region: "us-west-2"             dns:
      staging.site.com           defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com           argocd:             server:
      deploy.staging.site.com           eventlistener:             enableWebhookSecret:
      true           apps:             - project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: prod               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.site.com/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack                   applicationURL: https://api.site.com                   eventlistener:                     template:
      buildpack-backend-build-pipeline-trigger-template                   extraBuildConfigParams:
      # what additional K/V pairs you want to add into the build-pipeline-config configmap                     KEY:
      value                   triggerBinding:                     - name: docker_registry_repository                       value:
      XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/backend                     - name:
      buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/runner:v1                 -
      name: frontend                   repository: xxx-frontend                   pipeline:
      buildpack                   applicationURL: https://site.com                   eventlistener:                     enableWebhookSecret:
      false                     filter: (body.ref.startsWith(''refs/heads/develop'')
      || body.ref.startsWith(''refs/heads/release/''))                     template:
      buildpack-frontend-build-pipeline-trigger-template                     extraOverlays:
      []                     # - key: truncated_sha                     #   expression:
      "body.head_commit.id.truncate(7)"                     eventTypes: ["pull_request",
      "push"]                   extraBuildConfigParams: {}                   triggerBinding:                     -
      name: docker_registry_repository                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/frontend                     -
      name: buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web            # make
      sure PVCs are bound after the chart is synced           # by temporarily mount
      them into short-live job.           runPostInstallMountPvcJob: false        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true    ```    Example of
      old application from `saritasa-clients` repo, which has no separate `kubernetes`
      repository. Here we replace `apps[PROJECT].kubernetesRepository` block with   `apps[PROJECT].argocd.sourceRepos`
      and `apps[PROJECT].components[NAME].argocd` block, also it is required to set
      `apps[PROJECT].components[NAME].tektonKubernetesRepoDeployKeyName`   in such
      a case to use correct secret with deploy key as far as there is no kubernetes
      repo that is used by default.    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      git@github.com:saritasa-nest/xxx-backend.git                   - git@github.com:saritasa-nest/xxx-frontend.git               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: backend                   repository:
      xxx-backend                   pipeline: buildpack-django-build-pipeline                   applicationURL:
      https://api.xxx.site.url                   argocd:                     source:                       path:
      .kubernetes/manifests/dev                       repoUrl: git@github.com:saritasa-nest/xxx-backend.git                       targetRevision:
      develop                   eventlistener:                     template: buildpack-django-build-pipeline-trigger-template                   tektonKubernetesRepoDeployKeyName:
      xxx-backend-deploy-key                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1                 -
      name: frontend                   repository: xxx-frontend                   pipeline:
      buildpack-frontend-build-pipeline                   applicationURL: https://xxx.site.url                   argocd:                     source:                       path:
      .kubernetes/manifests/dev                       repoUrl: git@github.com:saritasa-nest/xxx-frontend.git                       targetRevision:
      develop                   eventlistener:                     template: buildpack-frontend-build-pipeline-trigger-template                   tektonKubernetesRepoDeployKeyName:
      xxx-frontend-deploy-key                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/frontend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Example with
      creating an ArgoCD project and application with its custom `environment` (case
      when in common `staging` environment we need to create for some reason project
      with   `dev` environment). Here is added an extra `apps[PROJECT].environment`
      param, which overrides default `environment` in helm values for this project,
      and   `apps[PROJECT].components[NAME].eventlistener.gitWebhookBranches` param,
      which defines that ci/cd should be trigger on push to `develop` branch.    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack-django-build-pipeline                   applicationURL: https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Also there might
      a situation that you would like to provision custom utility ArgoCD Application
      in argo-cd from project''s kubernetes repo (for example VP project provisions   like
      this `jitsi` application). To reach this you might need to add an extra destination
      namespace to ArgoCD Project, you should use   `apps[PROJECT].argocd.extraDestinationNamespaces[]`
      param for that like in below example.    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev                 extraDestinationNamespaces:                   -
      argo-cd               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack-django-build-pipeline                   applicationURL: https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    If you want
      to enable ignoring deployment replicas count differences in ArgoCD application
      of your component add `apps[PROJECT].components[NAME].argocd.ignoreDeploymentReplicasDiff:
      true` flag like in the below example (it may be needed for `staging` and `prod`
      envs, where you have horizontal pod autoscheduling - HPA):    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev                 extraDestinationNamespaces:                   -
      argo-cd               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   argocd:                     ignoreDeploymentReplicasDiff:
      true                   pipeline: buildpack-django-build-pipeline                   applicationURL:
      https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Simple wordpress
      application example filled by default:    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: wordpress                   repository:
      xxx-wordpress                   pipeline: wordpress-build-pipeline                   applicationURL:
      https://xxx.site.url                   wordpress:                     repository_ssh_url:
      git@github.com:saritasa-nest/xxx-wordpress.git                     externalDatabase:                       host:
      xxx.xxx.us-west-2.rds.amazonaws.com                       user: xxx-wordpress-user-dev                       existingSecret:
      xxx-wordpress-dev-externaldb                       database: xxx-wordpress-dev                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Simple wordpress
      application example filled by default, but without ci/cd:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: wordpress                   repository:
      xxx-wordpress                   pipeline: wordpress-build-pipeline                   applicationURL:
      https://xxx.site.url                   wordpress:                     ci: false                     externalDatabase:                       host:
      xxx.xxx.us-west-2.rds.amazonaws.com                       user: xxx-wordpress-user-dev                       existingSecret:
      xxx-wordpress-dev-externaldb                       database: xxx-wordpress-dev                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    More difficult
      example of project containing `wordpress` and `frontend` component. Also defined
      for example all extra wordpress params that could be set:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami                   - git@github.com:saritasa-nest/xxx-kubernetes-aws.git               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: wordpress                   repository: xxx-wordpress                   pipeline:
      wordpress-build-pipeline                   applicationURL: https://xxx.site.url                   wordpress:                     imageTag:
      "5.8.1"                     repository_ssh_url: "git@github.com:saritasa-nest/xxx-wordpress.git"                     resources:                       requests:                         memory:
      512Mi                         cpu: 100m                     commonLabels:                       tech_stack:
      php                       application: wordpress                     wordpressTablePrefix:
      "qbf_"                     existingSecret: xxx-wordpress                     updateStrategy:                       type:
      RollingUpdate                       rollingUpdate:                         maxSurge:
      25%                         maxUnavailable: 25%                     smtp:                       host:
      mysmtp.site.url                       port: 1010                       user:
      myuser                       password: mypassword                     nodeSelector:                       tech_stack:
      php                       pvc: "true"                     podSecurityContext:                       enabled:
      true                       fsGroup: 1001                     containerSecurityContext:                       enabled:
      true                       runAsUser: 1001                     ci: true                     extraInitContainers:                       -
      name: build-frontend                         image: node:14                         imagePullPolicy:
      Always                         command:                           - bash                           -
      -c                           - |                             git -c core.sshCommand="ssh
      -i ~/.ssh/id_rsa" clone git@github.com:saritasa-nest/xxx.git -b develop ~/xxx                             cd
      ~/xxx                             npm install                             npm
      run build:embedded-questionnaire                             cp -Rf $(pwd)/dist/*
      /bitnami/wordpress/wp-content/                             echo "Copied built
      files into /bitnami/wordpress/wp-content/"                             ls -la
      /bitnami/wordpress/wp-content/                             echo "Done BUILD
      FRONTEND"                         volumeMounts:                         - mountPath:
      /bitnami/wordpress                           name: wordpress-data                           subPath:
      wordpress                         - mountPath: /home/node/.ssh/id_rsa                           name:
      xxx-ssh-key                           subPath: ssh-privatekey                         -
      mountPath: /home/node/.ssh/known_hosts                           name: github-known-hosts                           subPath:
      config.ssh                         securityContext:                           runAsNonRoot:
      true                           runAsUser: 1000                           allowPrivilegeEscalation:
      false                     extraVolumesSshKeySecret: xxx-wordpress-deploy-key                     extraVolumes:                     -
      name: xxx-ssh-key                       secret:                         secretName:
      xxx-deploy-key                     ingress:                       hostname:
      test.xxx.site.url                       annotations:                         kubernetes.io/ingress.class:
      "nginx"                         cert-manager.io/cluster-issuer: "letsencrypt-prod"                         nginx.ingress.kubernetes.io/proxy-body-size:
      100m                         nginx.ingress.kubernetes.io/client-max-body-size:
      100m                         nginx.ingress.kubernetes.io/server-snippet: |-                           add_header
      X-Robots-Tag "noindex, nofollow, nosnippet, noarchive";                         nginx.ingress.kubernetes.io/whitelist-source-range:
      |                           35.85.92.224/32,                           100.21.244.185/32                       extraHosts:                         -
      name: test.xxx.site.url                           path: /wp-admin                     externalDatabase:                       host:
      "xxx.xxx.us-west-2.rds.amazonaws.com"                       user: "xxx-wp-user-dev"                       existingSecret:
      "xxx-wordpress-dev-externaldb"                       database: "xxx-wp-dev"                     wordpressExtraConfigContent:
      |                       @ini_set(''WP_MEMORY_LIMIT'', ''512M'');                       @ini_set(''ALLOW_UNFILTERED_UPLOADS'',
      true);                     extraEnvVars:                       KEY: VALUE                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template                  - name: frontend                   repository:
      xxx-frontend                   pipeline: buildpack-frontend-build-pipeline                   applicationURL:
      https://app.xxx.site.url                   eventlistener:                     template:
      buildpack-frontend-build-pipeline-trigger-template                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/frontend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ``` '
    digest: 9ea8430d856558b3e6b0a8e15d03c6b625c11d9e13866851247cc3b8c062299f
    maintainers:
    - email: nospam@saritasa.com
      name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-apps
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-apps-0.1.23-dev/saritasa-tekton-apps-0.1.23-dev.tgz
    version: 0.1.23-dev
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2022-09-21T11:45:20.874046607Z"
    description: 'A Helm chart for tekton apps (rbac, eventlistener)  Implements:
      - dynamic records for eventlistener - PVCs - RBAC - configmaps for each app
      - triggerbindings for each app - kubernetes job to make sure the PVCs are bound
      and argocd marks the app as healthy - argocd project for each app - argocd application
      for each app component  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then declare dynamic list of projects (and associated components of that
      project like backend, api, frontend, etc) that would be dynamically added into
      the tekton''s eventlistener manifest.  Each component should be a separate git
      repository.  ```yaml --- apiVersion: argoproj.io/v1alpha1 kind: Application
      metadata:   name: tekton-apps   namespace: argo-cd   finalizers:   - resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "41" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-apps     helm:       values: |         environment: staging         gitBranchPrefixes:           -
      staging         storageClassName: gp3         nodeSelector:           ops: ''true''         aws:           region:
      "us-west-2"           dns: staging.site.com         defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com         argocd:           server:
      deploy.staging.site.com         eventlistener:           enableWebhookSecret:
      true         apps:           - project: vp             enabled: true             argocd:               labels:                 created-by:
      xxx                 ops-main: xxx                 ops-secondary: xxx                 pm:
      xxx                 tm: xxx               namespace: prod             mailList:
      vp@site.com             devopsMailList: devops+vp@site.com             jiraURL:
      https://site.atlassian.net/browse/vp             tektonURL: https://tekton.staging.site.com/#/namespaces/ci/pipelineruns             slack:
      client-vp-ci             kubernetesRepository:               name: vp-kubernetes-aws               branch:
      main               url: git@github.com:org-name/vp-kubernetes-aws.git              components:               -
      name: backend                 repository: vp-backend                 pipeline:
      buildpack-django-build-pipeline                 applicationURL: https://api.staging.site.com                 eventlistener:                   template:
      buildpack-django-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/backend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/builder:v1                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/runner:v1               -
      name: frontend                 repository: vp-frontend                 pipeline:
      buildpack-frontend-build-pipeline                 applicationURL: https://staging.site.com                 eventlistener:                   template:
      buildpack-frontend-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/frontend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/builder:full                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/runner:full                   -
      name: source_subpath                     value: dist/web          # make sure
      PVCs are bound after the chart is synced         # by temporarily mount them
      into short-live job.         runPostInstallMountPvcJob: false      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.16"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true    ```    Above helm chart creates a new ArgoCD project
      for each project in values, for each component in project''s components there
      is created a separate ArgoCD   application and required for Tekton ci/cd resources
      (triggerbindings, roles, configmaps, jobs, serviceaccounts, pvcs and etc).    #
      fill below parameters for each `project` block    - apps[PROJECT].environment
      - possbility to define custom project''s environment, needed for cases when
      need to deploy `dev` and `prod` envs to the same cluster. For example `xxx`
      dev     and prod both deployed in rocks EKS (not required)   - apps[PROJECT].enabled
      - boolean value to define whether the project enabled or not (required)   -
      apps[PROJECT].argocd.labels - labels which are added to ArgoCD project (required)   -
      apps[PROJECT].argocd.namespace - allowed for ArgoCD project namespace (required)   -
      apps[PROJECT].argocd.syncWave - ArgoCD project sync wave, i.e. sequence in which
      project should be synced (not required, default: "200")   - apps[PROJECT].argocd.sourceRepos[]
      - source repositories added to ArgoCD project (not required, default: [<apps[PROJECT].kubernetesRepository.url>])   -
      apps[PROJECT].argocd.extraDestinationNamespaces[] - adds extra destination namespaces
      for ArgoCD project to be able to create custom apps within project''s kubernetes
      repo (not required, default: null)   - apps[PROJECT].mailList - project''s team
      email address (required)   - apps[PROJECT].devopsMailList - project''s devops
      team email address (required)   - apps[PROJECT].jiraURL - project''s JIRA url
      (required)   - apps[PROJECT].tektonURL - link to Tekton pipelineruns used in
      Tekton ConfigMap as `TEKTON_URL` during Slack notification send (required)   -
      apps[PROJECT].slack - project''s Slack channel name (required)   - apps[PROJECT].kubernetesRepository.name
      - project''s kubernetes repository name used in ArgoCD application and Tekton
      TriggerBinding (may be absent and replaced with     `apps[PROJECT].components[NAME].argocd`
      and `apps[PROJECT].argocd.sourceRepos[]` blocks in case if project has no kubernetes
      repo)   - apps[PROJECT].kubernetesRepository.branch - project''s kubernetes
      repository branch used in ArgoCD application and Tekton TriggerBinding (may
      be absent and replaced     with `apps[PROJECT].components[NAME].argocd` and
      `apps[PROJECT].argocd.sourceRepos[]` blocks in case if project has no kubernetes
      repo)   - apps[PROJECT].kubernetesRepository.url - project''s kubernetes repository
      url used in ArgoCD application and Tekton TriggerBinding (may be absent and
      replaced with     `apps[PROJECT].components[NAME].argocd` and `apps[PROJECT].argocd.sourceRepos[]`
      blocks in case if project has no kubernetes repo)    Basically we have 2 different
      types of ci/cd - basic (buildpacks, kaniko) and wordpress ones. So depending
      on project''s component type you will need to fill different parameters.    #
      fill below parameters for each `component` block    - apps[PROJECT].components[NAME].repository
      - the name of the repository containing the code (may be absent in case of wordpress
      application without deployment, i.e. bolrdswp, taco,     saritasa-wordpress-demo)   -
      apps[PROJECT].components[NAME].pipeline - the name of the pipeline building
      the code from the repository above   - apps[PROJECT].components[NAME].argocd.source.syncWave
      - custom component ArgoCD application sync wave (default: "210")   - apps[PROJECT].components[NAME].argocd.source.path
      - path to directory responsible for kubernetes resources creation of the ArgoCD
      Application (default: kubernetes repo path for basic     projects "apps/<apps[PROJECT].components[NAME].name>/manifests/<environment>"
      or "null" for wordpress projects)   - apps[PROJECT].components[NAME].argocd.source.repoUrl
      - url of repository which should be used for ArgoCD Application (default: kubernetes
      repo for basic projects     "<apps[PROJECT].kubernetesRepository.url>" or `https://charts.bitnami.com/bitnami`
      for wordpress projects)   - apps[PROJECT].components[NAME].argocd.source.targetRevision
      - tag or branch in the repository for ArgoCD Application (default: kubernetes
      branch for basic projects     "<apps[PROJECT].kubernetesRepository.branch>"
      or "11.0.14" for wordpress projects)   - apps[PROJECT].components[NAME].argocd.ignoreDeploymentReplicasDiff
      - flag whether this exact ArgoCD application should ignore `Replicas` count
      differences for deployments. It may be needed for `staging` and `prod` environments
      which use HPA (default: false)   - apps[PROJECT].components[NAME].applicationURL
      - url that should be used in tekton build ConfigMap `APPLICATION_URL` param   -
      apps[PROJECT].components[NAME].tektonKubernetesRepoDeployKeyName - name of existing
      in kubernetes cluster secret with SSH key to kubernetes repository, used in
      `kustomize` deployment     step (i.e. addon-backend-deploy-key). This param
      sets by default to `<project>-kubernetes-aws-deploy-key` if project has `kubernetesRepository`
      param in values (actual only for basic     components, not wordpress)   - apps[PROJECT].components[NAME].eventlistener.template
      - the name of the trigger template for the component to be used   - apps[PROJECT].components[NAME].eventlistener.enableWebhookSecret
      - should you enable the git web hook for this particular app/component in the
      eventlistener configuration   - apps[PROJECT].components[NAME].eventlistener.filter
      - custom filter for the component of the eventlistener   - apps[PROJECT].components[NAME].eventlistener.extraOverlays
      - extra overlays to be added into the eventlistener for the component   - apps[PROJECT].components[NAME].eventlistener.eventTypes
      - github event types to trigger the ci/cd   - apps[PROJECT].components[NAME].eventlistener.gitWebhookBranches[]
      - list of branches, push to which triggers ci/cd   - apps[PROJECT].components[NAME].extraBuildConfigParams
      - additional key/values to be added into `build-pipeline-config configmap` ConfigMap
      associated with the app   - apps[PROJECT].components[NAME].triggerBinding -
      values to be added into the TriggerBinding manifest except default ones    What
      is important to know is that any key defined in apps[PROJECT].components[NAME].triggerBinding
      would be added as is   into the generated triggerbinding associated with your
      app. However the chart renders some default values based on the values   in
      this values.yaml file:      - application, project, environment, docker_registry,
      kubernetes_repository_ssh_url, kubernetes_branch, kubernetes_repository_kustomize_path,
      source_subpath (for basic components)     - application, project, environment,
      namespace (for wordpress components)     # fill below parameters block only
      for `wordpress` components    - apps[PROJECT].components[NAME].wordpress.imageTag
      - tag of the wordpress image (default: "5.7.2")   - apps[PROJECT].components[NAME].wordpress.repository_ssh_url
      - project''s wordpress repository SSH url (default: null, may be absent if project
      has no wordpress repo)   - apps[PROJECT].components[NAME].wordpress.resources
      - wordpress pod resources params (default: requests.cpu: 100m, requests.memory:
      128Mi)   - apps[PROJECT].components[NAME].wordpress.commonLabels - wordpress
      pod common labels (default: commonLabels.tech_stack: php, commonLabels.application:
      wordpress)   - apps[PROJECT].components[NAME].wordpress.wordpressTablePrefix
      - wordpress DB tables prefix (default: wp_)   - apps[PROJECT].components[NAME].wordpress.existingSecret
      - name of existing in kubernetes secret with wp admin auth info (default: "<project_name>-<component_name>-<env>",     i.e.
      "taco-wordpress-dev")   - apps[PROJECT].components[NAME].wordpress.updateStrategy
      - strategy that should be used for wordpress pod update (default: updateStrategy.type:
      RollingUpdate,     updateStrategy.rollingUpdate.maxSurge: 0%, updateStrategy.rollingUpdate.maxUnavailable:
      100%, i.e. stop old pod and then create a new one)   - apps[PROJECT].components[NAME].wordpress.smtp.host
      - SMTP host for sending emails (default: mailhog.mailhog.svc.cluster.local)   -
      apps[PROJECT].components[NAME].wordpress.smtp.port - SMTP port for sending emails
      (default: 1025)   - apps[PROJECT].components[NAME].wordpress.smtp.user - SMTP
      user for sending emails (default: <project_name>, i.e. taco)   - apps[PROJECT].components[NAME].wordpress.smtp.password
      - SMTP password for sending emails (default: anypassword)   - apps[PROJECT].components[NAME].wordpress.nodeSelector
      - wordpress pod node selector params (default: nodeSelector.tech_stack: php,
      nodeSelector.pvc: "true")   - apps[PROJECT].components[NAME].wordpress.podSecurityContext
      - wordpress pod''s security context params (default: podSecurityContext.enabled:
      true, podSecurityContext.fsGroup: 1000)   - apps[PROJECT].components[NAME].wordpress.containerSecurityContext
      - wordpress pod container''s security context params (default: containerSecurityContext.enabled:
      true,     containerSecurityContext.runAsUser: 1000)   - apps[PROJECT].components[NAME].wordpress.ci
      - boolean flag which defines whether wordpress project has ci/cd or not (default:
      true)   - apps[PROJECT].components[NAME].wordpress.extraInitContainers - extra
      ci/cd init containers if needed, enabled only if wordpress component has `ci`
      flag enabled (default: null)   - apps[PROJECT].components[NAME].wordpress.extraVolumesSshKeySecret
      - name of a secret with wordpress repository SSH url (default: "<project_name>-<component_name>-deploy-key",     i.e.
      "taco-wordpress-deploy-key")   - apps[PROJECT].components[NAME].wordpress.extraVolumes
      - extra volumes that might be needed to wordpress pod (default: null)   - apps[PROJECT].components[NAME].wordpress.ingress.hostname
      - wordpress ingress hostname (default: "<project_name>.saritasa.rocks", i.e.
      "taco.saritasa.rocks")   - apps[PROJECT].components[NAME].wordpress.ingress.annotations
      - wordpress ingress annotations (default: kubernetes.io/ingress.class: "nginx",
      cert-manager.io/cluster-issuer: "letsencrypt-prod",     nginx.ingress.kubernetes.io/proxy-body-size:
      100m, nginx.ingress.kubernetes.io/proxy-connect-timeout: "300", nginx.ingress.kubernetes.io/proxy-next-upstream-timeout:
      "300",     nginx.ingress.kubernetes.io/auth-type: basic, nginx.ingress.kubernetes.io/auth-secret:
      <ingress.authSecret>, nginx.ingress.kubernetes.io/auth-realm: "Authentication
      Required",     nginx.ingress.kubernetes.io/server-snippet: |-,   add_header
      X-Robots-Tag "noindex, nofollow, nosnippet, noarchive")   - apps[PROJECT].components[NAME].wordpress.ingress.authSecret
      - name of kubernetes secret that should be used in ingress for basic auth (default:
      "<project_name>-<compinent_name>-<env>-basic-auth",     i.e. "taco-wordpress-dev-basic-auth")   -
      apps[PROJECT].components[NAME].wordpress.ingress.extraHosts - list of extra
      hosts that may be defined in ingress (default: null)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.host
      - wordpress DB host (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.user
      - wordpress DB user (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.existingSecret
      - name of existing in kubernetes secret with DB user password (required)   -
      apps[PROJECT].components[NAME].wordpress.externalDatabase.database - wordpress
      DB name (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.port
      - wordpress DB port (default: 3306)   - apps[PROJECT].components[NAME].wordpress.wordpressExtraConfigContent
      - wordpress extra configs if needed (default: null)   - apps[PROJECT].components[NAME].wordpress.extraEnvVars
      - wordpress extra env vars if needed (default: null)    Example of values with
      extra `eventlistener` and `extraBuildConfigParams` in component:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           gitBranchPrefixes:             -
      staging           storageClassName: gp2           aws:             region: "us-west-2"             dns:
      staging.site.com           defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com           argocd:             server:
      deploy.staging.site.com           eventlistener:             enableWebhookSecret:
      true           apps:             - project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: prod               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.site.com/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack                   applicationURL: https://api.site.com                   eventlistener:                     template:
      buildpack-backend-build-pipeline-trigger-template                   extraBuildConfigParams:
      # what additional K/V pairs you want to add into the build-pipeline-config configmap                     KEY:
      value                   triggerBinding:                     - name: docker_registry_repository                       value:
      XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/backend                     - name:
      buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/runner:v1                 -
      name: frontend                   repository: xxx-frontend                   pipeline:
      buildpack                   applicationURL: https://site.com                   eventlistener:                     enableWebhookSecret:
      false                     filter: (body.ref.startsWith(''refs/heads/develop'')
      || body.ref.startsWith(''refs/heads/release/''))                     template:
      buildpack-frontend-build-pipeline-trigger-template                     extraOverlays:
      []                     # - key: truncated_sha                     #   expression:
      "body.head_commit.id.truncate(7)"                     eventTypes: ["pull_request",
      "push"]                   extraBuildConfigParams: {}                   triggerBinding:                     -
      name: docker_registry_repository                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/frontend                     -
      name: buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web            # make
      sure PVCs are bound after the chart is synced           # by temporarily mount
      them into short-live job.           runPostInstallMountPvcJob: false        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true    ```    Example of
      old application from `saritasa-clients` repo, which has no separate `kubernetes`
      repository. Here we replace `apps[PROJECT].kubernetesRepository` block with   `apps[PROJECT].argocd.sourceRepos`
      and `apps[PROJECT].components[NAME].argocd` block, also it is required to set
      `apps[PROJECT].components[NAME].tektonKubernetesRepoDeployKeyName`   in such
      a case to use correct secret with deploy key as far as there is no kubernetes
      repo that is used by default.    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      git@github.com:saritasa-nest/xxx-backend.git                   - git@github.com:saritasa-nest/xxx-frontend.git               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: backend                   repository:
      xxx-backend                   pipeline: buildpack-django-build-pipeline                   applicationURL:
      https://api.xxx.site.url                   argocd:                     source:                       path:
      .kubernetes/manifests/dev                       repoUrl: git@github.com:saritasa-nest/xxx-backend.git                       targetRevision:
      develop                   eventlistener:                     template: buildpack-django-build-pipeline-trigger-template                   tektonKubernetesRepoDeployKeyName:
      xxx-backend-deploy-key                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1                 -
      name: frontend                   repository: xxx-frontend                   pipeline:
      buildpack-frontend-build-pipeline                   applicationURL: https://xxx.site.url                   argocd:                     source:                       path:
      .kubernetes/manifests/dev                       repoUrl: git@github.com:saritasa-nest/xxx-frontend.git                       targetRevision:
      develop                   eventlistener:                     template: buildpack-frontend-build-pipeline-trigger-template                   tektonKubernetesRepoDeployKeyName:
      xxx-frontend-deploy-key                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/frontend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Example with
      creating an ArgoCD project and application with its custom `environment` (case
      when in common `staging` environment we need to create for some reason project
      with   `dev` environment). Here is added an extra `apps[PROJECT].environment`
      param, which overrides default `environment` in helm values for this project,
      and   `apps[PROJECT].components[NAME].eventlistener.gitWebhookBranches` param,
      which defines that ci/cd should be trigger on push to `develop` branch.    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack-django-build-pipeline                   applicationURL: https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Also there might
      a situation that you would like to provision custom utility ArgoCD Application
      in argo-cd from project''s kubernetes repo (for example VP project provisions   like
      this `jitsi` application). To reach this you might need to add an extra destination
      namespace to ArgoCD Project, you should use   `apps[PROJECT].argocd.extraDestinationNamespaces[]`
      param for that like in below example.    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev                 extraDestinationNamespaces:                   -
      argo-cd               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack-django-build-pipeline                   applicationURL: https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    If you want
      to enable ignoring deployment replicas count differences in ArgoCD application
      of your component add `apps[PROJECT].components[NAME].argocd.ignoreDeploymentReplicasDiff:
      true` flag like in the below example (it may be needed for `staging` and `prod`
      envs, where you have horizontal pod autoscheduling - HPA):    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev                 extraDestinationNamespaces:                   -
      argo-cd               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   argocd:                     ignoreDeploymentReplicasDiff:
      true                   pipeline: buildpack-django-build-pipeline                   applicationURL:
      https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Simple wordpress
      application example filled by default:    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: wordpress                   repository:
      xxx-wordpress                   pipeline: wordpress-build-pipeline                   applicationURL:
      https://xxx.site.url                   wordpress:                     repository_ssh_url:
      git@github.com:saritasa-nest/xxx-wordpress.git                     externalDatabase:                       host:
      xxx.xxx.us-west-2.rds.amazonaws.com                       user: xxx-wordpress-user-dev                       existingSecret:
      xxx-wordpress-dev-externaldb                       database: xxx-wordpress-dev                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Simple wordpress
      application example filled by default, but without ci/cd:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: wordpress                   repository:
      xxx-wordpress                   pipeline: wordpress-build-pipeline                   applicationURL:
      https://xxx.site.url                   wordpress:                     ci: false                     externalDatabase:                       host:
      xxx.xxx.us-west-2.rds.amazonaws.com                       user: xxx-wordpress-user-dev                       existingSecret:
      xxx-wordpress-dev-externaldb                       database: xxx-wordpress-dev                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    More difficult
      example of project containing `wordpress` and `frontend` component. Also defined
      for example all extra wordpress params that could be set:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami                   - git@github.com:saritasa-nest/xxx-kubernetes-aws.git               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: wordpress                   repository: xxx-wordpress                   pipeline:
      wordpress-build-pipeline                   applicationURL: https://xxx.site.url                   wordpress:                     imageTag:
      "5.8.1"                     repository_ssh_url: "git@github.com:saritasa-nest/xxx-wordpress.git"                     resources:                       requests:                         memory:
      512Mi                         cpu: 100m                     commonLabels:                       tech_stack:
      php                       application: wordpress                     wordpressTablePrefix:
      "qbf_"                     existingSecret: xxx-wordpress                     updateStrategy:                       type:
      RollingUpdate                       rollingUpdate:                         maxSurge:
      25%                         maxUnavailable: 25%                     smtp:                       host:
      mysmtp.site.url                       port: 1010                       user:
      myuser                       password: mypassword                     nodeSelector:                       tech_stack:
      php                       pvc: "true"                     podSecurityContext:                       enabled:
      true                       fsGroup: 1001                     containerSecurityContext:                       enabled:
      true                       runAsUser: 1001                     ci: true                     extraInitContainers:                       -
      name: build-frontend                         image: node:14                         imagePullPolicy:
      Always                         command:                           - bash                           -
      -c                           - |                             git -c core.sshCommand="ssh
      -i ~/.ssh/id_rsa" clone git@github.com:saritasa-nest/xxx.git -b develop ~/xxx                             cd
      ~/xxx                             npm install                             npm
      run build:embedded-questionnaire                             cp -Rf $(pwd)/dist/*
      /bitnami/wordpress/wp-content/                             echo "Copied built
      files into /bitnami/wordpress/wp-content/"                             ls -la
      /bitnami/wordpress/wp-content/                             echo "Done BUILD
      FRONTEND"                         volumeMounts:                         - mountPath:
      /bitnami/wordpress                           name: wordpress-data                           subPath:
      wordpress                         - mountPath: /home/node/.ssh/id_rsa                           name:
      xxx-ssh-key                           subPath: ssh-privatekey                         -
      mountPath: /home/node/.ssh/known_hosts                           name: github-known-hosts                           subPath:
      config.ssh                         securityContext:                           runAsNonRoot:
      true                           runAsUser: 1000                           allowPrivilegeEscalation:
      false                     extraVolumesSshKeySecret: xxx-wordpress-deploy-key                     extraVolumes:                     -
      name: xxx-ssh-key                       secret:                         secretName:
      xxx-deploy-key                     ingress:                       hostname:
      test.xxx.site.url                       annotations:                         kubernetes.io/ingress.class:
      "nginx"                         cert-manager.io/cluster-issuer: "letsencrypt-prod"                         nginx.ingress.kubernetes.io/proxy-body-size:
      100m                         nginx.ingress.kubernetes.io/client-max-body-size:
      100m                         nginx.ingress.kubernetes.io/server-snippet: |-                           add_header
      X-Robots-Tag "noindex, nofollow, nosnippet, noarchive";                         nginx.ingress.kubernetes.io/whitelist-source-range:
      |                           35.85.92.224/32,                           100.21.244.185/32                       extraHosts:                         -
      name: test.xxx.site.url                           path: /wp-admin                     externalDatabase:                       host:
      "xxx.xxx.us-west-2.rds.amazonaws.com"                       user: "xxx-wp-user-dev"                       existingSecret:
      "xxx-wordpress-dev-externaldb"                       database: "xxx-wp-dev"                     wordpressExtraConfigContent:
      |                       @ini_set(''WP_MEMORY_LIMIT'', ''512M'');                       @ini_set(''ALLOW_UNFILTERED_UPLOADS'',
      true);                     extraEnvVars:                       KEY: VALUE                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template                  - name: frontend                   repository:
      xxx-frontend                   pipeline: buildpack-frontend-build-pipeline                   applicationURL:
      https://app.xxx.site.url                   eventlistener:                     template:
      buildpack-frontend-build-pipeline-trigger-template                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/frontend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ``` '
    digest: de357d0a8abfe92c85fbd57b127c928f51a1101d188cd67d5b7067378c373a3b
    maintainers:
    - email: nospam@saritasa.com
      name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-apps
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-apps-0.1.23-dev/saritasa-tekton-apps-0.1.23-dev.tgz
    version: 0.1.23-dev
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2022-09-23T03:38:14.364681946Z"
    description: 'A Helm chart for tekton apps (rbac, eventlistener)  Implements:
      - dynamic records for eventlistener - PVCs - RBAC - configmaps for each app
      - triggerbindings for each app - kubernetes job to make sure the PVCs are bound
      and argocd marks the app as healthy - argocd project for each app - argocd application
      for each app component  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then declare dynamic list of projects (and associated components of that
      project like backend, api, frontend, etc) that would be dynamically added into
      the tekton''s eventlistener manifest.  Each component should be a separate git
      repository.  ```yaml --- apiVersion: argoproj.io/v1alpha1 kind: Application
      metadata:   name: tekton-apps   namespace: argo-cd   finalizers:   - resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "41" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-apps     helm:       values: |         environment: staging         gitBranchPrefixes:           -
      staging         storageClassName: gp3         nodeSelector:           ops: ''true''         aws:           region:
      "us-west-2"           dns: staging.site.com         defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com         argocd:           server:
      deploy.staging.site.com         eventlistener:           enableWebhookSecret:
      true         apps:           - project: vp             enabled: true             argocd:               labels:                 created-by:
      xxx                 ops-main: xxx                 ops-secondary: xxx                 pm:
      xxx                 tm: xxx               namespace: prod             mailList:
      vp@site.com             devopsMailList: devops+vp@site.com             jiraURL:
      https://site.atlassian.net/browse/vp             tektonURL: https://tekton.staging.site.com/#/namespaces/ci/pipelineruns             slack:
      client-vp-ci             kubernetesRepository:               name: vp-kubernetes-aws               branch:
      main               url: git@github.com:org-name/vp-kubernetes-aws.git              components:               -
      name: backend                 repository: vp-backend                 pipeline:
      buildpack-django-build-pipeline                 applicationURL: https://api.staging.site.com                 eventlistener:                   template:
      buildpack-django-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/backend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/builder:v1                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/runner:v1               -
      name: frontend                 repository: vp-frontend                 pipeline:
      buildpack-frontend-build-pipeline                 applicationURL: https://staging.site.com                 eventlistener:                   template:
      buildpack-frontend-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/frontend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/builder:full                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/runner:full                   -
      name: source_subpath                     value: dist/web          # make sure
      PVCs are bound after the chart is synced         # by temporarily mount them
      into short-live job.         runPostInstallMountPvcJob: false      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.16"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true    ```    Above helm chart creates a new ArgoCD project
      for each project in values, for each component in project''s components there
      is created a separate ArgoCD   application and required for Tekton ci/cd resources
      (triggerbindings, roles, configmaps, jobs, serviceaccounts, pvcs and etc).    #
      fill below parameters for each `project` block    - apps[PROJECT].environment
      - possbility to define custom project''s environment, needed for cases when
      need to deploy `dev` and `prod` envs to the same cluster. For example `xxx`
      dev     and prod both deployed in rocks EKS (not required)   - apps[PROJECT].enabled
      - boolean value to define whether the project enabled or not (required)   -
      apps[PROJECT].argocd.labels - labels which are added to ArgoCD project (required)   -
      apps[PROJECT].argocd.namespace - allowed for ArgoCD project namespace (required)   -
      apps[PROJECT].argocd.syncWave - ArgoCD project sync wave, i.e. sequence in which
      project should be synced (not required, default: "200")   - apps[PROJECT].argocd.sourceRepos[]
      - source repositories added to ArgoCD project (not required, default: [<apps[PROJECT].kubernetesRepository.url>])   -
      apps[PROJECT].argocd.extraDestinationNamespaces[] - adds extra destination namespaces
      for ArgoCD project to be able to create custom apps within project''s kubernetes
      repo (not required, default: null)   - apps[PROJECT].mailList - project''s team
      email address (required)   - apps[PROJECT].devopsMailList - project''s devops
      team email address (required)   - apps[PROJECT].jiraURL - project''s JIRA url
      (required)   - apps[PROJECT].tektonURL - link to Tekton pipelineruns used in
      Tekton ConfigMap as `TEKTON_URL` during Slack notification send (required)   -
      apps[PROJECT].slack - project''s Slack channel name (required)   - apps[PROJECT].kubernetesRepository.name
      - project''s kubernetes repository name used in ArgoCD application and Tekton
      TriggerBinding (may be absent and replaced with     `apps[PROJECT].components[NAME].argocd`
      and `apps[PROJECT].argocd.sourceRepos[]` blocks in case if project has no kubernetes
      repo)   - apps[PROJECT].kubernetesRepository.branch - project''s kubernetes
      repository branch used in ArgoCD application and Tekton TriggerBinding (may
      be absent and replaced     with `apps[PROJECT].components[NAME].argocd` and
      `apps[PROJECT].argocd.sourceRepos[]` blocks in case if project has no kubernetes
      repo)   - apps[PROJECT].kubernetesRepository.url - project''s kubernetes repository
      url used in ArgoCD application and Tekton TriggerBinding (may be absent and
      replaced with     `apps[PROJECT].components[NAME].argocd` and `apps[PROJECT].argocd.sourceRepos[]`
      blocks in case if project has no kubernetes repo)    Basically we have 2 different
      types of ci/cd - basic (buildpacks, kaniko) and wordpress ones. So depending
      on project''s component type you will need to fill different parameters.    #
      fill below parameters for each `component` block    - apps[PROJECT].components[NAME].repository
      - the name of the repository containing the code (may be absent in case of wordpress
      application without deployment, i.e. bolrdswp, taco,     saritasa-wordpress-demo)   -
      apps[PROJECT].components[NAME].pipeline - the name of the pipeline building
      the code from the repository above   - apps[PROJECT].components[NAME].argocd.source.syncWave
      - custom component ArgoCD application sync wave (default: "210")   - apps[PROJECT].components[NAME].argocd.source.path
      - path to directory responsible for kubernetes resources creation of the ArgoCD
      Application (default: kubernetes repo path for basic     projects "apps/<apps[PROJECT].components[NAME].name>/manifests/<environment>"
      or "null" for wordpress projects)   - apps[PROJECT].components[NAME].argocd.source.repoUrl
      - url of repository which should be used for ArgoCD Application (default: kubernetes
      repo for basic projects     "<apps[PROJECT].kubernetesRepository.url>" or `https://charts.bitnami.com/bitnami`
      for wordpress projects)   - apps[PROJECT].components[NAME].argocd.source.targetRevision
      - tag or branch in the repository for ArgoCD Application (default: kubernetes
      branch for basic projects     "<apps[PROJECT].kubernetesRepository.branch>"
      or "11.0.14" for wordpress projects)   - apps[PROJECT].components[NAME].argocd.ignoreDeploymentReplicasDiff
      - flag whether this exact ArgoCD application should ignore `Replicas` count
      differences for deployments. It may be needed for `staging` and `prod` environments
      which use HPA (default: false)   - apps[PROJECT].components[NAME].applicationURL
      - url that should be used in tekton build ConfigMap `APPLICATION_URL` param   -
      apps[PROJECT].components[NAME].tektonKubernetesRepoDeployKeyName - name of existing
      in kubernetes cluster secret with SSH key to kubernetes repository, used in
      `kustomize` deployment     step (i.e. addon-backend-deploy-key). This param
      sets by default to `<project>-kubernetes-aws-deploy-key` if project has `kubernetesRepository`
      param in values (actual only for basic     components, not wordpress)   - apps[PROJECT].components[NAME].eventlistener.template
      - the name of the trigger template for the component to be used   - apps[PROJECT].components[NAME].eventlistener.enableWebhookSecret
      - should you enable the git web hook for this particular app/component in the
      eventlistener configuration   - apps[PROJECT].components[NAME].eventlistener.filter
      - custom filter for the component of the eventlistener   - apps[PROJECT].components[NAME].eventlistener.extraOverlays
      - extra overlays to be added into the eventlistener for the component   - apps[PROJECT].components[NAME].eventlistener.eventTypes
      - github event types to trigger the ci/cd   - apps[PROJECT].components[NAME].eventlistener.gitWebhookBranches[]
      - list of branches, push to which triggers ci/cd   - apps[PROJECT].components[NAME].extraBuildConfigParams
      - additional key/values to be added into `build-pipeline-config configmap` ConfigMap
      associated with the app   - apps[PROJECT].components[NAME].triggerBinding -
      values to be added into the TriggerBinding manifest except default ones    What
      is important to know is that any key defined in apps[PROJECT].components[NAME].triggerBinding
      would be added as is   into the generated triggerbinding associated with your
      app. However the chart renders some default values based on the values   in
      this values.yaml file:      - application, project, environment, docker_registry,
      kubernetes_repository_ssh_url, kubernetes_branch, kubernetes_repository_kustomize_path,
      source_subpath (for basic components)     - application, project, environment,
      namespace (for wordpress components)     # fill below parameters block only
      for `wordpress` components    - apps[PROJECT].components[NAME].wordpress.imageTag
      - tag of the wordpress image (default: "5.7.2")   - apps[PROJECT].components[NAME].wordpress.repository_ssh_url
      - project''s wordpress repository SSH url (default: null, may be absent if project
      has no wordpress repo)   - apps[PROJECT].components[NAME].wordpress.resources
      - wordpress pod resources params (default: requests.cpu: 100m, requests.memory:
      128Mi)   - apps[PROJECT].components[NAME].wordpress.commonLabels - wordpress
      pod common labels (default: commonLabels.tech_stack: php, commonLabels.application:
      wordpress)   - apps[PROJECT].components[NAME].wordpress.wordpressTablePrefix
      - wordpress DB tables prefix (default: wp_)   - apps[PROJECT].components[NAME].wordpress.existingSecret
      - name of existing in kubernetes secret with wp admin auth info (default: "<project_name>-<component_name>-<env>",     i.e.
      "taco-wordpress-dev")   - apps[PROJECT].components[NAME].wordpress.updateStrategy
      - strategy that should be used for wordpress pod update (default: updateStrategy.type:
      RollingUpdate,     updateStrategy.rollingUpdate.maxSurge: 0%, updateStrategy.rollingUpdate.maxUnavailable:
      100%, i.e. stop old pod and then create a new one)   - apps[PROJECT].components[NAME].wordpress.smtp.host
      - SMTP host for sending emails (default: mailhog.mailhog.svc.cluster.local)   -
      apps[PROJECT].components[NAME].wordpress.smtp.port - SMTP port for sending emails
      (default: 1025)   - apps[PROJECT].components[NAME].wordpress.smtp.user - SMTP
      user for sending emails (default: <project_name>, i.e. taco)   - apps[PROJECT].components[NAME].wordpress.smtp.password
      - SMTP password for sending emails (default: anypassword)   - apps[PROJECT].components[NAME].wordpress.nodeSelector
      - wordpress pod node selector params (default: nodeSelector.tech_stack: php,
      nodeSelector.pvc: "true")   - apps[PROJECT].components[NAME].wordpress.podSecurityContext
      - wordpress pod''s security context params (default: podSecurityContext.enabled:
      true, podSecurityContext.fsGroup: 1000)   - apps[PROJECT].components[NAME].wordpress.containerSecurityContext
      - wordpress pod container''s security context params (default: containerSecurityContext.enabled:
      true,     containerSecurityContext.runAsUser: 1000)   - apps[PROJECT].components[NAME].wordpress.ci
      - boolean flag which defines whether wordpress project has ci/cd or not (default:
      true)   - apps[PROJECT].components[NAME].wordpress.extraInitContainers - extra
      ci/cd init containers if needed, enabled only if wordpress component has `ci`
      flag enabled (default: null)   - apps[PROJECT].components[NAME].wordpress.extraVolumesSshKeySecret
      - name of a secret with wordpress repository SSH url (default: "<project_name>-<component_name>-deploy-key",     i.e.
      "taco-wordpress-deploy-key")   - apps[PROJECT].components[NAME].wordpress.extraVolumes
      - extra volumes that might be needed to wordpress pod (default: null)   - apps[PROJECT].components[NAME].wordpress.ingress.hostname
      - wordpress ingress hostname (default: "<project_name>.saritasa.rocks", i.e.
      "taco.saritasa.rocks")   - apps[PROJECT].components[NAME].wordpress.ingress.annotations
      - wordpress ingress annotations (default: kubernetes.io/ingress.class: "nginx",
      cert-manager.io/cluster-issuer: "letsencrypt-prod",     nginx.ingress.kubernetes.io/proxy-body-size:
      100m, nginx.ingress.kubernetes.io/proxy-connect-timeout: "300", nginx.ingress.kubernetes.io/proxy-next-upstream-timeout:
      "300",     nginx.ingress.kubernetes.io/auth-type: basic, nginx.ingress.kubernetes.io/auth-secret:
      <ingress.authSecret>, nginx.ingress.kubernetes.io/auth-realm: "Authentication
      Required",     nginx.ingress.kubernetes.io/server-snippet: |-,   add_header
      X-Robots-Tag "noindex, nofollow, nosnippet, noarchive")   - apps[PROJECT].components[NAME].wordpress.ingress.authSecret
      - name of kubernetes secret that should be used in ingress for basic auth (default:
      "<project_name>-<compinent_name>-<env>-basic-auth",     i.e. "taco-wordpress-dev-basic-auth")   -
      apps[PROJECT].components[NAME].wordpress.ingress.extraHosts - list of extra
      hosts that may be defined in ingress (default: null)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.host
      - wordpress DB host (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.user
      - wordpress DB user (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.existingSecret
      - name of existing in kubernetes secret with DB user password (required)   -
      apps[PROJECT].components[NAME].wordpress.externalDatabase.database - wordpress
      DB name (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.port
      - wordpress DB port (default: 3306)   - apps[PROJECT].components[NAME].wordpress.wordpressExtraConfigContent
      - wordpress extra configs if needed (default: null)   - apps[PROJECT].components[NAME].wordpress.extraEnvVars
      - wordpress extra env vars if needed (default: null)    Example of values with
      extra `eventlistener` and `extraBuildConfigParams` in component:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           gitBranchPrefixes:             -
      staging           storageClassName: gp2           aws:             region: "us-west-2"             dns:
      staging.site.com           defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com           argocd:             server:
      deploy.staging.site.com           eventlistener:             enableWebhookSecret:
      true           apps:             - project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: prod               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.site.com/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack                   applicationURL: https://api.site.com                   eventlistener:                     template:
      buildpack-backend-build-pipeline-trigger-template                   extraBuildConfigParams:
      # what additional K/V pairs you want to add into the build-pipeline-config configmap                     KEY:
      value                   triggerBinding:                     - name: docker_registry_repository                       value:
      XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/backend                     - name:
      buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/runner:v1                 -
      name: frontend                   repository: xxx-frontend                   pipeline:
      buildpack                   applicationURL: https://site.com                   eventlistener:                     enableWebhookSecret:
      false                     filter: (body.ref.startsWith(''refs/heads/develop'')
      || body.ref.startsWith(''refs/heads/release/''))                     template:
      buildpack-frontend-build-pipeline-trigger-template                     extraOverlays:
      []                     # - key: truncated_sha                     #   expression:
      "body.head_commit.id.truncate(7)"                     eventTypes: ["pull_request",
      "push"]                   extraBuildConfigParams: {}                   triggerBinding:                     -
      name: docker_registry_repository                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/frontend                     -
      name: buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web            # make
      sure PVCs are bound after the chart is synced           # by temporarily mount
      them into short-live job.           runPostInstallMountPvcJob: false        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true    ```    Example of
      old application from `saritasa-clients` repo, which has no separate `kubernetes`
      repository. Here we replace `apps[PROJECT].kubernetesRepository` block with   `apps[PROJECT].argocd.sourceRepos`
      and `apps[PROJECT].components[NAME].argocd` block, also it is required to set
      `apps[PROJECT].components[NAME].tektonKubernetesRepoDeployKeyName`   in such
      a case to use correct secret with deploy key as far as there is no kubernetes
      repo that is used by default.    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      git@github.com:saritasa-nest/xxx-backend.git                   - git@github.com:saritasa-nest/xxx-frontend.git               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: backend                   repository:
      xxx-backend                   pipeline: buildpack-django-build-pipeline                   applicationURL:
      https://api.xxx.site.url                   argocd:                     source:                       path:
      .kubernetes/manifests/dev                       repoUrl: git@github.com:saritasa-nest/xxx-backend.git                       targetRevision:
      develop                   eventlistener:                     template: buildpack-django-build-pipeline-trigger-template                   tektonKubernetesRepoDeployKeyName:
      xxx-backend-deploy-key                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1                 -
      name: frontend                   repository: xxx-frontend                   pipeline:
      buildpack-frontend-build-pipeline                   applicationURL: https://xxx.site.url                   argocd:                     source:                       path:
      .kubernetes/manifests/dev                       repoUrl: git@github.com:saritasa-nest/xxx-frontend.git                       targetRevision:
      develop                   eventlistener:                     template: buildpack-frontend-build-pipeline-trigger-template                   tektonKubernetesRepoDeployKeyName:
      xxx-frontend-deploy-key                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/frontend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Example with
      creating an ArgoCD project and application with its custom `environment` (case
      when in common `staging` environment we need to create for some reason project
      with   `dev` environment). Here is added an extra `apps[PROJECT].environment`
      param, which overrides default `environment` in helm values for this project,
      and   `apps[PROJECT].components[NAME].eventlistener.gitWebhookBranches` param,
      which defines that ci/cd should be trigger on push to `develop` branch.    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack-django-build-pipeline                   applicationURL: https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Also there might
      a situation that you would like to provision custom utility ArgoCD Application
      in argo-cd from project''s kubernetes repo (for example VP project provisions   like
      this `jitsi` application). To reach this you might need to add an extra destination
      namespace to ArgoCD Project, you should use   `apps[PROJECT].argocd.extraDestinationNamespaces[]`
      param for that like in below example.    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev                 extraDestinationNamespaces:                   -
      argo-cd               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack-django-build-pipeline                   applicationURL: https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    If you want
      to enable ignoring deployment replicas count differences in ArgoCD application
      of your component add `apps[PROJECT].components[NAME].argocd.ignoreDeploymentReplicasDiff:
      true` flag like in the below example (it may be needed for `staging` and `prod`
      envs, where you have horizontal pod autoscheduling - HPA):    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev                 extraDestinationNamespaces:                   -
      argo-cd               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   argocd:                     ignoreDeploymentReplicasDiff:
      true                   pipeline: buildpack-django-build-pipeline                   applicationURL:
      https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Simple wordpress
      application example filled by default:    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: wordpress                   repository:
      xxx-wordpress                   pipeline: wordpress-build-pipeline                   applicationURL:
      https://xxx.site.url                   wordpress:                     repository_ssh_url:
      git@github.com:saritasa-nest/xxx-wordpress.git                     externalDatabase:                       host:
      xxx.xxx.us-west-2.rds.amazonaws.com                       user: xxx-wordpress-user-dev                       existingSecret:
      xxx-wordpress-dev-externaldb                       database: xxx-wordpress-dev                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Simple wordpress
      application example filled by default, but without ci/cd:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: wordpress                   repository:
      xxx-wordpress                   pipeline: wordpress-build-pipeline                   applicationURL:
      https://xxx.site.url                   wordpress:                     ci: false                     externalDatabase:                       host:
      xxx.xxx.us-west-2.rds.amazonaws.com                       user: xxx-wordpress-user-dev                       existingSecret:
      xxx-wordpress-dev-externaldb                       database: xxx-wordpress-dev                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    More difficult
      example of project containing `wordpress` and `frontend` component. Also defined
      for example all extra wordpress params that could be set:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami                   - git@github.com:saritasa-nest/xxx-kubernetes-aws.git               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: wordpress                   repository: xxx-wordpress                   pipeline:
      wordpress-build-pipeline                   applicationURL: https://xxx.site.url                   wordpress:                     imageTag:
      "5.8.1"                     repository_ssh_url: "git@github.com:saritasa-nest/xxx-wordpress.git"                     resources:                       requests:                         memory:
      512Mi                         cpu: 100m                     commonLabels:                       tech_stack:
      php                       application: wordpress                     wordpressTablePrefix:
      "qbf_"                     existingSecret: xxx-wordpress                     updateStrategy:                       type:
      RollingUpdate                       rollingUpdate:                         maxSurge:
      25%                         maxUnavailable: 25%                     smtp:                       host:
      mysmtp.site.url                       port: 1010                       user:
      myuser                       password: mypassword                     nodeSelector:                       tech_stack:
      php                       pvc: "true"                     podSecurityContext:                       enabled:
      true                       fsGroup: 1001                     containerSecurityContext:                       enabled:
      true                       runAsUser: 1001                     ci: true                     extraInitContainers:                       -
      name: build-frontend                         image: node:14                         imagePullPolicy:
      Always                         command:                           - bash                           -
      -c                           - |                             git -c core.sshCommand="ssh
      -i ~/.ssh/id_rsa" clone git@github.com:saritasa-nest/xxx.git -b develop ~/xxx                             cd
      ~/xxx                             npm install                             npm
      run build:embedded-questionnaire                             cp -Rf $(pwd)/dist/*
      /bitnami/wordpress/wp-content/                             echo "Copied built
      files into /bitnami/wordpress/wp-content/"                             ls -la
      /bitnami/wordpress/wp-content/                             echo "Done BUILD
      FRONTEND"                         volumeMounts:                         - mountPath:
      /bitnami/wordpress                           name: wordpress-data                           subPath:
      wordpress                         - mountPath: /home/node/.ssh/id_rsa                           name:
      xxx-ssh-key                           subPath: ssh-privatekey                         -
      mountPath: /home/node/.ssh/known_hosts                           name: github-known-hosts                           subPath:
      config.ssh                         securityContext:                           runAsNonRoot:
      true                           runAsUser: 1000                           allowPrivilegeEscalation:
      false                     extraVolumesSshKeySecret: xxx-wordpress-deploy-key                     extraVolumes:                     -
      name: xxx-ssh-key                       secret:                         secretName:
      xxx-deploy-key                     ingress:                       hostname:
      test.xxx.site.url                       annotations:                         kubernetes.io/ingress.class:
      "nginx"                         cert-manager.io/cluster-issuer: "letsencrypt-prod"                         nginx.ingress.kubernetes.io/proxy-body-size:
      100m                         nginx.ingress.kubernetes.io/client-max-body-size:
      100m                         nginx.ingress.kubernetes.io/server-snippet: |-                           add_header
      X-Robots-Tag "noindex, nofollow, nosnippet, noarchive";                         nginx.ingress.kubernetes.io/whitelist-source-range:
      |                           35.85.92.224/32,                           100.21.244.185/32                       extraHosts:                         -
      name: test.xxx.site.url                           path: /wp-admin                     externalDatabase:                       host:
      "xxx.xxx.us-west-2.rds.amazonaws.com"                       user: "xxx-wp-user-dev"                       existingSecret:
      "xxx-wordpress-dev-externaldb"                       database: "xxx-wp-dev"                     wordpressExtraConfigContent:
      |                       @ini_set(''WP_MEMORY_LIMIT'', ''512M'');                       @ini_set(''ALLOW_UNFILTERED_UPLOADS'',
      true);                     extraEnvVars:                       KEY: VALUE                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template                  - name: frontend                   repository:
      xxx-frontend                   pipeline: buildpack-frontend-build-pipeline                   applicationURL:
      https://app.xxx.site.url                   eventlistener:                     template:
      buildpack-frontend-build-pipeline-trigger-template                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/frontend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ``` '
    digest: 4071b42378dbff2eae70ec044b8a11af361c9d5deb5d05bf13dd364d3a17f5c8
    maintainers:
    - email: nospam@saritasa.com
      name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-apps
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-apps-0.1.23-dev/saritasa-tekton-apps-0.1.23-dev.tgz
    version: 0.1.23-dev
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2022-09-23T06:17:03.884798924Z"
    description: 'A Helm chart for tekton apps (rbac, eventlistener)  Implements:
      - dynamic records for eventlistener - PVCs - RBAC - configmaps for each app
      - triggerbindings for each app - kubernetes job to make sure the PVCs are bound
      and argocd marks the app as healthy - argocd project for each app - argocd application
      for each app component  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then declare dynamic list of projects (and associated components of that
      project like backend, api, frontend, etc) that would be dynamically added into
      the tekton''s eventlistener manifest.  Each component should be a separate git
      repository.  ```yaml --- apiVersion: argoproj.io/v1alpha1 kind: Application
      metadata:   name: tekton-apps   namespace: argo-cd   finalizers:   - resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "41" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-apps     helm:       values: |         environment: staging         gitBranchPrefixes:           -
      staging         storageClassName: gp3         nodeSelector:           ops: ''true''         aws:           region:
      "us-west-2"           dns: staging.site.com         defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com         argocd:           server:
      deploy.staging.site.com         eventlistener:           enableWebhookSecret:
      true         apps:           - project: vp             enabled: true             argocd:               labels:                 created-by:
      xxx                 ops-main: xxx                 ops-secondary: xxx                 pm:
      xxx                 tm: xxx               namespace: prod             mailList:
      vp@site.com             devopsMailList: devops+vp@site.com             jiraURL:
      https://site.atlassian.net/browse/vp             tektonURL: https://tekton.staging.site.com/#/namespaces/ci/pipelineruns             slack:
      client-vp-ci             kubernetesRepository:               name: vp-kubernetes-aws               branch:
      main               url: git@github.com:org-name/vp-kubernetes-aws.git              components:               -
      name: backend                 repository: vp-backend                 pipeline:
      buildpack-django-build-pipeline                 applicationURL: https://api.staging.site.com                 eventlistener:                   template:
      buildpack-django-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/backend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/builder:v1                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/runner:v1               -
      name: frontend                 repository: vp-frontend                 pipeline:
      buildpack-frontend-build-pipeline                 applicationURL: https://staging.site.com                 eventlistener:                   template:
      buildpack-frontend-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/frontend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/builder:full                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/runner:full                   -
      name: source_subpath                     value: dist/web          # make sure
      PVCs are bound after the chart is synced         # by temporarily mount them
      into short-live job.         runPostInstallMountPvcJob: false      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.16"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true    ```    Above helm chart creates a new ArgoCD project
      for each project in values, for each component in project''s components there
      is created a separate ArgoCD   application and required for Tekton ci/cd resources
      (triggerbindings, roles, configmaps, jobs, serviceaccounts, pvcs and etc).    #
      fill below parameters for each `project` block    - apps[PROJECT].environment
      - possbility to define custom project''s environment, needed for cases when
      need to deploy `dev` and `prod` envs to the same cluster. For example `xxx`
      dev     and prod both deployed in rocks EKS (not required)   - apps[PROJECT].enabled
      - boolean value to define whether the project enabled or not (required)   -
      apps[PROJECT].argocd.labels - labels which are added to ArgoCD project (required)   -
      apps[PROJECT].argocd.namespace - allowed for ArgoCD project namespace (required)   -
      apps[PROJECT].argocd.syncWave - ArgoCD project sync wave, i.e. sequence in which
      project should be synced (not required, default: "200")   - apps[PROJECT].argocd.sourceRepos[]
      - source repositories added to ArgoCD project (not required, default: [<apps[PROJECT].kubernetesRepository.url>])   -
      apps[PROJECT].argocd.extraDestinationNamespaces[] - adds extra destination namespaces
      for ArgoCD project to be able to create custom apps within project''s kubernetes
      repo (not required, default: null)   - apps[PROJECT].mailList - project''s team
      email address (required)   - apps[PROJECT].devopsMailList - project''s devops
      team email address (required)   - apps[PROJECT].jiraURL - project''s JIRA url
      (required)   - apps[PROJECT].tektonURL - link to Tekton pipelineruns used in
      Tekton ConfigMap as `TEKTON_URL` during Slack notification send (required)   -
      apps[PROJECT].slack - project''s Slack channel name (required)   - apps[PROJECT].kubernetesRepository.name
      - project''s kubernetes repository name used in ArgoCD application and Tekton
      TriggerBinding (may be absent and replaced with     `apps[PROJECT].components[NAME].argocd`
      and `apps[PROJECT].argocd.sourceRepos[]` blocks in case if project has no kubernetes
      repo)   - apps[PROJECT].kubernetesRepository.branch - project''s kubernetes
      repository branch used in ArgoCD application and Tekton TriggerBinding (may
      be absent and replaced     with `apps[PROJECT].components[NAME].argocd` and
      `apps[PROJECT].argocd.sourceRepos[]` blocks in case if project has no kubernetes
      repo)   - apps[PROJECT].kubernetesRepository.url - project''s kubernetes repository
      url used in ArgoCD application and Tekton TriggerBinding (may be absent and
      replaced with     `apps[PROJECT].components[NAME].argocd` and `apps[PROJECT].argocd.sourceRepos[]`
      blocks in case if project has no kubernetes repo)    Basically we have 2 different
      types of ci/cd - basic (buildpacks, kaniko) and wordpress ones. So depending
      on project''s component type you will need to fill different parameters.    #
      fill below parameters for each `component` block    - apps[PROJECT].components[NAME].repository
      - the name of the repository containing the code (may be absent in case of wordpress
      application without deployment, i.e. bolrdswp, taco,     saritasa-wordpress-demo)   -
      apps[PROJECT].components[NAME].pipeline - the name of the pipeline building
      the code from the repository above   - apps[PROJECT].components[NAME].argocd.source.syncWave
      - custom component ArgoCD application sync wave (default: "210")   - apps[PROJECT].components[NAME].argocd.source.path
      - path to directory responsible for kubernetes resources creation of the ArgoCD
      Application (default: kubernetes repo path for basic     projects "apps/<apps[PROJECT].components[NAME].name>/manifests/<environment>"
      or "null" for wordpress projects)   - apps[PROJECT].components[NAME].argocd.source.repoUrl
      - url of repository which should be used for ArgoCD Application (default: kubernetes
      repo for basic projects     "<apps[PROJECT].kubernetesRepository.url>" or `https://charts.bitnami.com/bitnami`
      for wordpress projects)   - apps[PROJECT].components[NAME].argocd.source.targetRevision
      - tag or branch in the repository for ArgoCD Application (default: kubernetes
      branch for basic projects     "<apps[PROJECT].kubernetesRepository.branch>"
      or "11.0.14" for wordpress projects)   - apps[PROJECT].components[NAME].argocd.ignoreDeploymentReplicasDiff
      - flag whether this exact ArgoCD application should ignore `Replicas` count
      differences for deployments. It may be needed for `staging` and `prod` environments
      which use HPA (default: false)   - apps[PROJECT].components[NAME].applicationURL
      - url that should be used in tekton build ConfigMap `APPLICATION_URL` param   -
      apps[PROJECT].components[NAME].tektonKubernetesRepoDeployKeyName - name of existing
      in kubernetes cluster secret with SSH key to kubernetes repository, used in
      `kustomize` deployment     step (i.e. addon-backend-deploy-key). This param
      sets by default to `<project>-kubernetes-aws-deploy-key` if project has `kubernetesRepository`
      param in values (actual only for basic     components, not wordpress)   - apps[PROJECT].components[NAME].eventlistener.template
      - the name of the trigger template for the component to be used   - apps[PROJECT].components[NAME].eventlistener.enableWebhookSecret
      - should you enable the git web hook for this particular app/component in the
      eventlistener configuration   - apps[PROJECT].components[NAME].eventlistener.filter
      - custom filter for the component of the eventlistener   - apps[PROJECT].components[NAME].eventlistener.extraOverlays
      - extra overlays to be added into the eventlistener for the component   - apps[PROJECT].components[NAME].eventlistener.eventTypes
      - github event types to trigger the ci/cd   - apps[PROJECT].components[NAME].eventlistener.gitWebhookBranches[]
      - list of branches, push to which triggers ci/cd   - apps[PROJECT].components[NAME].extraBuildConfigParams
      - additional key/values to be added into `build-pipeline-config configmap` ConfigMap
      associated with the app   - apps[PROJECT].components[NAME].triggerBinding -
      values to be added into the TriggerBinding manifest except default ones    What
      is important to know is that any key defined in apps[PROJECT].components[NAME].triggerBinding
      would be added as is   into the generated triggerbinding associated with your
      app. However the chart renders some default values based on the values   in
      this values.yaml file:      - application, project, environment, docker_registry,
      kubernetes_repository_ssh_url, kubernetes_branch, kubernetes_repository_kustomize_path,
      source_subpath (for basic components)     - application, project, environment,
      namespace (for wordpress components)     # fill below parameters block only
      for `wordpress` components    - apps[PROJECT].components[NAME].wordpress.imageTag
      - tag of the wordpress image (default: "5.7.2")   - apps[PROJECT].components[NAME].wordpress.repository_ssh_url
      - project''s wordpress repository SSH url (default: null, may be absent if project
      has no wordpress repo)   - apps[PROJECT].components[NAME].wordpress.resources
      - wordpress pod resources params (default: requests.cpu: 100m, requests.memory:
      128Mi)   - apps[PROJECT].components[NAME].wordpress.commonLabels - wordpress
      pod common labels (default: commonLabels.tech_stack: php, commonLabels.application:
      wordpress)   - apps[PROJECT].components[NAME].wordpress.wordpressTablePrefix
      - wordpress DB tables prefix (default: wp_)   - apps[PROJECT].components[NAME].wordpress.existingSecret
      - name of existing in kubernetes secret with wp admin auth info (default: "<project_name>-<component_name>-<env>",     i.e.
      "taco-wordpress-dev")   - apps[PROJECT].components[NAME].wordpress.updateStrategy
      - strategy that should be used for wordpress pod update (default: updateStrategy.type:
      RollingUpdate,     updateStrategy.rollingUpdate.maxSurge: 0%, updateStrategy.rollingUpdate.maxUnavailable:
      100%, i.e. stop old pod and then create a new one)   - apps[PROJECT].components[NAME].wordpress.smtp.host
      - SMTP host for sending emails (default: mailhog.mailhog.svc.cluster.local)   -
      apps[PROJECT].components[NAME].wordpress.smtp.port - SMTP port for sending emails
      (default: 1025)   - apps[PROJECT].components[NAME].wordpress.smtp.user - SMTP
      user for sending emails (default: <project_name>, i.e. taco)   - apps[PROJECT].components[NAME].wordpress.smtp.password
      - SMTP password for sending emails (default: anypassword)   - apps[PROJECT].components[NAME].wordpress.nodeSelector
      - wordpress pod node selector params (default: nodeSelector.tech_stack: php,
      nodeSelector.pvc: "true")   - apps[PROJECT].components[NAME].wordpress.podSecurityContext
      - wordpress pod''s security context params (default: podSecurityContext.enabled:
      true, podSecurityContext.fsGroup: 1000)   - apps[PROJECT].components[NAME].wordpress.containerSecurityContext
      - wordpress pod container''s security context params (default: containerSecurityContext.enabled:
      true,     containerSecurityContext.runAsUser: 1000)   - apps[PROJECT].components[NAME].wordpress.ci
      - boolean flag which defines whether wordpress project has ci/cd or not (default:
      true)   - apps[PROJECT].components[NAME].wordpress.extraInitContainers - extra
      ci/cd init containers if needed, enabled only if wordpress component has `ci`
      flag enabled (default: null)   - apps[PROJECT].components[NAME].wordpress.extraVolumesSshKeySecret
      - name of a secret with wordpress repository SSH url (default: "<project_name>-<component_name>-deploy-key",     i.e.
      "taco-wordpress-deploy-key")   - apps[PROJECT].components[NAME].wordpress.extraVolumes
      - extra volumes that might be needed to wordpress pod (default: null)   - apps[PROJECT].components[NAME].wordpress.ingress.hostname
      - wordpress ingress hostname (default: "<project_name>.saritasa.rocks", i.e.
      "taco.saritasa.rocks")   - apps[PROJECT].components[NAME].wordpress.ingress.annotations
      - wordpress ingress annotations (default: kubernetes.io/ingress.class: "nginx",
      cert-manager.io/cluster-issuer: "letsencrypt-prod",     nginx.ingress.kubernetes.io/proxy-body-size:
      100m, nginx.ingress.kubernetes.io/proxy-connect-timeout: "300", nginx.ingress.kubernetes.io/proxy-next-upstream-timeout:
      "300",     nginx.ingress.kubernetes.io/auth-type: basic, nginx.ingress.kubernetes.io/auth-secret:
      <ingress.authSecret>, nginx.ingress.kubernetes.io/auth-realm: "Authentication
      Required",     nginx.ingress.kubernetes.io/server-snippet: |-,   add_header
      X-Robots-Tag "noindex, nofollow, nosnippet, noarchive")   - apps[PROJECT].components[NAME].wordpress.ingress.authSecret
      - name of kubernetes secret that should be used in ingress for basic auth (default:
      "<project_name>-<compinent_name>-<env>-basic-auth",     i.e. "taco-wordpress-dev-basic-auth")   -
      apps[PROJECT].components[NAME].wordpress.ingress.extraHosts - list of extra
      hosts that may be defined in ingress (default: null)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.host
      - wordpress DB host (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.user
      - wordpress DB user (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.existingSecret
      - name of existing in kubernetes secret with DB user password (required)   -
      apps[PROJECT].components[NAME].wordpress.externalDatabase.database - wordpress
      DB name (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.port
      - wordpress DB port (default: 3306)   - apps[PROJECT].components[NAME].wordpress.wordpressExtraConfigContent
      - wordpress extra configs if needed (default: null)   - apps[PROJECT].components[NAME].wordpress.extraEnvVars
      - wordpress extra env vars if needed (default: null)    Example of values with
      extra `eventlistener` and `extraBuildConfigParams` in component:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           gitBranchPrefixes:             -
      staging           storageClassName: gp2           aws:             region: "us-west-2"             dns:
      staging.site.com           defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com           argocd:             server:
      deploy.staging.site.com           eventlistener:             enableWebhookSecret:
      true           apps:             - project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: prod               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.site.com/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack                   applicationURL: https://api.site.com                   eventlistener:                     template:
      buildpack-backend-build-pipeline-trigger-template                   extraBuildConfigParams:
      # what additional K/V pairs you want to add into the build-pipeline-config configmap                     KEY:
      value                   triggerBinding:                     - name: docker_registry_repository                       value:
      XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/backend                     - name:
      buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/runner:v1                 -
      name: frontend                   repository: xxx-frontend                   pipeline:
      buildpack                   applicationURL: https://site.com                   eventlistener:                     enableWebhookSecret:
      false                     filter: (body.ref.startsWith(''refs/heads/develop'')
      || body.ref.startsWith(''refs/heads/release/''))                     template:
      buildpack-frontend-build-pipeline-trigger-template                     extraOverlays:
      []                     # - key: truncated_sha                     #   expression:
      "body.head_commit.id.truncate(7)"                     eventTypes: ["pull_request",
      "push"]                   extraBuildConfigParams: {}                   triggerBinding:                     -
      name: docker_registry_repository                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/frontend                     -
      name: buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web            # make
      sure PVCs are bound after the chart is synced           # by temporarily mount
      them into short-live job.           runPostInstallMountPvcJob: false        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true    ```    Example of
      old application from `saritasa-clients` repo, which has no separate `kubernetes`
      repository. Here we replace `apps[PROJECT].kubernetesRepository` block with   `apps[PROJECT].argocd.sourceRepos`
      and `apps[PROJECT].components[NAME].argocd` block, also it is required to set
      `apps[PROJECT].components[NAME].tektonKubernetesRepoDeployKeyName`   in such
      a case to use correct secret with deploy key as far as there is no kubernetes
      repo that is used by default.    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      git@github.com:saritasa-nest/xxx-backend.git                   - git@github.com:saritasa-nest/xxx-frontend.git               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: backend                   repository:
      xxx-backend                   pipeline: buildpack-django-build-pipeline                   applicationURL:
      https://api.xxx.site.url                   argocd:                     source:                       path:
      .kubernetes/manifests/dev                       repoUrl: git@github.com:saritasa-nest/xxx-backend.git                       targetRevision:
      develop                   eventlistener:                     template: buildpack-django-build-pipeline-trigger-template                   tektonKubernetesRepoDeployKeyName:
      xxx-backend-deploy-key                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1                 -
      name: frontend                   repository: xxx-frontend                   pipeline:
      buildpack-frontend-build-pipeline                   applicationURL: https://xxx.site.url                   argocd:                     source:                       path:
      .kubernetes/manifests/dev                       repoUrl: git@github.com:saritasa-nest/xxx-frontend.git                       targetRevision:
      develop                   eventlistener:                     template: buildpack-frontend-build-pipeline-trigger-template                   tektonKubernetesRepoDeployKeyName:
      xxx-frontend-deploy-key                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/frontend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Example with
      creating an ArgoCD project and application with its custom `environment` (case
      when in common `staging` environment we need to create for some reason project
      with   `dev` environment). Here is added an extra `apps[PROJECT].environment`
      param, which overrides default `environment` in helm values for this project,
      and   `apps[PROJECT].components[NAME].eventlistener.gitWebhookBranches` param,
      which defines that ci/cd should be trigger on push to `develop` branch.    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack-django-build-pipeline                   applicationURL: https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Also there might
      a situation that you would like to provision custom utility ArgoCD Application
      in argo-cd from project''s kubernetes repo (for example VP project provisions   like
      this `jitsi` application). To reach this you might need to add an extra destination
      namespace to ArgoCD Project, you should use   `apps[PROJECT].argocd.extraDestinationNamespaces[]`
      param for that like in below example.    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev                 extraDestinationNamespaces:                   -
      argo-cd               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack-django-build-pipeline                   applicationURL: https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    If you want
      to enable ignoring deployment replicas count differences in ArgoCD application
      of your component add `apps[PROJECT].components[NAME].argocd.ignoreDeploymentReplicasDiff:
      true` flag like in the below example (it may be needed for `staging` and `prod`
      envs, where you have horizontal pod autoscheduling - HPA):    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev                 extraDestinationNamespaces:                   -
      argo-cd               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   argocd:                     ignoreDeploymentReplicasDiff:
      true                   pipeline: buildpack-django-build-pipeline                   applicationURL:
      https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Simple wordpress
      application example filled by default:    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: wordpress                   repository:
      xxx-wordpress                   pipeline: wordpress-build-pipeline                   applicationURL:
      https://xxx.site.url                   wordpress:                     repository_ssh_url:
      git@github.com:saritasa-nest/xxx-wordpress.git                     externalDatabase:                       host:
      xxx.xxx.us-west-2.rds.amazonaws.com                       user: xxx-wordpress-user-dev                       existingSecret:
      xxx-wordpress-dev-externaldb                       database: xxx-wordpress-dev                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Simple wordpress
      application example filled by default, but without ci/cd:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: wordpress                   repository:
      xxx-wordpress                   pipeline: wordpress-build-pipeline                   applicationURL:
      https://xxx.site.url                   wordpress:                     ci: false                     externalDatabase:                       host:
      xxx.xxx.us-west-2.rds.amazonaws.com                       user: xxx-wordpress-user-dev                       existingSecret:
      xxx-wordpress-dev-externaldb                       database: xxx-wordpress-dev                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    More difficult
      example of project containing `wordpress` and `frontend` component. Also defined
      for example all extra wordpress params that could be set:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami                   - git@github.com:saritasa-nest/xxx-kubernetes-aws.git               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: wordpress                   repository: xxx-wordpress                   pipeline:
      wordpress-build-pipeline                   applicationURL: https://xxx.site.url                   wordpress:                     imageTag:
      "5.8.1"                     repository_ssh_url: "git@github.com:saritasa-nest/xxx-wordpress.git"                     resources:                       requests:                         memory:
      512Mi                         cpu: 100m                     commonLabels:                       tech_stack:
      php                       application: wordpress                     wordpressTablePrefix:
      "qbf_"                     existingSecret: xxx-wordpress                     updateStrategy:                       type:
      RollingUpdate                       rollingUpdate:                         maxSurge:
      25%                         maxUnavailable: 25%                     smtp:                       host:
      mysmtp.site.url                       port: 1010                       user:
      myuser                       password: mypassword                     nodeSelector:                       tech_stack:
      php                       pvc: "true"                     podSecurityContext:                       enabled:
      true                       fsGroup: 1001                     containerSecurityContext:                       enabled:
      true                       runAsUser: 1001                     ci: true                     extraInitContainers:                       -
      name: build-frontend                         image: node:14                         imagePullPolicy:
      Always                         command:                           - bash                           -
      -c                           - |                             git -c core.sshCommand="ssh
      -i ~/.ssh/id_rsa" clone git@github.com:saritasa-nest/xxx.git -b develop ~/xxx                             cd
      ~/xxx                             npm install                             npm
      run build:embedded-questionnaire                             cp -Rf $(pwd)/dist/*
      /bitnami/wordpress/wp-content/                             echo "Copied built
      files into /bitnami/wordpress/wp-content/"                             ls -la
      /bitnami/wordpress/wp-content/                             echo "Done BUILD
      FRONTEND"                         volumeMounts:                         - mountPath:
      /bitnami/wordpress                           name: wordpress-data                           subPath:
      wordpress                         - mountPath: /home/node/.ssh/id_rsa                           name:
      xxx-ssh-key                           subPath: ssh-privatekey                         -
      mountPath: /home/node/.ssh/known_hosts                           name: github-known-hosts                           subPath:
      config.ssh                         securityContext:                           runAsNonRoot:
      true                           runAsUser: 1000                           allowPrivilegeEscalation:
      false                     extraVolumesSshKeySecret: xxx-wordpress-deploy-key                     extraVolumes:                     -
      name: xxx-ssh-key                       secret:                         secretName:
      xxx-deploy-key                     ingress:                       hostname:
      test.xxx.site.url                       annotations:                         kubernetes.io/ingress.class:
      "nginx"                         cert-manager.io/cluster-issuer: "letsencrypt-prod"                         nginx.ingress.kubernetes.io/proxy-body-size:
      100m                         nginx.ingress.kubernetes.io/client-max-body-size:
      100m                         nginx.ingress.kubernetes.io/server-snippet: |-                           add_header
      X-Robots-Tag "noindex, nofollow, nosnippet, noarchive";                         nginx.ingress.kubernetes.io/whitelist-source-range:
      |                           35.85.92.224/32,                           100.21.244.185/32                       extraHosts:                         -
      name: test.xxx.site.url                           path: /wp-admin                     externalDatabase:                       host:
      "xxx.xxx.us-west-2.rds.amazonaws.com"                       user: "xxx-wp-user-dev"                       existingSecret:
      "xxx-wordpress-dev-externaldb"                       database: "xxx-wp-dev"                     wordpressExtraConfigContent:
      |                       @ini_set(''WP_MEMORY_LIMIT'', ''512M'');                       @ini_set(''ALLOW_UNFILTERED_UPLOADS'',
      true);                     extraEnvVars:                       KEY: VALUE                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template                  - name: frontend                   repository:
      xxx-frontend                   pipeline: buildpack-frontend-build-pipeline                   applicationURL:
      https://app.xxx.site.url                   eventlistener:                     template:
      buildpack-frontend-build-pipeline-trigger-template                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/frontend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ``` '
    digest: 2469eee3d22022b21843e430dad2b9fd8dac748ba4ec2dec6e1093fffe3c0aa0
    maintainers:
    - email: nospam@saritasa.com
      name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-apps
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-apps-0.1.23-dev/saritasa-tekton-apps-0.1.23-dev.tgz
    version: 0.1.23-dev
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2022-09-21T08:51:09.24729741Z"
    description: 'A Helm chart for tekton apps (rbac, eventlistener)  Implements:
      - dynamic records for eventlistener - PVCs - RBAC - configmaps for each app
      - triggerbindings for each app - kubernetes job to make sure the PVCs are bound
      and argocd marks the app as healthy - argocd project for each app - argocd application
      for each app component  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then declare dynamic list of projects (and associated components of that
      project like backend, api, frontend, etc) that would be dynamically added into
      the tekton''s eventlistener manifest.  Each component should be a separate git
      repository.  ```yaml --- apiVersion: argoproj.io/v1alpha1 kind: Application
      metadata:   name: tekton-apps   namespace: argo-cd   finalizers:   - resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "41" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-apps     helm:       values: |         environment: staging         gitBranchPrefixes:           -
      staging         storageClassName: gp3         nodeSelector:           ops: ''true''         aws:           region:
      "us-west-2"           dns: staging.site.com         defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com         argocd:           server:
      deploy.staging.site.com         eventlistener:           enableWebhookSecret:
      true         apps:           - project: vp             enabled: true             argocd:               labels:                 created-by:
      xxx                 ops-main: xxx                 ops-secondary: xxx                 pm:
      xxx                 tm: xxx               namespace: prod             mailList:
      vp@site.com             devopsMailList: devops+vp@site.com             jiraURL:
      https://site.atlassian.net/browse/vp             tektonURL: https://tekton.staging.site.com/#/namespaces/ci/pipelineruns             slack:
      client-vp-ci             kubernetesRepository:               name: vp-kubernetes-aws               branch:
      main               url: git@github.com:org-name/vp-kubernetes-aws.git              components:               -
      name: backend                 repository: vp-backend                 pipeline:
      buildpack-django-build-pipeline                 applicationURL: https://api.staging.site.com                 eventlistener:                   template:
      buildpack-django-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/backend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/builder:v1                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/runner:v1               -
      name: frontend                 repository: vp-frontend                 pipeline:
      buildpack-frontend-build-pipeline                 applicationURL: https://staging.site.com                 eventlistener:                   template:
      buildpack-frontend-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/frontend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/builder:full                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/runner:full                   -
      name: source_subpath                     value: dist/web          # make sure
      PVCs are bound after the chart is synced         # by temporarily mount them
      into short-live job.         runPostInstallMountPvcJob: false      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.16"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true    ```    Above helm chart creates a new ArgoCD project
      for each project in values, for each component in project''s components there
      is created a separate ArgoCD   application and required for Tekton ci/cd resources
      (triggerbindings, roles, configmaps, jobs, serviceaccounts, pvcs and etc).    #
      fill below parameters for each `project` block    - apps[PROJECT].environment
      - possbility to define custom project''s environment, needed for cases when
      need to deploy `dev` and `prod` envs to the same cluster. For example `xxx`
      dev     and prod both deployed in rocks EKS (not required)   - apps[PROJECT].enabled
      - boolean value to define whether the project enabled or not (required)   -
      apps[PROJECT].argocd.labels - labels which are added to ArgoCD project (required)   -
      apps[PROJECT].argocd.namespace - allowed for ArgoCD project namespace (required)   -
      apps[PROJECT].argocd.syncWave - ArgoCD project sync wave, i.e. sequence in which
      project should be synced (not required, default: "200")   - apps[PROJECT].argocd.sourceRepos[]
      - source repositories added to ArgoCD project (not required, default: [<apps[PROJECT].kubernetesRepository.url>])   -
      apps[PROJECT].argocd.extraDestinationNamespaces[] - adds extra destination namespaces
      for ArgoCD project to be able to create custom apps within project''s kubernetes
      repo (not required, default: null)   - apps[PROJECT].mailList - project''s team
      email address (required)   - apps[PROJECT].devopsMailList - project''s devops
      team email address (required)   - apps[PROJECT].jiraURL - project''s JIRA url
      (required)   - apps[PROJECT].tektonURL - link to Tekton pipelineruns used in
      Tekton ConfigMap as `TEKTON_URL` during Slack notification send (required)   -
      apps[PROJECT].slack - project''s Slack channel name (required)   - apps[PROJECT].kubernetesRepository.name
      - project''s kubernetes repository name used in ArgoCD application and Tekton
      TriggerBinding (may be absent and replaced with     `apps[PROJECT].components[NAME].argocd`
      and `apps[PROJECT].argocd.sourceRepos[]` blocks in case if project has no kubernetes
      repo)   - apps[PROJECT].kubernetesRepository.branch - project''s kubernetes
      repository branch used in ArgoCD application and Tekton TriggerBinding (may
      be absent and replaced     with `apps[PROJECT].components[NAME].argocd` and
      `apps[PROJECT].argocd.sourceRepos[]` blocks in case if project has no kubernetes
      repo)   - apps[PROJECT].kubernetesRepository.url - project''s kubernetes repository
      url used in ArgoCD application and Tekton TriggerBinding (may be absent and
      replaced with     `apps[PROJECT].components[NAME].argocd` and `apps[PROJECT].argocd.sourceRepos[]`
      blocks in case if project has no kubernetes repo)    Basically we have 2 different
      types of ci/cd - basic (buildpacks, kaniko) and wordpress ones. So depending
      on project''s component type you will need to fill different parameters.    #
      fill below parameters for each `component` block    - apps[PROJECT].components[NAME].repository
      - the name of the repository containing the code (may be absent in case of wordpress
      application without deployment, i.e. bolrdswp, taco,     saritasa-wordpress-demo)   -
      apps[PROJECT].components[NAME].pipeline - the name of the pipeline building
      the code from the repository above   - apps[PROJECT].components[NAME].argocd.source.syncWave
      - custom component ArgoCD application sync wave (default: "210")   - apps[PROJECT].components[NAME].argocd.source.path
      - path to directory responsible for kubernetes resources creation of the ArgoCD
      Application (default: kubernetes repo path for basic     projects "apps/<apps[PROJECT].components[NAME].name>/manifests/<environment>"
      or "null" for wordpress projects)   - apps[PROJECT].components[NAME].argocd.source.repoUrl
      - url of repository which should be used for ArgoCD Application (default: kubernetes
      repo for basic projects     "<apps[PROJECT].kubernetesRepository.url>" or `https://charts.bitnami.com/bitnami`
      for wordpress projects)   - apps[PROJECT].components[NAME].argocd.source.targetRevision
      - tag or branch in the repository for ArgoCD Application (default: kubernetes
      branch for basic projects     "<apps[PROJECT].kubernetesRepository.branch>"
      or "11.0.14" for wordpress projects)   - apps[PROJECT].components[NAME].argocd.ignoreDeploymentReplicasDiff
      - flag whether this exact ArgoCD application should ignore `Replicas` count
      differences for deployments. It may be needed for `staging` and `prod` environments
      which use HPA (default: false)   - apps[PROJECT].components[NAME].applicationURL
      - url that should be used in tekton build ConfigMap `APPLICATION_URL` param   -
      apps[PROJECT].components[NAME].tektonKubernetesRepoDeployKeyName - name of existing
      in kubernetes cluster secret with SSH key to kubernetes repository, used in
      `kustomize` deployment     step (i.e. addon-backend-deploy-key). This param
      sets by default to `<project>-kubernetes-aws-deploy-key` if project has `kubernetesRepository`
      param in values (actual only for basic     components, not wordpress)   - apps[PROJECT].components[NAME].eventlistener.template
      - the name of the trigger template for the component to be used   - apps[PROJECT].components[NAME].eventlistener.enableWebhookSecret
      - should you enable the git web hook for this particular app/component in the
      eventlistener configuration   - apps[PROJECT].components[NAME].eventlistener.filter
      - custom filter for the component of the eventlistener   - apps[PROJECT].components[NAME].eventlistener.extraOverlays
      - extra overlays to be added into the eventlistener for the component   - apps[PROJECT].components[NAME].eventlistener.eventTypes
      - github event types to trigger the ci/cd   - apps[PROJECT].components[NAME].eventlistener.gitWebhookBranches[]
      - list of branches, push to which triggers ci/cd   - apps[PROJECT].components[NAME].extraBuildConfigParams
      - additional key/values to be added into `build-pipeline-config configmap` ConfigMap
      associated with the app   - apps[PROJECT].components[NAME].triggerBinding -
      values to be added into the TriggerBinding manifest except default ones    What
      is important to know is that any key defined in apps[PROJECT].components[NAME].triggerBinding
      would be added as is   into the generated triggerbinding associated with your
      app. However the chart renders some default values based on the values   in
      this values.yaml file:      - application, project, environment, docker_registry,
      kubernetes_repository_ssh_url, kubernetes_branch, kubernetes_repository_kustomize_path,
      source_subpath (for basic components)     - application, project, environment,
      namespace (for wordpress components)     # fill below parameters block only
      for `wordpress` components    - apps[PROJECT].components[NAME].wordpress.imageTag
      - tag of the wordpress image (default: "5.7.2")   - apps[PROJECT].components[NAME].wordpress.repository_ssh_url
      - project''s wordpress repository SSH url (default: null, may be absent if project
      has no wordpress repo)   - apps[PROJECT].components[NAME].wordpress.resources
      - wordpress pod resources params (default: requests.cpu: 100m, requests.memory:
      128Mi)   - apps[PROJECT].components[NAME].wordpress.commonLabels - wordpress
      pod common labels (default: commonLabels.tech_stack: php, commonLabels.application:
      wordpress)   - apps[PROJECT].components[NAME].wordpress.wordpressTablePrefix
      - wordpress DB tables prefix (default: wp_)   - apps[PROJECT].components[NAME].wordpress.existingSecret
      - name of existing in kubernetes secret with wp admin auth info (default: "<project_name>-<component_name>-<env>",     i.e.
      "taco-wordpress-dev")   - apps[PROJECT].components[NAME].wordpress.updateStrategy
      - strategy that should be used for wordpress pod update (default: updateStrategy.type:
      RollingUpdate,     updateStrategy.rollingUpdate.maxSurge: 0%, updateStrategy.rollingUpdate.maxUnavailable:
      100%, i.e. stop old pod and then create a new one)   - apps[PROJECT].components[NAME].wordpress.smtp.host
      - SMTP host for sending emails (default: mailhog.mailhog.svc.cluster.local)   -
      apps[PROJECT].components[NAME].wordpress.smtp.port - SMTP port for sending emails
      (default: 1025)   - apps[PROJECT].components[NAME].wordpress.smtp.user - SMTP
      user for sending emails (default: <project_name>, i.e. taco)   - apps[PROJECT].components[NAME].wordpress.smtp.password
      - SMTP password for sending emails (default: anypassword)   - apps[PROJECT].components[NAME].wordpress.nodeSelector
      - wordpress pod node selector params (default: nodeSelector.tech_stack: php,
      nodeSelector.pvc: "true")   - apps[PROJECT].components[NAME].wordpress.podSecurityContext
      - wordpress pod''s security context params (default: podSecurityContext.enabled:
      true, podSecurityContext.fsGroup: 1000)   - apps[PROJECT].components[NAME].wordpress.containerSecurityContext
      - wordpress pod container''s security context params (default: containerSecurityContext.enabled:
      true,     containerSecurityContext.runAsUser: 1000)   - apps[PROJECT].components[NAME].wordpress.ci
      - boolean flag which defines whether wordpress project has ci/cd or not (default:
      true)   - apps[PROJECT].components[NAME].wordpress.extraInitContainers - extra
      ci/cd init containers if needed, enabled only if wordpress component has `ci`
      flag enabled (default: null)   - apps[PROJECT].components[NAME].wordpress.extraVolumesSshKeySecret
      - name of a secret with wordpress repository SSH url (default: "<project_name>-<component_name>-deploy-key",     i.e.
      "taco-wordpress-deploy-key")   - apps[PROJECT].components[NAME].wordpress.extraVolumes
      - extra volumes that might be needed to wordpress pod (default: null)   - apps[PROJECT].components[NAME].wordpress.ingress.hostname
      - wordpress ingress hostname (default: "<project_name>.saritasa.rocks", i.e.
      "taco.saritasa.rocks")   - apps[PROJECT].components[NAME].wordpress.ingress.annotations
      - wordpress ingress annotations (default: kubernetes.io/ingress.class: "nginx",
      cert-manager.io/cluster-issuer: "letsencrypt-prod",     nginx.ingress.kubernetes.io/proxy-body-size:
      100m, nginx.ingress.kubernetes.io/proxy-connect-timeout: "300", nginx.ingress.kubernetes.io/proxy-next-upstream-timeout:
      "300",     nginx.ingress.kubernetes.io/auth-type: basic, nginx.ingress.kubernetes.io/auth-secret:
      <ingress.authSecret>, nginx.ingress.kubernetes.io/auth-realm: "Authentication
      Required",     nginx.ingress.kubernetes.io/server-snippet: |-,   add_header
      X-Robots-Tag "noindex, nofollow, nosnippet, noarchive")   - apps[PROJECT].components[NAME].wordpress.ingress.authSecret
      - name of kubernetes secret that should be used in ingress for basic auth (default:
      "<project_name>-<compinent_name>-<env>-basic-auth",     i.e. "taco-wordpress-dev-basic-auth")   -
      apps[PROJECT].components[NAME].wordpress.ingress.extraHosts - list of extra
      hosts that may be defined in ingress (default: null)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.host
      - wordpress DB host (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.user
      - wordpress DB user (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.existingSecret
      - name of existing in kubernetes secret with DB user password (required)   -
      apps[PROJECT].components[NAME].wordpress.externalDatabase.database - wordpress
      DB name (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.port
      - wordpress DB port (default: 3306)   - apps[PROJECT].components[NAME].wordpress.wordpressExtraConfigContent
      - wordpress extra configs if needed (default: null)   - apps[PROJECT].components[NAME].wordpress.extraEnvVars
      - wordpress extra env vars if needed (default: null)    Example of values with
      extra `eventlistener` and `extraBuildConfigParams` in component:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           gitBranchPrefixes:             -
      staging           storageClassName: gp2           aws:             region: "us-west-2"             dns:
      staging.site.com           defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com           argocd:             server:
      deploy.staging.site.com           eventlistener:             enableWebhookSecret:
      true           apps:             - project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: prod               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.site.com/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack                   applicationURL: https://api.site.com                   eventlistener:                     template:
      buildpack-backend-build-pipeline-trigger-template                   extraBuildConfigParams:
      # what additional K/V pairs you want to add into the build-pipeline-config configmap                     KEY:
      value                   triggerBinding:                     - name: docker_registry_repository                       value:
      XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/backend                     - name:
      buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/runner:v1                 -
      name: frontend                   repository: xxx-frontend                   pipeline:
      buildpack                   applicationURL: https://site.com                   eventlistener:                     enableWebhookSecret:
      false                     filter: (body.ref.startsWith(''refs/heads/develop'')
      || body.ref.startsWith(''refs/heads/release/''))                     template:
      buildpack-frontend-build-pipeline-trigger-template                     extraOverlays:
      []                     # - key: truncated_sha                     #   expression:
      "body.head_commit.id.truncate(7)"                     eventTypes: ["pull_request",
      "push"]                   extraBuildConfigParams: {}                   triggerBinding:                     -
      name: docker_registry_repository                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/frontend                     -
      name: buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web            # make
      sure PVCs are bound after the chart is synced           # by temporarily mount
      them into short-live job.           runPostInstallMountPvcJob: false        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true    ```    Example of
      old application from `saritasa-clients` repo, which has no separate `kubernetes`
      repository. Here we replace `apps[PROJECT].kubernetesRepository` block with   `apps[PROJECT].argocd.sourceRepos`
      and `apps[PROJECT].components[NAME].argocd` block, also it is required to set
      `apps[PROJECT].components[NAME].tektonKubernetesRepoDeployKeyName`   in such
      a case to use correct secret with deploy key as far as there is no kubernetes
      repo that is used by default.    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      git@github.com:saritasa-nest/xxx-backend.git                   - git@github.com:saritasa-nest/xxx-frontend.git               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: backend                   repository:
      xxx-backend                   pipeline: buildpack-django-build-pipeline                   applicationURL:
      https://api.xxx.site.url                   argocd:                     source:                       path:
      .kubernetes/manifests/dev                       repoUrl: git@github.com:saritasa-nest/xxx-backend.git                       targetRevision:
      develop                   eventlistener:                     template: buildpack-django-build-pipeline-trigger-template                   tektonKubernetesRepoDeployKeyName:
      xxx-backend-deploy-key                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1                 -
      name: frontend                   repository: xxx-frontend                   pipeline:
      buildpack-frontend-build-pipeline                   applicationURL: https://xxx.site.url                   argocd:                     source:                       path:
      .kubernetes/manifests/dev                       repoUrl: git@github.com:saritasa-nest/xxx-frontend.git                       targetRevision:
      develop                   eventlistener:                     template: buildpack-frontend-build-pipeline-trigger-template                   tektonKubernetesRepoDeployKeyName:
      xxx-frontend-deploy-key                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/frontend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Example with
      creating an ArgoCD project and application with its custom `environment` (case
      when in common `staging` environment we need to create for some reason project
      with   `dev` environment). Here is added an extra `apps[PROJECT].environment`
      param, which overrides default `environment` in helm values for this project,
      and   `apps[PROJECT].components[NAME].eventlistener.gitWebhookBranches` param,
      which defines that ci/cd should be trigger on push to `develop` branch.    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack-django-build-pipeline                   applicationURL: https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Also there might
      a situation that you would like to provision custom utility ArgoCD Application
      in argo-cd from project''s kubernetes repo (for example VP project provisions   like
      this `jitsi` application). To reach this you might need to add an extra destination
      namespace to ArgoCD Project, you should use   `apps[PROJECT].argocd.extraDestinationNamespaces[]`
      param for that like in below example.    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev                 extraDestinationNamespaces:                   -
      argo-cd               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack-django-build-pipeline                   applicationURL: https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    If you want
      to enable ignoring deployment replicas count differences in ArgoCD application
      of your component add `apps[PROJECT].components[NAME].argocd.ignoreDeploymentReplicasDiff:
      true` flag like in the below example (it may be needed for `staging` and `prod`
      envs, where you have horizontal pod autoscheduling - HPA):    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev                 extraDestinationNamespaces:                   -
      argo-cd               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   argocd:                     ignoreDeploymentReplicasDiff:
      true                   pipeline: buildpack-django-build-pipeline                   applicationURL:
      https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Simple wordpress
      application example filled by default:    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: wordpress                   repository:
      xxx-wordpress                   pipeline: wordpress-build-pipeline                   applicationURL:
      https://xxx.site.url                   wordpress:                     repository_ssh_url:
      git@github.com:saritasa-nest/xxx-wordpress.git                     externalDatabase:                       host:
      xxx.xxx.us-west-2.rds.amazonaws.com                       user: xxx-wordpress-user-dev                       existingSecret:
      xxx-wordpress-dev-externaldb                       database: xxx-wordpress-dev                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Simple wordpress
      application example filled by default, but without ci/cd:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: wordpress                   repository:
      xxx-wordpress                   pipeline: wordpress-build-pipeline                   applicationURL:
      https://xxx.site.url                   wordpress:                     ci: false                     externalDatabase:                       host:
      xxx.xxx.us-west-2.rds.amazonaws.com                       user: xxx-wordpress-user-dev                       existingSecret:
      xxx-wordpress-dev-externaldb                       database: xxx-wordpress-dev                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    More difficult
      example of project containing `wordpress` and `frontend` component. Also defined
      for example all extra wordpress params that could be set:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami                   - git@github.com:saritasa-nest/xxx-kubernetes-aws.git               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: wordpress                   repository: xxx-wordpress                   pipeline:
      wordpress-build-pipeline                   applicationURL: https://xxx.site.url                   wordpress:                     imageTag:
      "5.8.1"                     repository_ssh_url: "git@github.com:saritasa-nest/xxx-wordpress.git"                     resources:                       requests:                         memory:
      512Mi                         cpu: 100m                     commonLabels:                       tech_stack:
      php                       application: wordpress                     wordpressTablePrefix:
      "qbf_"                     existingSecret: xxx-wordpress                     updateStrategy:                       type:
      RollingUpdate                       rollingUpdate:                         maxSurge:
      25%                         maxUnavailable: 25%                     smtp:                       host:
      mysmtp.site.url                       port: 1010                       user:
      myuser                       password: mypassword                     nodeSelector:                       tech_stack:
      php                       pvc: "true"                     podSecurityContext:                       enabled:
      true                       fsGroup: 1001                     containerSecurityContext:                       enabled:
      true                       runAsUser: 1001                     ci: true                     extraInitContainers:                       -
      name: build-frontend                         image: node:14                         imagePullPolicy:
      Always                         command:                           - bash                           -
      -c                           - |                             git -c core.sshCommand="ssh
      -i ~/.ssh/id_rsa" clone git@github.com:saritasa-nest/xxx.git -b develop ~/xxx                             cd
      ~/xxx                             npm install                             npm
      run build:embedded-questionnaire                             cp -Rf $(pwd)/dist/*
      /bitnami/wordpress/wp-content/                             echo "Copied built
      files into /bitnami/wordpress/wp-content/"                             ls -la
      /bitnami/wordpress/wp-content/                             echo "Done BUILD
      FRONTEND"                         volumeMounts:                         - mountPath:
      /bitnami/wordpress                           name: wordpress-data                           subPath:
      wordpress                         - mountPath: /home/node/.ssh/id_rsa                           name:
      xxx-ssh-key                           subPath: ssh-privatekey                         -
      mountPath: /home/node/.ssh/known_hosts                           name: github-known-hosts                           subPath:
      config.ssh                         securityContext:                           runAsNonRoot:
      true                           runAsUser: 1000                           allowPrivilegeEscalation:
      false                     extraVolumesSshKeySecret: xxx-wordpress-deploy-key                     extraVolumes:                     -
      name: xxx-ssh-key                       secret:                         secretName:
      xxx-deploy-key                     ingress:                       hostname:
      test.xxx.site.url                       annotations:                         kubernetes.io/ingress.class:
      "nginx"                         cert-manager.io/cluster-issuer: "letsencrypt-prod"                         nginx.ingress.kubernetes.io/proxy-body-size:
      100m                         nginx.ingress.kubernetes.io/client-max-body-size:
      100m                         nginx.ingress.kubernetes.io/server-snippet: |-                           add_header
      X-Robots-Tag "noindex, nofollow, nosnippet, noarchive";                         nginx.ingress.kubernetes.io/whitelist-source-range:
      |                           35.85.92.224/32,                           100.21.244.185/32                       extraHosts:                         -
      name: test.xxx.site.url                           path: /wp-admin                     externalDatabase:                       host:
      "xxx.xxx.us-west-2.rds.amazonaws.com"                       user: "xxx-wp-user-dev"                       existingSecret:
      "xxx-wordpress-dev-externaldb"                       database: "xxx-wp-dev"                     wordpressExtraConfigContent:
      |                       @ini_set(''WP_MEMORY_LIMIT'', ''512M'');                       @ini_set(''ALLOW_UNFILTERED_UPLOADS'',
      true);                     extraEnvVars:                       KEY: VALUE                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template                  - name: frontend                   repository:
      xxx-frontend                   pipeline: buildpack-frontend-build-pipeline                   applicationURL:
      https://app.xxx.site.url                   eventlistener:                     template:
      buildpack-frontend-build-pipeline-trigger-template                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/frontend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ``` '
    digest: 79e8d326c2e58c3ef06f74639f17c350942019f41822c763c643c98c37ad2c80
    maintainers:
    - email: nospam@saritasa.com
      name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-apps
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-apps-0.1.23-dev/saritasa-tekton-apps-0.1.23-dev.tgz
    version: 0.1.23-dev
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2022-09-23T06:35:07.381078199Z"
    description: 'A Helm chart for tekton apps (rbac, eventlistener)  Implements:
      - dynamic records for eventlistener - PVCs - RBAC - configmaps for each app
      - triggerbindings for each app - kubernetes job to make sure the PVCs are bound
      and argocd marks the app as healthy - argocd project for each app - argocd application
      for each app component  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then declare dynamic list of projects (and associated components of that
      project like backend, api, frontend, etc) that would be dynamically added into
      the tekton''s eventlistener manifest.  Each component should be a separate git
      repository.  ```yaml --- apiVersion: argoproj.io/v1alpha1 kind: Application
      metadata:   name: tekton-apps   namespace: argo-cd   finalizers:   - resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "41" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-apps     helm:       values: |         environment: staging         gitBranchPrefixes:           -
      staging         storageClassName: gp3         nodeSelector:           ops: ''true''         aws:           region:
      "us-west-2"           dns: staging.site.com         defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com         argocd:           server:
      deploy.staging.site.com         eventlistener:           enableWebhookSecret:
      true         apps:           - project: vp             enabled: true             argocd:               labels:                 created-by:
      xxx                 ops-main: xxx                 ops-secondary: xxx                 pm:
      xxx                 tm: xxx               namespace: prod             mailList:
      vp@site.com             devopsMailList: devops+vp@site.com             jiraURL:
      https://site.atlassian.net/browse/vp             tektonURL: https://tekton.staging.site.com/#/namespaces/ci/pipelineruns             slack:
      client-vp-ci             kubernetesRepository:               name: vp-kubernetes-aws               branch:
      main               url: git@github.com:org-name/vp-kubernetes-aws.git              components:               -
      name: backend                 repository: vp-backend                 pipeline:
      buildpack-django-build-pipeline                 applicationURL: https://api.staging.site.com                 eventlistener:                   template:
      buildpack-django-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/backend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/builder:v1                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/runner:v1               -
      name: frontend                 repository: vp-frontend                 pipeline:
      buildpack-frontend-build-pipeline                 applicationURL: https://staging.site.com                 eventlistener:                   template:
      buildpack-frontend-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/frontend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/builder:full                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/runner:full                   -
      name: source_subpath                     value: dist/web          # make sure
      PVCs are bound after the chart is synced         # by temporarily mount them
      into short-live job.         runPostInstallMountPvcJob: false      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.16"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true    ```    Above helm chart creates a new ArgoCD project
      for each project in values, for each component in project''s components there
      is created a separate ArgoCD   application and required for Tekton ci/cd resources
      (triggerbindings, roles, configmaps, jobs, serviceaccounts, pvcs and etc).    #
      fill below parameters for each `project` block    - apps[PROJECT].environment
      - possbility to define custom project''s environment, needed for cases when
      need to deploy `dev` and `prod` envs to the same cluster. For example `xxx`
      dev     and prod both deployed in rocks EKS (not required)   - apps[PROJECT].enabled
      - boolean value to define whether the project enabled or not (required)   -
      apps[PROJECT].argocd.labels - labels which are added to ArgoCD project (required)   -
      apps[PROJECT].argocd.namespace - allowed for ArgoCD project namespace (required)   -
      apps[PROJECT].argocd.syncWave - ArgoCD project sync wave, i.e. sequence in which
      project should be synced (not required, default: "200")   - apps[PROJECT].argocd.sourceRepos[]
      - source repositories added to ArgoCD project (not required, default: [<apps[PROJECT].kubernetesRepository.url>])   -
      apps[PROJECT].argocd.extraDestinationNamespaces[] - adds extra destination namespaces
      for ArgoCD project to be able to create custom apps within project''s kubernetes
      repo (not required, default: null)   - apps[PROJECT].mailList - project''s team
      email address (required)   - apps[PROJECT].devopsMailList - project''s devops
      team email address (required)   - apps[PROJECT].jiraURL - project''s JIRA url
      (required)   - apps[PROJECT].tektonURL - link to Tekton pipelineruns used in
      Tekton ConfigMap as `TEKTON_URL` during Slack notification send (required)   -
      apps[PROJECT].slack - project''s Slack channel name (required)   - apps[PROJECT].kubernetesRepository.name
      - project''s kubernetes repository name used in ArgoCD application and Tekton
      TriggerBinding (may be absent and replaced with     `apps[PROJECT].components[NAME].argocd`
      and `apps[PROJECT].argocd.sourceRepos[]` blocks in case if project has no kubernetes
      repo)   - apps[PROJECT].kubernetesRepository.branch - project''s kubernetes
      repository branch used in ArgoCD application and Tekton TriggerBinding (may
      be absent and replaced     with `apps[PROJECT].components[NAME].argocd` and
      `apps[PROJECT].argocd.sourceRepos[]` blocks in case if project has no kubernetes
      repo)   - apps[PROJECT].kubernetesRepository.url - project''s kubernetes repository
      url used in ArgoCD application and Tekton TriggerBinding (may be absent and
      replaced with     `apps[PROJECT].components[NAME].argocd` and `apps[PROJECT].argocd.sourceRepos[]`
      blocks in case if project has no kubernetes repo)    Basically we have 2 different
      types of ci/cd - basic (buildpacks, kaniko) and wordpress ones. So depending
      on project''s component type you will need to fill different parameters.    #
      fill below parameters for each `component` block    - apps[PROJECT].components[NAME].repository
      - the name of the repository containing the code (may be absent in case of wordpress
      application without deployment, i.e. bolrdswp, taco,     saritasa-wordpress-demo)   -
      apps[PROJECT].components[NAME].pipeline - the name of the pipeline building
      the code from the repository above   - apps[PROJECT].components[NAME].argocd.source.syncWave
      - custom component ArgoCD application sync wave (default: "210")   - apps[PROJECT].components[NAME].argocd.source.path
      - path to directory responsible for kubernetes resources creation of the ArgoCD
      Application (default: kubernetes repo path for basic     projects "apps/<apps[PROJECT].components[NAME].name>/manifests/<environment>"
      or "null" for wordpress projects)   - apps[PROJECT].components[NAME].argocd.source.repoUrl
      - url of repository which should be used for ArgoCD Application (default: kubernetes
      repo for basic projects     "<apps[PROJECT].kubernetesRepository.url>" or `https://charts.bitnami.com/bitnami`
      for wordpress projects)   - apps[PROJECT].components[NAME].argocd.source.targetRevision
      - tag or branch in the repository for ArgoCD Application (default: kubernetes
      branch for basic projects     "<apps[PROJECT].kubernetesRepository.branch>"
      or "11.0.14" for wordpress projects)   - apps[PROJECT].components[NAME].argocd.ignoreDeploymentReplicasDiff
      - flag whether this exact ArgoCD application should ignore `Replicas` count
      differences for deployments. It may be needed for `staging` and `prod` environments
      which use HPA (default: false)   - apps[PROJECT].components[NAME].applicationURL
      - url that should be used in tekton build ConfigMap `APPLICATION_URL` param   -
      apps[PROJECT].components[NAME].tektonKubernetesRepoDeployKeyName - name of existing
      in kubernetes cluster secret with SSH key to kubernetes repository, used in
      `kustomize` deployment     step (i.e. addon-backend-deploy-key). This param
      sets by default to `<project>-kubernetes-aws-deploy-key` if project has `kubernetesRepository`
      param in values (actual only for basic     components, not wordpress)   - apps[PROJECT].components[NAME].eventlistener.template
      - the name of the trigger template for the component to be used   - apps[PROJECT].components[NAME].eventlistener.enableWebhookSecret
      - should you enable the git web hook for this particular app/component in the
      eventlistener configuration   - apps[PROJECT].components[NAME].eventlistener.filter
      - custom filter for the component of the eventlistener   - apps[PROJECT].components[NAME].eventlistener.extraOverlays
      - extra overlays to be added into the eventlistener for the component   - apps[PROJECT].components[NAME].eventlistener.eventTypes
      - github event types to trigger the ci/cd   - apps[PROJECT].components[NAME].eventlistener.gitWebhookBranches[]
      - list of branches, push to which triggers ci/cd   - apps[PROJECT].components[NAME].extraBuildConfigParams
      - additional key/values to be added into `build-pipeline-config configmap` ConfigMap
      associated with the app   - apps[PROJECT].components[NAME].triggerBinding -
      values to be added into the TriggerBinding manifest except default ones    What
      is important to know is that any key defined in apps[PROJECT].components[NAME].triggerBinding
      would be added as is   into the generated triggerbinding associated with your
      app. However the chart renders some default values based on the values   in
      this values.yaml file:      - application, project, environment, docker_registry,
      kubernetes_repository_ssh_url, kubernetes_branch, kubernetes_repository_kustomize_path,
      source_subpath (for basic components)     - application, project, environment,
      namespace (for wordpress components)     # fill below parameters block only
      for `wordpress` components    - apps[PROJECT].components[NAME].wordpress.imageTag
      - tag of the wordpress image (default: "5.7.2")   - apps[PROJECT].components[NAME].wordpress.repository_ssh_url
      - project''s wordpress repository SSH url (default: null, may be absent if project
      has no wordpress repo)   - apps[PROJECT].components[NAME].wordpress.resources
      - wordpress pod resources params (default: requests.cpu: 100m, requests.memory:
      128Mi)   - apps[PROJECT].components[NAME].wordpress.commonLabels - wordpress
      pod common labels (default: commonLabels.tech_stack: php, commonLabels.application:
      wordpress)   - apps[PROJECT].components[NAME].wordpress.wordpressTablePrefix
      - wordpress DB tables prefix (default: wp_)   - apps[PROJECT].components[NAME].wordpress.existingSecret
      - name of existing in kubernetes secret with wp admin auth info (default: "<project_name>-<component_name>-<env>",     i.e.
      "taco-wordpress-dev")   - apps[PROJECT].components[NAME].wordpress.updateStrategy
      - strategy that should be used for wordpress pod update (default: updateStrategy.type:
      RollingUpdate,     updateStrategy.rollingUpdate.maxSurge: 0%, updateStrategy.rollingUpdate.maxUnavailable:
      100%, i.e. stop old pod and then create a new one)   - apps[PROJECT].components[NAME].wordpress.smtp.host
      - SMTP host for sending emails (default: mailhog.mailhog.svc.cluster.local)   -
      apps[PROJECT].components[NAME].wordpress.smtp.port - SMTP port for sending emails
      (default: 1025)   - apps[PROJECT].components[NAME].wordpress.smtp.user - SMTP
      user for sending emails (default: <project_name>, i.e. taco)   - apps[PROJECT].components[NAME].wordpress.smtp.password
      - SMTP password for sending emails (default: anypassword)   - apps[PROJECT].components[NAME].wordpress.nodeSelector
      - wordpress pod node selector params (default: nodeSelector.tech_stack: php,
      nodeSelector.pvc: "true")   - apps[PROJECT].components[NAME].wordpress.podSecurityContext
      - wordpress pod''s security context params (default: podSecurityContext.enabled:
      true, podSecurityContext.fsGroup: 1000)   - apps[PROJECT].components[NAME].wordpress.containerSecurityContext
      - wordpress pod container''s security context params (default: containerSecurityContext.enabled:
      true,     containerSecurityContext.runAsUser: 1000)   - apps[PROJECT].components[NAME].wordpress.ci
      - boolean flag which defines whether wordpress project has ci/cd or not (default:
      true)   - apps[PROJECT].components[NAME].wordpress.extraInitContainers - extra
      ci/cd init containers if needed, enabled only if wordpress component has `ci`
      flag enabled (default: null)   - apps[PROJECT].components[NAME].wordpress.extraVolumesSshKeySecret
      - name of a secret with wordpress repository SSH url (default: "<project_name>-<component_name>-deploy-key",     i.e.
      "taco-wordpress-deploy-key")   - apps[PROJECT].components[NAME].wordpress.extraVolumes
      - extra volumes that might be needed to wordpress pod (default: null)   - apps[PROJECT].components[NAME].wordpress.ingress.hostname
      - wordpress ingress hostname (default: "<project_name>.saritasa.rocks", i.e.
      "taco.saritasa.rocks")   - apps[PROJECT].components[NAME].wordpress.ingress.annotations
      - wordpress ingress annotations (default: kubernetes.io/ingress.class: "nginx",
      cert-manager.io/cluster-issuer: "letsencrypt-prod",     nginx.ingress.kubernetes.io/proxy-body-size:
      100m, nginx.ingress.kubernetes.io/proxy-connect-timeout: "300", nginx.ingress.kubernetes.io/proxy-next-upstream-timeout:
      "300",     nginx.ingress.kubernetes.io/auth-type: basic, nginx.ingress.kubernetes.io/auth-secret:
      <ingress.authSecret>, nginx.ingress.kubernetes.io/auth-realm: "Authentication
      Required",     nginx.ingress.kubernetes.io/server-snippet: |-,   add_header
      X-Robots-Tag "noindex, nofollow, nosnippet, noarchive")   - apps[PROJECT].components[NAME].wordpress.ingress.authSecret
      - name of kubernetes secret that should be used in ingress for basic auth (default:
      "<project_name>-<compinent_name>-<env>-basic-auth",     i.e. "taco-wordpress-dev-basic-auth")   -
      apps[PROJECT].components[NAME].wordpress.ingress.extraHosts - list of extra
      hosts that may be defined in ingress (default: null)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.host
      - wordpress DB host (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.user
      - wordpress DB user (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.existingSecret
      - name of existing in kubernetes secret with DB user password (required)   -
      apps[PROJECT].components[NAME].wordpress.externalDatabase.database - wordpress
      DB name (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.port
      - wordpress DB port (default: 3306)   - apps[PROJECT].components[NAME].wordpress.wordpressExtraConfigContent
      - wordpress extra configs if needed (default: null)   - apps[PROJECT].components[NAME].wordpress.extraEnvVars
      - wordpress extra env vars if needed (default: null)    Example of values with
      extra `eventlistener` and `extraBuildConfigParams` in component:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           gitBranchPrefixes:             -
      staging           storageClassName: gp2           aws:             region: "us-west-2"             dns:
      staging.site.com           defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com           argocd:             server:
      deploy.staging.site.com           eventlistener:             enableWebhookSecret:
      true           apps:             - project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: prod               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.site.com/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack                   applicationURL: https://api.site.com                   eventlistener:                     template:
      buildpack-backend-build-pipeline-trigger-template                   extraBuildConfigParams:
      # what additional K/V pairs you want to add into the build-pipeline-config configmap                     KEY:
      value                   triggerBinding:                     - name: docker_registry_repository                       value:
      XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/backend                     - name:
      buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/runner:v1                 -
      name: frontend                   repository: xxx-frontend                   pipeline:
      buildpack                   applicationURL: https://site.com                   eventlistener:                     enableWebhookSecret:
      false                     filter: (body.ref.startsWith(''refs/heads/develop'')
      || body.ref.startsWith(''refs/heads/release/''))                     template:
      buildpack-frontend-build-pipeline-trigger-template                     extraOverlays:
      []                     # - key: truncated_sha                     #   expression:
      "body.head_commit.id.truncate(7)"                     eventTypes: ["pull_request",
      "push"]                   extraBuildConfigParams: {}                   triggerBinding:                     -
      name: docker_registry_repository                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/frontend                     -
      name: buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web            # make
      sure PVCs are bound after the chart is synced           # by temporarily mount
      them into short-live job.           runPostInstallMountPvcJob: false        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true    ```    Example of
      old application from `saritasa-clients` repo, which has no separate `kubernetes`
      repository. Here we replace `apps[PROJECT].kubernetesRepository` block with   `apps[PROJECT].argocd.sourceRepos`
      and `apps[PROJECT].components[NAME].argocd` block, also it is required to set
      `apps[PROJECT].components[NAME].tektonKubernetesRepoDeployKeyName`   in such
      a case to use correct secret with deploy key as far as there is no kubernetes
      repo that is used by default.    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      git@github.com:saritasa-nest/xxx-backend.git                   - git@github.com:saritasa-nest/xxx-frontend.git               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: backend                   repository:
      xxx-backend                   pipeline: buildpack-django-build-pipeline                   applicationURL:
      https://api.xxx.site.url                   argocd:                     source:                       path:
      .kubernetes/manifests/dev                       repoUrl: git@github.com:saritasa-nest/xxx-backend.git                       targetRevision:
      develop                   eventlistener:                     template: buildpack-django-build-pipeline-trigger-template                   tektonKubernetesRepoDeployKeyName:
      xxx-backend-deploy-key                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1                 -
      name: frontend                   repository: xxx-frontend                   pipeline:
      buildpack-frontend-build-pipeline                   applicationURL: https://xxx.site.url                   argocd:                     source:                       path:
      .kubernetes/manifests/dev                       repoUrl: git@github.com:saritasa-nest/xxx-frontend.git                       targetRevision:
      develop                   eventlistener:                     template: buildpack-frontend-build-pipeline-trigger-template                   tektonKubernetesRepoDeployKeyName:
      xxx-frontend-deploy-key                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/frontend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Example with
      creating an ArgoCD project and application with its custom `environment` (case
      when in common `staging` environment we need to create for some reason project
      with   `dev` environment). Here is added an extra `apps[PROJECT].environment`
      param, which overrides default `environment` in helm values for this project,
      and   `apps[PROJECT].components[NAME].eventlistener.gitWebhookBranches` param,
      which defines that ci/cd should be trigger on push to `develop` branch.    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack-django-build-pipeline                   applicationURL: https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Also there might
      a situation that you would like to provision custom utility ArgoCD Application
      in argo-cd from project''s kubernetes repo (for example VP project provisions   like
      this `jitsi` application). To reach this you might need to add an extra destination
      namespace to ArgoCD Project, you should use   `apps[PROJECT].argocd.extraDestinationNamespaces[]`
      param for that like in below example.    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev                 extraDestinationNamespaces:                   -
      argo-cd               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack-django-build-pipeline                   applicationURL: https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    If you want
      to enable ignoring deployment replicas count differences in ArgoCD application
      of your component add `apps[PROJECT].components[NAME].argocd.ignoreDeploymentReplicasDiff:
      true` flag like in the below example (it may be needed for `staging` and `prod`
      envs, where you have horizontal pod autoscheduling - HPA):    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev                 extraDestinationNamespaces:                   -
      argo-cd               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   argocd:                     ignoreDeploymentReplicasDiff:
      true                   pipeline: buildpack-django-build-pipeline                   applicationURL:
      https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Simple wordpress
      application example filled by default:    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: wordpress                   repository:
      xxx-wordpress                   pipeline: wordpress-build-pipeline                   applicationURL:
      https://xxx.site.url                   wordpress:                     repository_ssh_url:
      git@github.com:saritasa-nest/xxx-wordpress.git                     externalDatabase:                       host:
      xxx.xxx.us-west-2.rds.amazonaws.com                       user: xxx-wordpress-user-dev                       existingSecret:
      xxx-wordpress-dev-externaldb                       database: xxx-wordpress-dev                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Simple wordpress
      application example filled by default, but without ci/cd:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: wordpress                   repository:
      xxx-wordpress                   pipeline: wordpress-build-pipeline                   applicationURL:
      https://xxx.site.url                   wordpress:                     ci: false                     externalDatabase:                       host:
      xxx.xxx.us-west-2.rds.amazonaws.com                       user: xxx-wordpress-user-dev                       existingSecret:
      xxx-wordpress-dev-externaldb                       database: xxx-wordpress-dev                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    More difficult
      example of project containing `wordpress` and `frontend` component. Also defined
      for example all extra wordpress params that could be set:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami                   - git@github.com:saritasa-nest/xxx-kubernetes-aws.git               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: wordpress                   repository: xxx-wordpress                   pipeline:
      wordpress-build-pipeline                   applicationURL: https://xxx.site.url                   wordpress:                     imageTag:
      "5.8.1"                     repository_ssh_url: "git@github.com:saritasa-nest/xxx-wordpress.git"                     resources:                       requests:                         memory:
      512Mi                         cpu: 100m                     commonLabels:                       tech_stack:
      php                       application: wordpress                     wordpressTablePrefix:
      "qbf_"                     existingSecret: xxx-wordpress                     updateStrategy:                       type:
      RollingUpdate                       rollingUpdate:                         maxSurge:
      25%                         maxUnavailable: 25%                     smtp:                       host:
      mysmtp.site.url                       port: 1010                       user:
      myuser                       password: mypassword                     nodeSelector:                       tech_stack:
      php                       pvc: "true"                     podSecurityContext:                       enabled:
      true                       fsGroup: 1001                     containerSecurityContext:                       enabled:
      true                       runAsUser: 1001                     ci: true                     extraInitContainers:                       -
      name: build-frontend                         image: node:14                         imagePullPolicy:
      Always                         command:                           - bash                           -
      -c                           - |                             git -c core.sshCommand="ssh
      -i ~/.ssh/id_rsa" clone git@github.com:saritasa-nest/xxx.git -b develop ~/xxx                             cd
      ~/xxx                             npm install                             npm
      run build:embedded-questionnaire                             cp -Rf $(pwd)/dist/*
      /bitnami/wordpress/wp-content/                             echo "Copied built
      files into /bitnami/wordpress/wp-content/"                             ls -la
      /bitnami/wordpress/wp-content/                             echo "Done BUILD
      FRONTEND"                         volumeMounts:                         - mountPath:
      /bitnami/wordpress                           name: wordpress-data                           subPath:
      wordpress                         - mountPath: /home/node/.ssh/id_rsa                           name:
      xxx-ssh-key                           subPath: ssh-privatekey                         -
      mountPath: /home/node/.ssh/known_hosts                           name: github-known-hosts                           subPath:
      config.ssh                         securityContext:                           runAsNonRoot:
      true                           runAsUser: 1000                           allowPrivilegeEscalation:
      false                     extraVolumesSshKeySecret: xxx-wordpress-deploy-key                     extraVolumes:                     -
      name: xxx-ssh-key                       secret:                         secretName:
      xxx-deploy-key                     ingress:                       hostname:
      test.xxx.site.url                       annotations:                         kubernetes.io/ingress.class:
      "nginx"                         cert-manager.io/cluster-issuer: "letsencrypt-prod"                         nginx.ingress.kubernetes.io/proxy-body-size:
      100m                         nginx.ingress.kubernetes.io/client-max-body-size:
      100m                         nginx.ingress.kubernetes.io/server-snippet: |-                           add_header
      X-Robots-Tag "noindex, nofollow, nosnippet, noarchive";                         nginx.ingress.kubernetes.io/whitelist-source-range:
      |                           35.85.92.224/32,                           100.21.244.185/32                       extraHosts:                         -
      name: test.xxx.site.url                           path: /wp-admin                     externalDatabase:                       host:
      "xxx.xxx.us-west-2.rds.amazonaws.com"                       user: "xxx-wp-user-dev"                       existingSecret:
      "xxx-wordpress-dev-externaldb"                       database: "xxx-wp-dev"                     wordpressExtraConfigContent:
      |                       @ini_set(''WP_MEMORY_LIMIT'', ''512M'');                       @ini_set(''ALLOW_UNFILTERED_UPLOADS'',
      true);                     extraEnvVars:                       KEY: VALUE                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template                  - name: frontend                   repository:
      xxx-frontend                   pipeline: buildpack-frontend-build-pipeline                   applicationURL:
      https://app.xxx.site.url                   eventlistener:                     template:
      buildpack-frontend-build-pipeline-trigger-template                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/frontend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ``` '
    digest: 1aae7c5a83e0a1b8d2eff40c9342fa4f5e19f14bb8710e2360944beffe2e01b8
    maintainers:
    - email: nospam@saritasa.com
      name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-apps
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-apps-0.1.23-dev/saritasa-tekton-apps-0.1.23-dev.tgz
    version: 0.1.23-dev
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2022-09-23T07:43:14.674624348Z"
    description: 'A Helm chart for tekton apps (rbac, eventlistener)  Implements:
      - dynamic records for eventlistener - PVCs - RBAC - configmaps for each app
      - triggerbindings for each app - kubernetes job to make sure the PVCs are bound
      and argocd marks the app as healthy - argocd project for each app - argocd application
      for each app component  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then declare dynamic list of projects (and associated components of that
      project like backend, api, frontend, etc) that would be dynamically added into
      the tekton''s eventlistener manifest.  Each component should be a separate git
      repository.  ```yaml --- apiVersion: argoproj.io/v1alpha1 kind: Application
      metadata:   name: tekton-apps   namespace: argo-cd   finalizers:   - resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "41" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-apps     helm:       values: |         environment: staging         gitBranchPrefixes:           -
      staging         storageClassName: gp3         nodeSelector:           ops: ''true''         aws:           region:
      "us-west-2"           dns: staging.site.com         defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com         argocd:           server:
      deploy.staging.site.com         eventlistener:           enableWebhookSecret:
      true         apps:           - project: vp             enabled: true             argocd:               labels:                 created-by:
      xxx                 ops-main: xxx                 ops-secondary: xxx                 pm:
      xxx                 tm: xxx               namespace: prod             mailList:
      vp@site.com             devopsMailList: devops+vp@site.com             jiraURL:
      https://site.atlassian.net/browse/vp             tektonURL: https://tekton.staging.site.com/#/namespaces/ci/pipelineruns             slack:
      client-vp-ci             kubernetesRepository:               name: vp-kubernetes-aws               branch:
      main               url: git@github.com:org-name/vp-kubernetes-aws.git              components:               -
      name: backend                 repository: vp-backend                 pipeline:
      buildpack-django-build-pipeline                 applicationURL: https://api.staging.site.com                 eventlistener:                   template:
      buildpack-django-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/backend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/builder:v1                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/runner:v1               -
      name: frontend                 repository: vp-frontend                 pipeline:
      buildpack-frontend-build-pipeline                 applicationURL: https://staging.site.com                 eventlistener:                   template:
      buildpack-frontend-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/frontend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/builder:full                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/runner:full                   -
      name: source_subpath                     value: dist/web          # make sure
      PVCs are bound after the chart is synced         # by temporarily mount them
      into short-live job.         runPostInstallMountPvcJob: false      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.16"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true    ```    Above helm chart creates a new ArgoCD project
      for each project in values, for each component in project''s components there
      is created a separate ArgoCD   application and required for Tekton ci/cd resources
      (triggerbindings, roles, configmaps, jobs, serviceaccounts, pvcs and etc).    #
      fill below parameters for each `project` block    - apps[PROJECT].environment
      - possbility to define custom project''s environment, needed for cases when
      need to deploy `dev` and `prod` envs to the same cluster. For example `xxx`
      dev     and prod both deployed in rocks EKS (not required)   - apps[PROJECT].enabled
      - boolean value to define whether the project enabled or not (required)   -
      apps[PROJECT].argocd.labels - labels which are added to ArgoCD project (required)   -
      apps[PROJECT].argocd.namespace - allowed for ArgoCD project namespace (required)   -
      apps[PROJECT].argocd.syncWave - ArgoCD project sync wave, i.e. sequence in which
      project should be synced (not required, default: "200")   - apps[PROJECT].argocd.sourceRepos[]
      - source repositories added to ArgoCD project (not required, default: [<apps[PROJECT].kubernetesRepository.url>])   -
      apps[PROJECT].argocd.extraDestinationNamespaces[] - adds extra destination namespaces
      for ArgoCD project to be able to create custom apps within project''s kubernetes
      repo (not required, default: null)   - apps[PROJECT].mailList - project''s team
      email address (required)   - apps[PROJECT].devopsMailList - project''s devops
      team email address (required)   - apps[PROJECT].jiraURL - project''s JIRA url
      (required)   - apps[PROJECT].tektonURL - link to Tekton pipelineruns used in
      Tekton ConfigMap as `TEKTON_URL` during Slack notification send (required)   -
      apps[PROJECT].slack - project''s Slack channel name (required)   - apps[PROJECT].kubernetesRepository.name
      - project''s kubernetes repository name used in ArgoCD application and Tekton
      TriggerBinding (may be absent and replaced with     `apps[PROJECT].components[NAME].argocd`
      and `apps[PROJECT].argocd.sourceRepos[]` blocks in case if project has no kubernetes
      repo)   - apps[PROJECT].kubernetesRepository.branch - project''s kubernetes
      repository branch used in ArgoCD application and Tekton TriggerBinding (may
      be absent and replaced     with `apps[PROJECT].components[NAME].argocd` and
      `apps[PROJECT].argocd.sourceRepos[]` blocks in case if project has no kubernetes
      repo)   - apps[PROJECT].kubernetesRepository.url - project''s kubernetes repository
      url used in ArgoCD application and Tekton TriggerBinding (may be absent and
      replaced with     `apps[PROJECT].components[NAME].argocd` and `apps[PROJECT].argocd.sourceRepos[]`
      blocks in case if project has no kubernetes repo)    Basically we have 2 different
      types of ci/cd - basic (buildpacks, kaniko) and wordpress ones. So depending
      on project''s component type you will need to fill different parameters.    #
      fill below parameters for each `component` block    - apps[PROJECT].components[NAME].repository
      - the name of the repository containing the code (may be absent in case of wordpress
      application without deployment, i.e. bolrdswp, taco,     saritasa-wordpress-demo)   -
      apps[PROJECT].components[NAME].pipeline - the name of the pipeline building
      the code from the repository above   - apps[PROJECT].components[NAME].argocd.source.syncWave
      - custom component ArgoCD application sync wave (default: "210")   - apps[PROJECT].components[NAME].argocd.source.path
      - path to directory responsible for kubernetes resources creation of the ArgoCD
      Application (default: kubernetes repo path for basic     projects "apps/<apps[PROJECT].components[NAME].name>/manifests/<environment>"
      or "null" for wordpress projects)   - apps[PROJECT].components[NAME].argocd.source.repoUrl
      - url of repository which should be used for ArgoCD Application (default: kubernetes
      repo for basic projects     "<apps[PROJECT].kubernetesRepository.url>" or `https://charts.bitnami.com/bitnami`
      for wordpress projects)   - apps[PROJECT].components[NAME].argocd.source.targetRevision
      - tag or branch in the repository for ArgoCD Application (default: kubernetes
      branch for basic projects     "<apps[PROJECT].kubernetesRepository.branch>"
      or "11.0.14" for wordpress projects)   - apps[PROJECT].components[NAME].argocd.ignoreDeploymentReplicasDiff
      - flag whether this exact ArgoCD application should ignore `Replicas` count
      differences for deployments. It may be needed for `staging` and `prod` environments
      which use HPA (default: false)   - apps[PROJECT].components[NAME].applicationURL
      - url that should be used in tekton build ConfigMap `APPLICATION_URL` param   -
      apps[PROJECT].components[NAME].tektonKubernetesRepoDeployKeyName - name of existing
      in kubernetes cluster secret with SSH key to kubernetes repository, used in
      `kustomize` deployment     step (i.e. addon-backend-deploy-key). This param
      sets by default to `<project>-kubernetes-aws-deploy-key` if project has `kubernetesRepository`
      param in values (actual only for basic     components, not wordpress)   - apps[PROJECT].components[NAME].eventlistener.template
      - the name of the trigger template for the component to be used   - apps[PROJECT].components[NAME].eventlistener.enableWebhookSecret
      - should you enable the git web hook for this particular app/component in the
      eventlistener configuration   - apps[PROJECT].components[NAME].eventlistener.filter
      - custom filter for the component of the eventlistener   - apps[PROJECT].components[NAME].eventlistener.extraOverlays
      - extra overlays to be added into the eventlistener for the component   - apps[PROJECT].components[NAME].eventlistener.eventTypes
      - github event types to trigger the ci/cd   - apps[PROJECT].components[NAME].eventlistener.gitWebhookBranches[]
      - list of branches, push to which triggers ci/cd   - apps[PROJECT].components[NAME].extraBuildConfigParams
      - additional key/values to be added into `build-pipeline-config configmap` ConfigMap
      associated with the app   - apps[PROJECT].components[NAME].triggerBinding -
      values to be added into the TriggerBinding manifest except default ones    What
      is important to know is that any key defined in apps[PROJECT].components[NAME].triggerBinding
      would be added as is   into the generated triggerbinding associated with your
      app. However the chart renders some default values based on the values   in
      this values.yaml file:      - application, project, environment, docker_registry,
      kubernetes_repository_ssh_url, kubernetes_branch, kubernetes_repository_kustomize_path,
      source_subpath (for basic components)     - application, project, environment,
      namespace (for wordpress components)     # fill below parameters block only
      for `wordpress` components    - apps[PROJECT].components[NAME].wordpress.imageTag
      - tag of the wordpress image (default: "5.7.2")   - apps[PROJECT].components[NAME].wordpress.repository_ssh_url
      - project''s wordpress repository SSH url (default: null, may be absent if project
      has no wordpress repo)   - apps[PROJECT].components[NAME].wordpress.resources
      - wordpress pod resources params (default: requests.cpu: 100m, requests.memory:
      128Mi)   - apps[PROJECT].components[NAME].wordpress.commonLabels - wordpress
      pod common labels (default: commonLabels.tech_stack: php, commonLabels.application:
      wordpress)   - apps[PROJECT].components[NAME].wordpress.wordpressTablePrefix
      - wordpress DB tables prefix (default: wp_)   - apps[PROJECT].components[NAME].wordpress.existingSecret
      - name of existing in kubernetes secret with wp admin auth info (default: "<project_name>-<component_name>-<env>",     i.e.
      "taco-wordpress-dev")   - apps[PROJECT].components[NAME].wordpress.updateStrategy
      - strategy that should be used for wordpress pod update (default: updateStrategy.type:
      RollingUpdate,     updateStrategy.rollingUpdate.maxSurge: 0%, updateStrategy.rollingUpdate.maxUnavailable:
      100%, i.e. stop old pod and then create a new one)   - apps[PROJECT].components[NAME].wordpress.smtp.host
      - SMTP host for sending emails (default: mailhog.mailhog.svc.cluster.local)   -
      apps[PROJECT].components[NAME].wordpress.smtp.port - SMTP port for sending emails
      (default: 1025)   - apps[PROJECT].components[NAME].wordpress.smtp.user - SMTP
      user for sending emails (default: <project_name>, i.e. taco)   - apps[PROJECT].components[NAME].wordpress.smtp.password
      - SMTP password for sending emails (default: anypassword)   - apps[PROJECT].components[NAME].wordpress.nodeSelector
      - wordpress pod node selector params (default: nodeSelector.tech_stack: php,
      nodeSelector.pvc: "true")   - apps[PROJECT].components[NAME].wordpress.podSecurityContext
      - wordpress pod''s security context params (default: podSecurityContext.enabled:
      true, podSecurityContext.fsGroup: 1000)   - apps[PROJECT].components[NAME].wordpress.containerSecurityContext
      - wordpress pod container''s security context params (default: containerSecurityContext.enabled:
      true,     containerSecurityContext.runAsUser: 1000)   - apps[PROJECT].components[NAME].wordpress.ci
      - boolean flag which defines whether wordpress project has ci/cd or not (default:
      true)   - apps[PROJECT].components[NAME].wordpress.extraInitContainers - extra
      ci/cd init containers if needed, enabled only if wordpress component has `ci`
      flag enabled (default: null)   - apps[PROJECT].components[NAME].wordpress.extraVolumesSshKeySecret
      - name of a secret with wordpress repository SSH url (default: "<project_name>-<component_name>-deploy-key",     i.e.
      "taco-wordpress-deploy-key")   - apps[PROJECT].components[NAME].wordpress.extraVolumes
      - extra volumes that might be needed to wordpress pod (default: null)   - apps[PROJECT].components[NAME].wordpress.ingress.hostname
      - wordpress ingress hostname (default: "<project_name>.saritasa.rocks", i.e.
      "taco.saritasa.rocks")   - apps[PROJECT].components[NAME].wordpress.ingress.annotations
      - wordpress ingress annotations (default: kubernetes.io/ingress.class: "nginx",
      cert-manager.io/cluster-issuer: "letsencrypt-prod",     nginx.ingress.kubernetes.io/proxy-body-size:
      100m, nginx.ingress.kubernetes.io/proxy-connect-timeout: "300", nginx.ingress.kubernetes.io/proxy-next-upstream-timeout:
      "300",     nginx.ingress.kubernetes.io/auth-type: basic, nginx.ingress.kubernetes.io/auth-secret:
      <ingress.authSecret>, nginx.ingress.kubernetes.io/auth-realm: "Authentication
      Required",     nginx.ingress.kubernetes.io/server-snippet: |-,   add_header
      X-Robots-Tag "noindex, nofollow, nosnippet, noarchive")   - apps[PROJECT].components[NAME].wordpress.ingress.authSecret
      - name of kubernetes secret that should be used in ingress for basic auth (default:
      "<project_name>-<compinent_name>-<env>-basic-auth",     i.e. "taco-wordpress-dev-basic-auth")   -
      apps[PROJECT].components[NAME].wordpress.ingress.extraHosts - list of extra
      hosts that may be defined in ingress (default: null)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.host
      - wordpress DB host (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.user
      - wordpress DB user (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.existingSecret
      - name of existing in kubernetes secret with DB user password (required)   -
      apps[PROJECT].components[NAME].wordpress.externalDatabase.database - wordpress
      DB name (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.port
      - wordpress DB port (default: 3306)   - apps[PROJECT].components[NAME].wordpress.wordpressExtraConfigContent
      - wordpress extra configs if needed (default: null)   - apps[PROJECT].components[NAME].wordpress.extraEnvVars
      - wordpress extra env vars if needed (default: null)    Example of values with
      extra `eventlistener` and `extraBuildConfigParams` in component:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           gitBranchPrefixes:             -
      staging           storageClassName: gp2           aws:             region: "us-west-2"             dns:
      staging.site.com           defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com           argocd:             server:
      deploy.staging.site.com           eventlistener:             enableWebhookSecret:
      true           apps:             - project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: prod               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.site.com/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack                   applicationURL: https://api.site.com                   eventlistener:                     template:
      buildpack-backend-build-pipeline-trigger-template                   extraBuildConfigParams:
      # what additional K/V pairs you want to add into the build-pipeline-config configmap                     KEY:
      value                   triggerBinding:                     - name: docker_registry_repository                       value:
      XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/backend                     - name:
      buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/runner:v1                 -
      name: frontend                   repository: xxx-frontend                   pipeline:
      buildpack                   applicationURL: https://site.com                   eventlistener:                     enableWebhookSecret:
      false                     filter: (body.ref.startsWith(''refs/heads/develop'')
      || body.ref.startsWith(''refs/heads/release/''))                     template:
      buildpack-frontend-build-pipeline-trigger-template                     extraOverlays:
      []                     # - key: truncated_sha                     #   expression:
      "body.head_commit.id.truncate(7)"                     eventTypes: ["pull_request",
      "push"]                   extraBuildConfigParams: {}                   triggerBinding:                     -
      name: docker_registry_repository                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/frontend                     -
      name: buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web            # make
      sure PVCs are bound after the chart is synced           # by temporarily mount
      them into short-live job.           runPostInstallMountPvcJob: false        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true    ```    Example of
      old application from `saritasa-clients` repo, which has no separate `kubernetes`
      repository. Here we replace `apps[PROJECT].kubernetesRepository` block with   `apps[PROJECT].argocd.sourceRepos`
      and `apps[PROJECT].components[NAME].argocd` block, also it is required to set
      `apps[PROJECT].components[NAME].tektonKubernetesRepoDeployKeyName`   in such
      a case to use correct secret with deploy key as far as there is no kubernetes
      repo that is used by default.    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      git@github.com:saritasa-nest/xxx-backend.git                   - git@github.com:saritasa-nest/xxx-frontend.git               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: backend                   repository:
      xxx-backend                   pipeline: buildpack-django-build-pipeline                   applicationURL:
      https://api.xxx.site.url                   argocd:                     source:                       path:
      .kubernetes/manifests/dev                       repoUrl: git@github.com:saritasa-nest/xxx-backend.git                       targetRevision:
      develop                   eventlistener:                     template: buildpack-django-build-pipeline-trigger-template                   tektonKubernetesRepoDeployKeyName:
      xxx-backend-deploy-key                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1                 -
      name: frontend                   repository: xxx-frontend                   pipeline:
      buildpack-frontend-build-pipeline                   applicationURL: https://xxx.site.url                   argocd:                     source:                       path:
      .kubernetes/manifests/dev                       repoUrl: git@github.com:saritasa-nest/xxx-frontend.git                       targetRevision:
      develop                   eventlistener:                     template: buildpack-frontend-build-pipeline-trigger-template                   tektonKubernetesRepoDeployKeyName:
      xxx-frontend-deploy-key                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/frontend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Example with
      creating an ArgoCD project and application with its custom `environment` (case
      when in common `staging` environment we need to create for some reason project
      with   `dev` environment). Here is added an extra `apps[PROJECT].environment`
      param, which overrides default `environment` in helm values for this project,
      and   `apps[PROJECT].components[NAME].eventlistener.gitWebhookBranches` param,
      which defines that ci/cd should be trigger on push to `develop` branch.    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack-django-build-pipeline                   applicationURL: https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Also there might
      a situation that you would like to provision custom utility ArgoCD Application
      in argo-cd from project''s kubernetes repo (for example VP project provisions   like
      this `jitsi` application). To reach this you might need to add an extra destination
      namespace to ArgoCD Project, you should use   `apps[PROJECT].argocd.extraDestinationNamespaces[]`
      param for that like in below example.    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev                 extraDestinationNamespaces:                   -
      argo-cd               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack-django-build-pipeline                   applicationURL: https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    If you want
      to enable ignoring deployment replicas count differences in ArgoCD application
      of your component add `apps[PROJECT].components[NAME].argocd.ignoreDeploymentReplicasDiff:
      true` flag like in the below example (it may be needed for `staging` and `prod`
      envs, where you have horizontal pod autoscheduling - HPA):    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev                 extraDestinationNamespaces:                   -
      argo-cd               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   argocd:                     ignoreDeploymentReplicasDiff:
      true                   pipeline: buildpack-django-build-pipeline                   applicationURL:
      https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Simple wordpress
      application example filled by default:    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: wordpress                   repository:
      xxx-wordpress                   pipeline: wordpress-build-pipeline                   applicationURL:
      https://xxx.site.url                   wordpress:                     repository_ssh_url:
      git@github.com:saritasa-nest/xxx-wordpress.git                     externalDatabase:                       host:
      xxx.xxx.us-west-2.rds.amazonaws.com                       user: xxx-wordpress-user-dev                       existingSecret:
      xxx-wordpress-dev-externaldb                       database: xxx-wordpress-dev                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Simple wordpress
      application example filled by default, but without ci/cd:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: wordpress                   repository:
      xxx-wordpress                   pipeline: wordpress-build-pipeline                   applicationURL:
      https://xxx.site.url                   wordpress:                     ci: false                     externalDatabase:                       host:
      xxx.xxx.us-west-2.rds.amazonaws.com                       user: xxx-wordpress-user-dev                       existingSecret:
      xxx-wordpress-dev-externaldb                       database: xxx-wordpress-dev                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    More difficult
      example of project containing `wordpress` and `frontend` component. Also defined
      for example all extra wordpress params that could be set:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami                   - git@github.com:saritasa-nest/xxx-kubernetes-aws.git               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: wordpress                   repository: xxx-wordpress                   pipeline:
      wordpress-build-pipeline                   applicationURL: https://xxx.site.url                   wordpress:                     imageTag:
      "5.8.1"                     repository_ssh_url: "git@github.com:saritasa-nest/xxx-wordpress.git"                     resources:                       requests:                         memory:
      512Mi                         cpu: 100m                     commonLabels:                       tech_stack:
      php                       application: wordpress                     wordpressTablePrefix:
      "qbf_"                     existingSecret: xxx-wordpress                     updateStrategy:                       type:
      RollingUpdate                       rollingUpdate:                         maxSurge:
      25%                         maxUnavailable: 25%                     smtp:                       host:
      mysmtp.site.url                       port: 1010                       user:
      myuser                       password: mypassword                     nodeSelector:                       tech_stack:
      php                       pvc: "true"                     podSecurityContext:                       enabled:
      true                       fsGroup: 1001                     containerSecurityContext:                       enabled:
      true                       runAsUser: 1001                     ci: true                     extraInitContainers:                       -
      name: build-frontend                         image: node:14                         imagePullPolicy:
      Always                         command:                           - bash                           -
      -c                           - |                             git -c core.sshCommand="ssh
      -i ~/.ssh/id_rsa" clone git@github.com:saritasa-nest/xxx.git -b develop ~/xxx                             cd
      ~/xxx                             npm install                             npm
      run build:embedded-questionnaire                             cp -Rf $(pwd)/dist/*
      /bitnami/wordpress/wp-content/                             echo "Copied built
      files into /bitnami/wordpress/wp-content/"                             ls -la
      /bitnami/wordpress/wp-content/                             echo "Done BUILD
      FRONTEND"                         volumeMounts:                         - mountPath:
      /bitnami/wordpress                           name: wordpress-data                           subPath:
      wordpress                         - mountPath: /home/node/.ssh/id_rsa                           name:
      xxx-ssh-key                           subPath: ssh-privatekey                         -
      mountPath: /home/node/.ssh/known_hosts                           name: github-known-hosts                           subPath:
      config.ssh                         securityContext:                           runAsNonRoot:
      true                           runAsUser: 1000                           allowPrivilegeEscalation:
      false                     extraVolumesSshKeySecret: xxx-wordpress-deploy-key                     extraVolumes:                     -
      name: xxx-ssh-key                       secret:                         secretName:
      xxx-deploy-key                     ingress:                       hostname:
      test.xxx.site.url                       annotations:                         kubernetes.io/ingress.class:
      "nginx"                         cert-manager.io/cluster-issuer: "letsencrypt-prod"                         nginx.ingress.kubernetes.io/proxy-body-size:
      100m                         nginx.ingress.kubernetes.io/client-max-body-size:
      100m                         nginx.ingress.kubernetes.io/server-snippet: |-                           add_header
      X-Robots-Tag "noindex, nofollow, nosnippet, noarchive";                         nginx.ingress.kubernetes.io/whitelist-source-range:
      |                           35.85.92.224/32,                           100.21.244.185/32                       extraHosts:                         -
      name: test.xxx.site.url                           path: /wp-admin                     externalDatabase:                       host:
      "xxx.xxx.us-west-2.rds.amazonaws.com"                       user: "xxx-wp-user-dev"                       existingSecret:
      "xxx-wordpress-dev-externaldb"                       database: "xxx-wp-dev"                     wordpressExtraConfigContent:
      |                       @ini_set(''WP_MEMORY_LIMIT'', ''512M'');                       @ini_set(''ALLOW_UNFILTERED_UPLOADS'',
      true);                     extraEnvVars:                       KEY: VALUE                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template                  - name: frontend                   repository:
      xxx-frontend                   pipeline: buildpack-frontend-build-pipeline                   applicationURL:
      https://app.xxx.site.url                   eventlistener:                     template:
      buildpack-frontend-build-pipeline-trigger-template                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/frontend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ``` '
    digest: 9f81067298d9403ecbe2377a58ad066c1118461230bd5f435462bd85c205de43
    maintainers:
    - email: nospam@saritasa.com
      name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-apps
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-apps-0.1.23-dev/saritasa-tekton-apps-0.1.23-dev.tgz
    version: 0.1.23-dev
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2022-09-23T08:01:49.704853006Z"
    description: 'A Helm chart for tekton apps (rbac, eventlistener)  Implements:
      - dynamic records for eventlistener - PVCs - RBAC - configmaps for each app
      - triggerbindings for each app - kubernetes job to make sure the PVCs are bound
      and argocd marks the app as healthy - argocd project for each app - argocd application
      for each app component  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then declare dynamic list of projects (and associated components of that
      project like backend, api, frontend, etc) that would be dynamically added into
      the tekton''s eventlistener manifest.  Each component should be a separate git
      repository.  ```yaml --- apiVersion: argoproj.io/v1alpha1 kind: Application
      metadata:   name: tekton-apps   namespace: argo-cd   finalizers:   - resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "41" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-apps     helm:       values: |         environment: staging         gitBranchPrefixes:           -
      staging         storageClassName: gp3         nodeSelector:           ops: ''true''         aws:           region:
      "us-west-2"           dns: staging.site.com         defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com         argocd:           server:
      deploy.staging.site.com         eventlistener:           enableWebhookSecret:
      true         apps:           - project: vp             enabled: true             argocd:               labels:                 created-by:
      xxx                 ops-main: xxx                 ops-secondary: xxx                 pm:
      xxx                 tm: xxx               namespace: prod             mailList:
      vp@site.com             devopsMailList: devops+vp@site.com             jiraURL:
      https://site.atlassian.net/browse/vp             tektonURL: https://tekton.staging.site.com/#/namespaces/ci/pipelineruns             slack:
      client-vp-ci             kubernetesRepository:               name: vp-kubernetes-aws               branch:
      main               url: git@github.com:org-name/vp-kubernetes-aws.git              components:               -
      name: backend                 repository: vp-backend                 pipeline:
      buildpack-django-build-pipeline                 applicationURL: https://api.staging.site.com                 eventlistener:                   template:
      buildpack-django-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/backend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/builder:v1                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/runner:v1               -
      name: frontend                 repository: vp-frontend                 pipeline:
      buildpack-frontend-build-pipeline                 applicationURL: https://staging.site.com                 eventlistener:                   template:
      buildpack-frontend-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/frontend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/builder:full                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/runner:full                   -
      name: source_subpath                     value: dist/web          # make sure
      PVCs are bound after the chart is synced         # by temporarily mount them
      into short-live job.         runPostInstallMountPvcJob: false      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.16"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true    ```    Above helm chart creates a new ArgoCD project
      for each project in values, for each component in project''s components there
      is created a separate ArgoCD   application and required for Tekton ci/cd resources
      (triggerbindings, roles, configmaps, jobs, serviceaccounts, pvcs and etc).    #
      fill below parameters for each `project` block    - apps[PROJECT].environment
      - possbility to define custom project''s environment, needed for cases when
      need to deploy `dev` and `prod` envs to the same cluster. For example `xxx`
      dev     and prod both deployed in rocks EKS (not required)   - apps[PROJECT].enabled
      - boolean value to define whether the project enabled or not (required)   -
      apps[PROJECT].argocd.labels - labels which are added to ArgoCD project (required)   -
      apps[PROJECT].argocd.namespace - allowed for ArgoCD project namespace (required)   -
      apps[PROJECT].argocd.syncWave - ArgoCD project sync wave, i.e. sequence in which
      project should be synced (not required, default: "200")   - apps[PROJECT].argocd.sourceRepos[]
      - source repositories added to ArgoCD project (not required, default: [<apps[PROJECT].kubernetesRepository.url>])   -
      apps[PROJECT].argocd.extraDestinationNamespaces[] - adds extra destination namespaces
      for ArgoCD project to be able to create custom apps within project''s kubernetes
      repo (not required, default: null)   - apps[PROJECT].mailList - project''s team
      email address (required)   - apps[PROJECT].devopsMailList - project''s devops
      team email address (required)   - apps[PROJECT].jiraURL - project''s JIRA url
      (required)   - apps[PROJECT].tektonURL - link to Tekton pipelineruns used in
      Tekton ConfigMap as `TEKTON_URL` during Slack notification send (required)   -
      apps[PROJECT].slack - project''s Slack channel name (required)   - apps[PROJECT].kubernetesRepository.name
      - project''s kubernetes repository name used in ArgoCD application and Tekton
      TriggerBinding (may be absent and replaced with     `apps[PROJECT].components[NAME].argocd`
      and `apps[PROJECT].argocd.sourceRepos[]` blocks in case if project has no kubernetes
      repo)   - apps[PROJECT].kubernetesRepository.branch - project''s kubernetes
      repository branch used in ArgoCD application and Tekton TriggerBinding (may
      be absent and replaced     with `apps[PROJECT].components[NAME].argocd` and
      `apps[PROJECT].argocd.sourceRepos[]` blocks in case if project has no kubernetes
      repo)   - apps[PROJECT].kubernetesRepository.url - project''s kubernetes repository
      url used in ArgoCD application and Tekton TriggerBinding (may be absent and
      replaced with     `apps[PROJECT].components[NAME].argocd` and `apps[PROJECT].argocd.sourceRepos[]`
      blocks in case if project has no kubernetes repo)    Basically we have 2 different
      types of ci/cd - basic (buildpacks, kaniko) and wordpress ones. So depending
      on project''s component type you will need to fill different parameters.    #
      fill below parameters for each `component` block    - apps[PROJECT].components[NAME].repository
      - the name of the repository containing the code (may be absent in case of wordpress
      application without deployment, i.e. bolrdswp, taco,     saritasa-wordpress-demo)   -
      apps[PROJECT].components[NAME].pipeline - the name of the pipeline building
      the code from the repository above   - apps[PROJECT].components[NAME].argocd.source.syncWave
      - custom component ArgoCD application sync wave (default: "210")   - apps[PROJECT].components[NAME].argocd.source.path
      - path to directory responsible for kubernetes resources creation of the ArgoCD
      Application (default: kubernetes repo path for basic     projects "apps/<apps[PROJECT].components[NAME].name>/manifests/<environment>"
      or "null" for wordpress projects)   - apps[PROJECT].components[NAME].argocd.source.repoUrl
      - url of repository which should be used for ArgoCD Application (default: kubernetes
      repo for basic projects     "<apps[PROJECT].kubernetesRepository.url>" or `https://charts.bitnami.com/bitnami`
      for wordpress projects)   - apps[PROJECT].components[NAME].argocd.source.targetRevision
      - tag or branch in the repository for ArgoCD Application (default: kubernetes
      branch for basic projects     "<apps[PROJECT].kubernetesRepository.branch>"
      or "11.0.14" for wordpress projects)   - apps[PROJECT].components[NAME].argocd.ignoreDeploymentReplicasDiff
      - flag whether this exact ArgoCD application should ignore `Replicas` count
      differences for deployments. It may be needed for `staging` and `prod` environments
      which use HPA (default: false)   - apps[PROJECT].components[NAME].applicationURL
      - url that should be used in tekton build ConfigMap `APPLICATION_URL` param   -
      apps[PROJECT].components[NAME].tektonKubernetesRepoDeployKeyName - name of existing
      in kubernetes cluster secret with SSH key to kubernetes repository, used in
      `kustomize` deployment     step (i.e. addon-backend-deploy-key). This param
      sets by default to `<project>-kubernetes-aws-deploy-key` if project has `kubernetesRepository`
      param in values (actual only for basic     components, not wordpress)   - apps[PROJECT].components[NAME].eventlistener.template
      - the name of the trigger template for the component to be used   - apps[PROJECT].components[NAME].eventlistener.enableWebhookSecret
      - should you enable the git web hook for this particular app/component in the
      eventlistener configuration   - apps[PROJECT].components[NAME].eventlistener.filter
      - custom filter for the component of the eventlistener   - apps[PROJECT].components[NAME].eventlistener.extraOverlays
      - extra overlays to be added into the eventlistener for the component   - apps[PROJECT].components[NAME].eventlistener.eventTypes
      - github event types to trigger the ci/cd   - apps[PROJECT].components[NAME].eventlistener.gitWebhookBranches[]
      - list of branches, push to which triggers ci/cd   - apps[PROJECT].components[NAME].extraBuildConfigParams
      - additional key/values to be added into `build-pipeline-config configmap` ConfigMap
      associated with the app   - apps[PROJECT].components[NAME].triggerBinding -
      values to be added into the TriggerBinding manifest except default ones    What
      is important to know is that any key defined in apps[PROJECT].components[NAME].triggerBinding
      would be added as is   into the generated triggerbinding associated with your
      app. However the chart renders some default values based on the values   in
      this values.yaml file:      - application, project, environment, docker_registry,
      kubernetes_repository_ssh_url, kubernetes_branch, kubernetes_repository_kustomize_path,
      source_subpath (for basic components)     - application, project, environment,
      namespace (for wordpress components)     # fill below parameters block only
      for `wordpress` components    - apps[PROJECT].components[NAME].wordpress.imageTag
      - tag of the wordpress image (default: "5.7.2")   - apps[PROJECT].components[NAME].wordpress.repository_ssh_url
      - project''s wordpress repository SSH url (default: null, may be absent if project
      has no wordpress repo)   - apps[PROJECT].components[NAME].wordpress.resources
      - wordpress pod resources params (default: requests.cpu: 100m, requests.memory:
      128Mi)   - apps[PROJECT].components[NAME].wordpress.commonLabels - wordpress
      pod common labels (default: commonLabels.tech_stack: php, commonLabels.application:
      wordpress)   - apps[PROJECT].components[NAME].wordpress.wordpressTablePrefix
      - wordpress DB tables prefix (default: wp_)   - apps[PROJECT].components[NAME].wordpress.existingSecret
      - name of existing in kubernetes secret with wp admin auth info (default: "<project_name>-<component_name>-<env>",     i.e.
      "taco-wordpress-dev")   - apps[PROJECT].components[NAME].wordpress.updateStrategy
      - strategy that should be used for wordpress pod update (default: updateStrategy.type:
      RollingUpdate,     updateStrategy.rollingUpdate.maxSurge: 0%, updateStrategy.rollingUpdate.maxUnavailable:
      100%, i.e. stop old pod and then create a new one)   - apps[PROJECT].components[NAME].wordpress.smtp.host
      - SMTP host for sending emails (default: mailhog.mailhog.svc.cluster.local)   -
      apps[PROJECT].components[NAME].wordpress.smtp.port - SMTP port for sending emails
      (default: 1025)   - apps[PROJECT].components[NAME].wordpress.smtp.user - SMTP
      user for sending emails (default: <project_name>, i.e. taco)   - apps[PROJECT].components[NAME].wordpress.smtp.password
      - SMTP password for sending emails (default: anypassword)   - apps[PROJECT].components[NAME].wordpress.nodeSelector
      - wordpress pod node selector params (default: nodeSelector.tech_stack: php,
      nodeSelector.pvc: "true")   - apps[PROJECT].components[NAME].wordpress.podSecurityContext
      - wordpress pod''s security context params (default: podSecurityContext.enabled:
      true, podSecurityContext.fsGroup: 1000)   - apps[PROJECT].components[NAME].wordpress.containerSecurityContext
      - wordpress pod container''s security context params (default: containerSecurityContext.enabled:
      true,     containerSecurityContext.runAsUser: 1000)   - apps[PROJECT].components[NAME].wordpress.ci
      - boolean flag which defines whether wordpress project has ci/cd or not (default:
      true)   - apps[PROJECT].components[NAME].wordpress.extraInitContainers - extra
      ci/cd init containers if needed, enabled only if wordpress component has `ci`
      flag enabled (default: null)   - apps[PROJECT].components[NAME].wordpress.extraVolumesSshKeySecret
      - name of a secret with wordpress repository SSH url (default: "<project_name>-<component_name>-deploy-key",     i.e.
      "taco-wordpress-deploy-key")   - apps[PROJECT].components[NAME].wordpress.extraVolumes
      - extra volumes that might be needed to wordpress pod (default: null)   - apps[PROJECT].components[NAME].wordpress.ingress.hostname
      - wordpress ingress hostname (default: "<project_name>.saritasa.rocks", i.e.
      "taco.saritasa.rocks")   - apps[PROJECT].components[NAME].wordpress.ingress.annotations
      - wordpress ingress annotations (default: kubernetes.io/ingress.class: "nginx",
      cert-manager.io/cluster-issuer: "letsencrypt-prod",     nginx.ingress.kubernetes.io/proxy-body-size:
      100m, nginx.ingress.kubernetes.io/proxy-connect-timeout: "300", nginx.ingress.kubernetes.io/proxy-next-upstream-timeout:
      "300",     nginx.ingress.kubernetes.io/auth-type: basic, nginx.ingress.kubernetes.io/auth-secret:
      <ingress.authSecret>, nginx.ingress.kubernetes.io/auth-realm: "Authentication
      Required",     nginx.ingress.kubernetes.io/server-snippet: |-,   add_header
      X-Robots-Tag "noindex, nofollow, nosnippet, noarchive")   - apps[PROJECT].components[NAME].wordpress.ingress.authSecret
      - name of kubernetes secret that should be used in ingress for basic auth (default:
      "<project_name>-<compinent_name>-<env>-basic-auth",     i.e. "taco-wordpress-dev-basic-auth")   -
      apps[PROJECT].components[NAME].wordpress.ingress.extraHosts - list of extra
      hosts that may be defined in ingress (default: null)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.host
      - wordpress DB host (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.user
      - wordpress DB user (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.existingSecret
      - name of existing in kubernetes secret with DB user password (required)   -
      apps[PROJECT].components[NAME].wordpress.externalDatabase.database - wordpress
      DB name (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.port
      - wordpress DB port (default: 3306)   - apps[PROJECT].components[NAME].wordpress.wordpressExtraConfigContent
      - wordpress extra configs if needed (default: null)   - apps[PROJECT].components[NAME].wordpress.extraEnvVars
      - wordpress extra env vars if needed (default: null)    Example of values with
      extra `eventlistener` and `extraBuildConfigParams` in component:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           gitBranchPrefixes:             -
      staging           storageClassName: gp2           aws:             region: "us-west-2"             dns:
      staging.site.com           defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com           argocd:             server:
      deploy.staging.site.com           eventlistener:             enableWebhookSecret:
      true           apps:             - project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: prod               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.site.com/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack                   applicationURL: https://api.site.com                   eventlistener:                     template:
      buildpack-backend-build-pipeline-trigger-template                   extraBuildConfigParams:
      # what additional K/V pairs you want to add into the build-pipeline-config configmap                     KEY:
      value                   triggerBinding:                     - name: docker_registry_repository                       value:
      XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/backend                     - name:
      buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/runner:v1                 -
      name: frontend                   repository: xxx-frontend                   pipeline:
      buildpack                   applicationURL: https://site.com                   eventlistener:                     enableWebhookSecret:
      false                     filter: (body.ref.startsWith(''refs/heads/develop'')
      || body.ref.startsWith(''refs/heads/release/''))                     template:
      buildpack-frontend-build-pipeline-trigger-template                     extraOverlays:
      []                     # - key: truncated_sha                     #   expression:
      "body.head_commit.id.truncate(7)"                     eventTypes: ["pull_request",
      "push"]                   extraBuildConfigParams: {}                   triggerBinding:                     -
      name: docker_registry_repository                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/frontend                     -
      name: buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web            # make
      sure PVCs are bound after the chart is synced           # by temporarily mount
      them into short-live job.           runPostInstallMountPvcJob: false        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true    ```    Example of
      old application from `saritasa-clients` repo, which has no separate `kubernetes`
      repository. Here we replace `apps[PROJECT].kubernetesRepository` block with   `apps[PROJECT].argocd.sourceRepos`
      and `apps[PROJECT].components[NAME].argocd` block, also it is required to set
      `apps[PROJECT].components[NAME].tektonKubernetesRepoDeployKeyName`   in such
      a case to use correct secret with deploy key as far as there is no kubernetes
      repo that is used by default.    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      git@github.com:saritasa-nest/xxx-backend.git                   - git@github.com:saritasa-nest/xxx-frontend.git               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: backend                   repository:
      xxx-backend                   pipeline: buildpack-django-build-pipeline                   applicationURL:
      https://api.xxx.site.url                   argocd:                     source:                       path:
      .kubernetes/manifests/dev                       repoUrl: git@github.com:saritasa-nest/xxx-backend.git                       targetRevision:
      develop                   eventlistener:                     template: buildpack-django-build-pipeline-trigger-template                   tektonKubernetesRepoDeployKeyName:
      xxx-backend-deploy-key                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1                 -
      name: frontend                   repository: xxx-frontend                   pipeline:
      buildpack-frontend-build-pipeline                   applicationURL: https://xxx.site.url                   argocd:                     source:                       path:
      .kubernetes/manifests/dev                       repoUrl: git@github.com:saritasa-nest/xxx-frontend.git                       targetRevision:
      develop                   eventlistener:                     template: buildpack-frontend-build-pipeline-trigger-template                   tektonKubernetesRepoDeployKeyName:
      xxx-frontend-deploy-key                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/frontend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Example with
      creating an ArgoCD project and application with its custom `environment` (case
      when in common `staging` environment we need to create for some reason project
      with   `dev` environment). Here is added an extra `apps[PROJECT].environment`
      param, which overrides default `environment` in helm values for this project,
      and   `apps[PROJECT].components[NAME].eventlistener.gitWebhookBranches` param,
      which defines that ci/cd should be trigger on push to `develop` branch.    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack-django-build-pipeline                   applicationURL: https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Also there might
      a situation that you would like to provision custom utility ArgoCD Application
      in argo-cd from project''s kubernetes repo (for example VP project provisions   like
      this `jitsi` application). To reach this you might need to add an extra destination
      namespace to ArgoCD Project, you should use   `apps[PROJECT].argocd.extraDestinationNamespaces[]`
      param for that like in below example.    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev                 extraDestinationNamespaces:                   -
      argo-cd               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack-django-build-pipeline                   applicationURL: https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    If you want
      to enable ignoring deployment replicas count differences in ArgoCD application
      of your component add `apps[PROJECT].components[NAME].argocd.ignoreDeploymentReplicasDiff:
      true` flag like in the below example (it may be needed for `staging` and `prod`
      envs, where you have horizontal pod autoscheduling - HPA):    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev                 extraDestinationNamespaces:                   -
      argo-cd               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   argocd:                     ignoreDeploymentReplicasDiff:
      true                   pipeline: buildpack-django-build-pipeline                   applicationURL:
      https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Simple wordpress
      application example filled by default:    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: wordpress                   repository:
      xxx-wordpress                   pipeline: wordpress-build-pipeline                   applicationURL:
      https://xxx.site.url                   wordpress:                     repository_ssh_url:
      git@github.com:saritasa-nest/xxx-wordpress.git                     externalDatabase:                       host:
      xxx.xxx.us-west-2.rds.amazonaws.com                       user: xxx-wordpress-user-dev                       existingSecret:
      xxx-wordpress-dev-externaldb                       database: xxx-wordpress-dev                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Simple wordpress
      application example filled by default, but without ci/cd:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: wordpress                   repository:
      xxx-wordpress                   pipeline: wordpress-build-pipeline                   applicationURL:
      https://xxx.site.url                   wordpress:                     ci: false                     externalDatabase:                       host:
      xxx.xxx.us-west-2.rds.amazonaws.com                       user: xxx-wordpress-user-dev                       existingSecret:
      xxx-wordpress-dev-externaldb                       database: xxx-wordpress-dev                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    More difficult
      example of project containing `wordpress` and `frontend` component. Also defined
      for example all extra wordpress params that could be set:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami                   - git@github.com:saritasa-nest/xxx-kubernetes-aws.git               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: wordpress                   repository: xxx-wordpress                   pipeline:
      wordpress-build-pipeline                   applicationURL: https://xxx.site.url                   wordpress:                     imageTag:
      "5.8.1"                     repository_ssh_url: "git@github.com:saritasa-nest/xxx-wordpress.git"                     resources:                       requests:                         memory:
      512Mi                         cpu: 100m                     commonLabels:                       tech_stack:
      php                       application: wordpress                     wordpressTablePrefix:
      "qbf_"                     existingSecret: xxx-wordpress                     updateStrategy:                       type:
      RollingUpdate                       rollingUpdate:                         maxSurge:
      25%                         maxUnavailable: 25%                     smtp:                       host:
      mysmtp.site.url                       port: 1010                       user:
      myuser                       password: mypassword                     nodeSelector:                       tech_stack:
      php                       pvc: "true"                     podSecurityContext:                       enabled:
      true                       fsGroup: 1001                     containerSecurityContext:                       enabled:
      true                       runAsUser: 1001                     ci: true                     extraInitContainers:                       -
      name: build-frontend                         image: node:14                         imagePullPolicy:
      Always                         command:                           - bash                           -
      -c                           - |                             git -c core.sshCommand="ssh
      -i ~/.ssh/id_rsa" clone git@github.com:saritasa-nest/xxx.git -b develop ~/xxx                             cd
      ~/xxx                             npm install                             npm
      run build:embedded-questionnaire                             cp -Rf $(pwd)/dist/*
      /bitnami/wordpress/wp-content/                             echo "Copied built
      files into /bitnami/wordpress/wp-content/"                             ls -la
      /bitnami/wordpress/wp-content/                             echo "Done BUILD
      FRONTEND"                         volumeMounts:                         - mountPath:
      /bitnami/wordpress                           name: wordpress-data                           subPath:
      wordpress                         - mountPath: /home/node/.ssh/id_rsa                           name:
      xxx-ssh-key                           subPath: ssh-privatekey                         -
      mountPath: /home/node/.ssh/known_hosts                           name: github-known-hosts                           subPath:
      config.ssh                         securityContext:                           runAsNonRoot:
      true                           runAsUser: 1000                           allowPrivilegeEscalation:
      false                     extraVolumesSshKeySecret: xxx-wordpress-deploy-key                     extraVolumes:                     -
      name: xxx-ssh-key                       secret:                         secretName:
      xxx-deploy-key                     ingress:                       hostname:
      test.xxx.site.url                       annotations:                         kubernetes.io/ingress.class:
      "nginx"                         cert-manager.io/cluster-issuer: "letsencrypt-prod"                         nginx.ingress.kubernetes.io/proxy-body-size:
      100m                         nginx.ingress.kubernetes.io/client-max-body-size:
      100m                         nginx.ingress.kubernetes.io/server-snippet: |-                           add_header
      X-Robots-Tag "noindex, nofollow, nosnippet, noarchive";                         nginx.ingress.kubernetes.io/whitelist-source-range:
      |                           35.85.92.224/32,                           100.21.244.185/32                       extraHosts:                         -
      name: test.xxx.site.url                           path: /wp-admin                     externalDatabase:                       host:
      "xxx.xxx.us-west-2.rds.amazonaws.com"                       user: "xxx-wp-user-dev"                       existingSecret:
      "xxx-wordpress-dev-externaldb"                       database: "xxx-wp-dev"                     wordpressExtraConfigContent:
      |                       @ini_set(''WP_MEMORY_LIMIT'', ''512M'');                       @ini_set(''ALLOW_UNFILTERED_UPLOADS'',
      true);                     extraEnvVars:                       KEY: VALUE                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template                  - name: frontend                   repository:
      xxx-frontend                   pipeline: buildpack-frontend-build-pipeline                   applicationURL:
      https://app.xxx.site.url                   eventlistener:                     template:
      buildpack-frontend-build-pipeline-trigger-template                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/frontend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ``` '
    digest: f35306eda37df71a53c01eff374a53d35b05ea01b0bd9b445f80da675a783fe8
    maintainers:
    - email: nospam@saritasa.com
      name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-apps
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-apps-0.1.23-dev/saritasa-tekton-apps-0.1.23-dev.tgz
    version: 0.1.23-dev
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2022-09-23T09:33:45.63162084Z"
    description: 'A Helm chart for tekton apps (rbac, eventlistener)  Implements:
      - dynamic records for eventlistener - PVCs - RBAC - configmaps for each app
      - triggerbindings for each app - kubernetes job to make sure the PVCs are bound
      and argocd marks the app as healthy - argocd project for each app - argocd application
      for each app component  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then declare dynamic list of projects (and associated components of that
      project like backend, api, frontend, etc) that would be dynamically added into
      the tekton''s eventlistener manifest.  Each component should be a separate git
      repository.  ```yaml --- apiVersion: argoproj.io/v1alpha1 kind: Application
      metadata:   name: tekton-apps   namespace: argo-cd   finalizers:   - resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "41" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-apps     helm:       values: |         environment: staging         gitBranchPrefixes:           -
      staging         storageClassName: gp3         nodeSelector:           ops: ''true''         aws:           region:
      "us-west-2"           dns: staging.site.com         defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com         argocd:           server:
      deploy.staging.site.com         eventlistener:           enableWebhookSecret:
      true         apps:           - project: vp             enabled: true             argocd:               labels:                 created-by:
      xxx                 ops-main: xxx                 ops-secondary: xxx                 pm:
      xxx                 tm: xxx               namespace: prod             mailList:
      vp@site.com             devopsMailList: devops+vp@site.com             jiraURL:
      https://site.atlassian.net/browse/vp             tektonURL: https://tekton.staging.site.com/#/namespaces/ci/pipelineruns             slack:
      client-vp-ci             kubernetesRepository:               name: vp-kubernetes-aws               branch:
      main               url: git@github.com:org-name/vp-kubernetes-aws.git              components:               -
      name: backend                 repository: vp-backend                 pipeline:
      buildpack-django-build-pipeline                 applicationURL: https://api.staging.site.com                 eventlistener:                   template:
      buildpack-django-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/backend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/builder:v1                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/runner:v1               -
      name: frontend                 repository: vp-frontend                 pipeline:
      buildpack-frontend-build-pipeline                 applicationURL: https://staging.site.com                 eventlistener:                   template:
      buildpack-frontend-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/frontend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/builder:full                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/runner:full                   -
      name: source_subpath                     value: dist/web          # make sure
      PVCs are bound after the chart is synced         # by temporarily mount them
      into short-live job.         runPostInstallMountPvcJob: false      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.16"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true    ```    Above helm chart creates a new ArgoCD project
      for each project in values, for each component in project''s components there
      is created a separate ArgoCD   application and required for Tekton ci/cd resources
      (triggerbindings, roles, configmaps, jobs, serviceaccounts, pvcs and etc).    #
      fill below parameters for each `project` block    - apps[PROJECT].environment
      - possbility to define custom project''s environment, needed for cases when
      need to deploy `dev` and `prod` envs to the same cluster. For example `xxx`
      dev     and prod both deployed in rocks EKS (not required)   - apps[PROJECT].enabled
      - boolean value to define whether the project enabled or not (required)   -
      apps[PROJECT].argocd.labels - labels which are added to ArgoCD project (required)   -
      apps[PROJECT].argocd.namespace - allowed for ArgoCD project namespace (required)   -
      apps[PROJECT].argocd.syncWave - ArgoCD project sync wave, i.e. sequence in which
      project should be synced (not required, default: "200")   - apps[PROJECT].argocd.sourceRepos[]
      - source repositories added to ArgoCD project (not required, default: [<apps[PROJECT].kubernetesRepository.url>])   -
      apps[PROJECT].argocd.extraDestinationNamespaces[] - adds extra destination namespaces
      for ArgoCD project to be able to create custom apps within project''s kubernetes
      repo (not required, default: null)   - apps[PROJECT].mailList - project''s team
      email address (required)   - apps[PROJECT].devopsMailList - project''s devops
      team email address (required)   - apps[PROJECT].jiraURL - project''s JIRA url
      (required)   - apps[PROJECT].tektonURL - link to Tekton pipelineruns used in
      Tekton ConfigMap as `TEKTON_URL` during Slack notification send (required)   -
      apps[PROJECT].slack - project''s Slack channel name (required)   - apps[PROJECT].kubernetesRepository.name
      - project''s kubernetes repository name used in ArgoCD application and Tekton
      TriggerBinding (may be absent and replaced with     `apps[PROJECT].components[NAME].argocd`
      and `apps[PROJECT].argocd.sourceRepos[]` blocks in case if project has no kubernetes
      repo)   - apps[PROJECT].kubernetesRepository.branch - project''s kubernetes
      repository branch used in ArgoCD application and Tekton TriggerBinding (may
      be absent and replaced     with `apps[PROJECT].components[NAME].argocd` and
      `apps[PROJECT].argocd.sourceRepos[]` blocks in case if project has no kubernetes
      repo)   - apps[PROJECT].kubernetesRepository.url - project''s kubernetes repository
      url used in ArgoCD application and Tekton TriggerBinding (may be absent and
      replaced with     `apps[PROJECT].components[NAME].argocd` and `apps[PROJECT].argocd.sourceRepos[]`
      blocks in case if project has no kubernetes repo)    Basically we have 2 different
      types of ci/cd - basic (buildpacks, kaniko) and wordpress ones. So depending
      on project''s component type you will need to fill different parameters.    #
      fill below parameters for each `component` block    - apps[PROJECT].components[NAME].repository
      - the name of the repository containing the code (may be absent in case of wordpress
      application without deployment, i.e. bolrdswp, taco,     saritasa-wordpress-demo)   -
      apps[PROJECT].components[NAME].pipeline - the name of the pipeline building
      the code from the repository above   - apps[PROJECT].components[NAME].argocd.source.syncWave
      - custom component ArgoCD application sync wave (default: "210")   - apps[PROJECT].components[NAME].argocd.source.path
      - path to directory responsible for kubernetes resources creation of the ArgoCD
      Application (default: kubernetes repo path for basic     projects "apps/<apps[PROJECT].components[NAME].name>/manifests/<environment>"
      or "null" for wordpress projects)   - apps[PROJECT].components[NAME].argocd.source.repoUrl
      - url of repository which should be used for ArgoCD Application (default: kubernetes
      repo for basic projects     "<apps[PROJECT].kubernetesRepository.url>" or `https://charts.bitnami.com/bitnami`
      for wordpress projects)   - apps[PROJECT].components[NAME].argocd.source.targetRevision
      - tag or branch in the repository for ArgoCD Application (default: kubernetes
      branch for basic projects     "<apps[PROJECT].kubernetesRepository.branch>"
      or "11.0.14" for wordpress projects)   - apps[PROJECT].components[NAME].argocd.ignoreDeploymentReplicasDiff
      - flag whether this exact ArgoCD application should ignore `Replicas` count
      differences for deployments. It may be needed for `staging` and `prod` environments
      which use HPA (default: false)   - apps[PROJECT].components[NAME].applicationURL
      - url that should be used in tekton build ConfigMap `APPLICATION_URL` param   -
      apps[PROJECT].components[NAME].tektonKubernetesRepoDeployKeyName - name of existing
      in kubernetes cluster secret with SSH key to kubernetes repository, used in
      `kustomize` deployment     step (i.e. addon-backend-deploy-key). This param
      sets by default to `<project>-kubernetes-aws-deploy-key` if project has `kubernetesRepository`
      param in values (actual only for basic     components, not wordpress)   - apps[PROJECT].components[NAME].eventlistener.template
      - the name of the trigger template for the component to be used   - apps[PROJECT].components[NAME].eventlistener.enableWebhookSecret
      - should you enable the git web hook for this particular app/component in the
      eventlistener configuration   - apps[PROJECT].components[NAME].eventlistener.filter
      - custom filter for the component of the eventlistener   - apps[PROJECT].components[NAME].eventlistener.extraOverlays
      - extra overlays to be added into the eventlistener for the component   - apps[PROJECT].components[NAME].eventlistener.eventTypes
      - github event types to trigger the ci/cd   - apps[PROJECT].components[NAME].eventlistener.gitWebhookBranches[]
      - list of branches, push to which triggers ci/cd   - apps[PROJECT].components[NAME].extraBuildConfigParams
      - additional key/values to be added into `build-pipeline-config configmap` ConfigMap
      associated with the app   - apps[PROJECT].components[NAME].triggerBinding -
      values to be added into the TriggerBinding manifest except default ones    What
      is important to know is that any key defined in apps[PROJECT].components[NAME].triggerBinding
      would be added as is   into the generated triggerbinding associated with your
      app. However the chart renders some default values based on the values   in
      this values.yaml file:      - application, project, environment, docker_registry,
      kubernetes_repository_ssh_url, kubernetes_branch, kubernetes_repository_kustomize_path,
      source_subpath (for basic components)     - application, project, environment,
      namespace (for wordpress components)     # fill below parameters block only
      for `wordpress` components    - apps[PROJECT].components[NAME].wordpress.imageTag
      - tag of the wordpress image (default: "5.7.2")   - apps[PROJECT].components[NAME].wordpress.repository_ssh_url
      - project''s wordpress repository SSH url (default: null, may be absent if project
      has no wordpress repo)   - apps[PROJECT].components[NAME].wordpress.resources
      - wordpress pod resources params (default: requests.cpu: 100m, requests.memory:
      128Mi)   - apps[PROJECT].components[NAME].wordpress.commonLabels - wordpress
      pod common labels (default: commonLabels.tech_stack: php, commonLabels.application:
      wordpress)   - apps[PROJECT].components[NAME].wordpress.wordpressTablePrefix
      - wordpress DB tables prefix (default: wp_)   - apps[PROJECT].components[NAME].wordpress.existingSecret
      - name of existing in kubernetes secret with wp admin auth info (default: "<project_name>-<component_name>-<env>",     i.e.
      "taco-wordpress-dev")   - apps[PROJECT].components[NAME].wordpress.updateStrategy
      - strategy that should be used for wordpress pod update (default: updateStrategy.type:
      RollingUpdate,     updateStrategy.rollingUpdate.maxSurge: 0%, updateStrategy.rollingUpdate.maxUnavailable:
      100%, i.e. stop old pod and then create a new one)   - apps[PROJECT].components[NAME].wordpress.smtp.host
      - SMTP host for sending emails (default: mailhog.mailhog.svc.cluster.local)   -
      apps[PROJECT].components[NAME].wordpress.smtp.port - SMTP port for sending emails
      (default: 1025)   - apps[PROJECT].components[NAME].wordpress.smtp.user - SMTP
      user for sending emails (default: <project_name>, i.e. taco)   - apps[PROJECT].components[NAME].wordpress.smtp.password
      - SMTP password for sending emails (default: anypassword)   - apps[PROJECT].components[NAME].wordpress.nodeSelector
      - wordpress pod node selector params (default: nodeSelector.tech_stack: php,
      nodeSelector.pvc: "true")   - apps[PROJECT].components[NAME].wordpress.podSecurityContext
      - wordpress pod''s security context params (default: podSecurityContext.enabled:
      true, podSecurityContext.fsGroup: 1000)   - apps[PROJECT].components[NAME].wordpress.containerSecurityContext
      - wordpress pod container''s security context params (default: containerSecurityContext.enabled:
      true,     containerSecurityContext.runAsUser: 1000)   - apps[PROJECT].components[NAME].wordpress.ci
      - boolean flag which defines whether wordpress project has ci/cd or not (default:
      true)   - apps[PROJECT].components[NAME].wordpress.extraInitContainers - extra
      ci/cd init containers if needed, enabled only if wordpress component has `ci`
      flag enabled (default: null)   - apps[PROJECT].components[NAME].wordpress.extraVolumesSshKeySecret
      - name of a secret with wordpress repository SSH url (default: "<project_name>-<component_name>-deploy-key",     i.e.
      "taco-wordpress-deploy-key")   - apps[PROJECT].components[NAME].wordpress.extraVolumes
      - extra volumes that might be needed to wordpress pod (default: null)   - apps[PROJECT].components[NAME].wordpress.ingress.hostname
      - wordpress ingress hostname (default: "<project_name>.saritasa.rocks", i.e.
      "taco.saritasa.rocks")   - apps[PROJECT].components[NAME].wordpress.ingress.annotations
      - wordpress ingress annotations (default: kubernetes.io/ingress.class: "nginx",
      cert-manager.io/cluster-issuer: "letsencrypt-prod",     nginx.ingress.kubernetes.io/proxy-body-size:
      100m, nginx.ingress.kubernetes.io/proxy-connect-timeout: "300", nginx.ingress.kubernetes.io/proxy-next-upstream-timeout:
      "300",     nginx.ingress.kubernetes.io/auth-type: basic, nginx.ingress.kubernetes.io/auth-secret:
      <ingress.authSecret>, nginx.ingress.kubernetes.io/auth-realm: "Authentication
      Required",     nginx.ingress.kubernetes.io/server-snippet: |-,   add_header
      X-Robots-Tag "noindex, nofollow, nosnippet, noarchive")   - apps[PROJECT].components[NAME].wordpress.ingress.authSecret
      - name of kubernetes secret that should be used in ingress for basic auth (default:
      "<project_name>-<compinent_name>-<env>-basic-auth",     i.e. "taco-wordpress-dev-basic-auth")   -
      apps[PROJECT].components[NAME].wordpress.ingress.extraHosts - list of extra
      hosts that may be defined in ingress (default: null)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.host
      - wordpress DB host (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.user
      - wordpress DB user (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.existingSecret
      - name of existing in kubernetes secret with DB user password (required)   -
      apps[PROJECT].components[NAME].wordpress.externalDatabase.database - wordpress
      DB name (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.port
      - wordpress DB port (default: 3306)   - apps[PROJECT].components[NAME].wordpress.wordpressExtraConfigContent
      - wordpress extra configs if needed (default: null)   - apps[PROJECT].components[NAME].wordpress.extraEnvVars
      - wordpress extra env vars if needed (default: null)    Example of values with
      extra `eventlistener` and `extraBuildConfigParams` in component:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           gitBranchPrefixes:             -
      staging           storageClassName: gp2           aws:             region: "us-west-2"             dns:
      staging.site.com           defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com           argocd:             server:
      deploy.staging.site.com           eventlistener:             enableWebhookSecret:
      true           apps:             - project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: prod               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.site.com/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack                   applicationURL: https://api.site.com                   eventlistener:                     template:
      buildpack-backend-build-pipeline-trigger-template                   extraBuildConfigParams:
      # what additional K/V pairs you want to add into the build-pipeline-config configmap                     KEY:
      value                   triggerBinding:                     - name: docker_registry_repository                       value:
      XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/backend                     - name:
      buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/runner:v1                 -
      name: frontend                   repository: xxx-frontend                   pipeline:
      buildpack                   applicationURL: https://site.com                   eventlistener:                     enableWebhookSecret:
      false                     filter: (body.ref.startsWith(''refs/heads/develop'')
      || body.ref.startsWith(''refs/heads/release/''))                     template:
      buildpack-frontend-build-pipeline-trigger-template                     extraOverlays:
      []                     # - key: truncated_sha                     #   expression:
      "body.head_commit.id.truncate(7)"                     eventTypes: ["pull_request",
      "push"]                   extraBuildConfigParams: {}                   triggerBinding:                     -
      name: docker_registry_repository                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/frontend                     -
      name: buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web            # make
      sure PVCs are bound after the chart is synced           # by temporarily mount
      them into short-live job.           runPostInstallMountPvcJob: false        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true    ```    Example of
      old application from `saritasa-clients` repo, which has no separate `kubernetes`
      repository. Here we replace `apps[PROJECT].kubernetesRepository` block with   `apps[PROJECT].argocd.sourceRepos`
      and `apps[PROJECT].components[NAME].argocd` block, also it is required to set
      `apps[PROJECT].components[NAME].tektonKubernetesRepoDeployKeyName`   in such
      a case to use correct secret with deploy key as far as there is no kubernetes
      repo that is used by default.    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      git@github.com:saritasa-nest/xxx-backend.git                   - git@github.com:saritasa-nest/xxx-frontend.git               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: backend                   repository:
      xxx-backend                   pipeline: buildpack-django-build-pipeline                   applicationURL:
      https://api.xxx.site.url                   argocd:                     source:                       path:
      .kubernetes/manifests/dev                       repoUrl: git@github.com:saritasa-nest/xxx-backend.git                       targetRevision:
      develop                   eventlistener:                     template: buildpack-django-build-pipeline-trigger-template                   tektonKubernetesRepoDeployKeyName:
      xxx-backend-deploy-key                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1                 -
      name: frontend                   repository: xxx-frontend                   pipeline:
      buildpack-frontend-build-pipeline                   applicationURL: https://xxx.site.url                   argocd:                     source:                       path:
      .kubernetes/manifests/dev                       repoUrl: git@github.com:saritasa-nest/xxx-frontend.git                       targetRevision:
      develop                   eventlistener:                     template: buildpack-frontend-build-pipeline-trigger-template                   tektonKubernetesRepoDeployKeyName:
      xxx-frontend-deploy-key                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/frontend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Example with
      creating an ArgoCD project and application with its custom `environment` (case
      when in common `staging` environment we need to create for some reason project
      with   `dev` environment). Here is added an extra `apps[PROJECT].environment`
      param, which overrides default `environment` in helm values for this project,
      and   `apps[PROJECT].components[NAME].eventlistener.gitWebhookBranches` param,
      which defines that ci/cd should be trigger on push to `develop` branch.    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack-django-build-pipeline                   applicationURL: https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Also there might
      a situation that you would like to provision custom utility ArgoCD Application
      in argo-cd from project''s kubernetes repo (for example VP project provisions   like
      this `jitsi` application). To reach this you might need to add an extra destination
      namespace to ArgoCD Project, you should use   `apps[PROJECT].argocd.extraDestinationNamespaces[]`
      param for that like in below example.    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev                 extraDestinationNamespaces:                   -
      argo-cd               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack-django-build-pipeline                   applicationURL: https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    If you want
      to enable ignoring deployment replicas count differences in ArgoCD application
      of your component add `apps[PROJECT].components[NAME].argocd.ignoreDeploymentReplicasDiff:
      true` flag like in the below example (it may be needed for `staging` and `prod`
      envs, where you have horizontal pod autoscheduling - HPA):    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev                 extraDestinationNamespaces:                   -
      argo-cd               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   argocd:                     ignoreDeploymentReplicasDiff:
      true                   pipeline: buildpack-django-build-pipeline                   applicationURL:
      https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Simple wordpress
      application example filled by default:    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: wordpress                   repository:
      xxx-wordpress                   pipeline: wordpress-build-pipeline                   applicationURL:
      https://xxx.site.url                   wordpress:                     repository_ssh_url:
      git@github.com:saritasa-nest/xxx-wordpress.git                     externalDatabase:                       host:
      xxx.xxx.us-west-2.rds.amazonaws.com                       user: xxx-wordpress-user-dev                       existingSecret:
      xxx-wordpress-dev-externaldb                       database: xxx-wordpress-dev                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Simple wordpress
      application example filled by default, but without ci/cd:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: wordpress                   repository:
      xxx-wordpress                   pipeline: wordpress-build-pipeline                   applicationURL:
      https://xxx.site.url                   wordpress:                     ci: false                     externalDatabase:                       host:
      xxx.xxx.us-west-2.rds.amazonaws.com                       user: xxx-wordpress-user-dev                       existingSecret:
      xxx-wordpress-dev-externaldb                       database: xxx-wordpress-dev                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    More difficult
      example of project containing `wordpress` and `frontend` component. Also defined
      for example all extra wordpress params that could be set:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami                   - git@github.com:saritasa-nest/xxx-kubernetes-aws.git               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: wordpress                   repository: xxx-wordpress                   pipeline:
      wordpress-build-pipeline                   applicationURL: https://xxx.site.url                   wordpress:                     imageTag:
      "5.8.1"                     repository_ssh_url: "git@github.com:saritasa-nest/xxx-wordpress.git"                     resources:                       requests:                         memory:
      512Mi                         cpu: 100m                     commonLabels:                       tech_stack:
      php                       application: wordpress                     wordpressTablePrefix:
      "qbf_"                     existingSecret: xxx-wordpress                     updateStrategy:                       type:
      RollingUpdate                       rollingUpdate:                         maxSurge:
      25%                         maxUnavailable: 25%                     smtp:                       host:
      mysmtp.site.url                       port: 1010                       user:
      myuser                       password: mypassword                     nodeSelector:                       tech_stack:
      php                       pvc: "true"                     podSecurityContext:                       enabled:
      true                       fsGroup: 1001                     containerSecurityContext:                       enabled:
      true                       runAsUser: 1001                     ci: true                     extraInitContainers:                       -
      name: build-frontend                         image: node:14                         imagePullPolicy:
      Always                         command:                           - bash                           -
      -c                           - |                             git -c core.sshCommand="ssh
      -i ~/.ssh/id_rsa" clone git@github.com:saritasa-nest/xxx.git -b develop ~/xxx                             cd
      ~/xxx                             npm install                             npm
      run build:embedded-questionnaire                             cp -Rf $(pwd)/dist/*
      /bitnami/wordpress/wp-content/                             echo "Copied built
      files into /bitnami/wordpress/wp-content/"                             ls -la
      /bitnami/wordpress/wp-content/                             echo "Done BUILD
      FRONTEND"                         volumeMounts:                         - mountPath:
      /bitnami/wordpress                           name: wordpress-data                           subPath:
      wordpress                         - mountPath: /home/node/.ssh/id_rsa                           name:
      xxx-ssh-key                           subPath: ssh-privatekey                         -
      mountPath: /home/node/.ssh/known_hosts                           name: github-known-hosts                           subPath:
      config.ssh                         securityContext:                           runAsNonRoot:
      true                           runAsUser: 1000                           allowPrivilegeEscalation:
      false                     extraVolumesSshKeySecret: xxx-wordpress-deploy-key                     extraVolumes:                     -
      name: xxx-ssh-key                       secret:                         secretName:
      xxx-deploy-key                     ingress:                       hostname:
      test.xxx.site.url                       annotations:                         kubernetes.io/ingress.class:
      "nginx"                         cert-manager.io/cluster-issuer: "letsencrypt-prod"                         nginx.ingress.kubernetes.io/proxy-body-size:
      100m                         nginx.ingress.kubernetes.io/client-max-body-size:
      100m                         nginx.ingress.kubernetes.io/server-snippet: |-                           add_header
      X-Robots-Tag "noindex, nofollow, nosnippet, noarchive";                         nginx.ingress.kubernetes.io/whitelist-source-range:
      |                           35.85.92.224/32,                           100.21.244.185/32                       extraHosts:                         -
      name: test.xxx.site.url                           path: /wp-admin                     externalDatabase:                       host:
      "xxx.xxx.us-west-2.rds.amazonaws.com"                       user: "xxx-wp-user-dev"                       existingSecret:
      "xxx-wordpress-dev-externaldb"                       database: "xxx-wp-dev"                     wordpressExtraConfigContent:
      |                       @ini_set(''WP_MEMORY_LIMIT'', ''512M'');                       @ini_set(''ALLOW_UNFILTERED_UPLOADS'',
      true);                     extraEnvVars:                       KEY: VALUE                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template                  - name: frontend                   repository:
      xxx-frontend                   pipeline: buildpack-frontend-build-pipeline                   applicationURL:
      https://app.xxx.site.url                   eventlistener:                     template:
      buildpack-frontend-build-pipeline-trigger-template                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/frontend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ``` '
    digest: 082781259c4f2c96e62143378f43388dbb8cdeb42b7eb5f25163884b3e1eab04
    maintainers:
    - email: nospam@saritasa.com
      name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-apps
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-apps-0.1.23-dev/saritasa-tekton-apps-0.1.23-dev.tgz
    version: 0.1.23-dev
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2022-09-23T07:18:46.766578877Z"
    description: 'A Helm chart for tekton apps (rbac, eventlistener)  Implements:
      - dynamic records for eventlistener - PVCs - RBAC - configmaps for each app
      - triggerbindings for each app - kubernetes job to make sure the PVCs are bound
      and argocd marks the app as healthy - argocd project for each app - argocd application
      for each app component  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then declare dynamic list of projects (and associated components of that
      project like backend, api, frontend, etc) that would be dynamically added into
      the tekton''s eventlistener manifest.  Each component should be a separate git
      repository.  ```yaml --- apiVersion: argoproj.io/v1alpha1 kind: Application
      metadata:   name: tekton-apps   namespace: argo-cd   finalizers:   - resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "41" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-apps     helm:       values: |         environment: staging         gitBranchPrefixes:           -
      staging         storageClassName: gp3         nodeSelector:           ops: ''true''         aws:           region:
      "us-west-2"           dns: staging.site.com         defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com         argocd:           server:
      deploy.staging.site.com         eventlistener:           enableWebhookSecret:
      true         apps:           - project: vp             enabled: true             argocd:               labels:                 created-by:
      xxx                 ops-main: xxx                 ops-secondary: xxx                 pm:
      xxx                 tm: xxx               namespace: prod             mailList:
      vp@site.com             devopsMailList: devops+vp@site.com             jiraURL:
      https://site.atlassian.net/browse/vp             tektonURL: https://tekton.staging.site.com/#/namespaces/ci/pipelineruns             slack:
      client-vp-ci             kubernetesRepository:               name: vp-kubernetes-aws               branch:
      main               url: git@github.com:org-name/vp-kubernetes-aws.git              components:               -
      name: backend                 repository: vp-backend                 pipeline:
      buildpack-django-build-pipeline                 applicationURL: https://api.staging.site.com                 eventlistener:                   template:
      buildpack-django-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/backend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/builder:v1                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/runner:v1               -
      name: frontend                 repository: vp-frontend                 pipeline:
      buildpack-frontend-build-pipeline                 applicationURL: https://staging.site.com                 eventlistener:                   template:
      buildpack-frontend-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/frontend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/builder:full                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/runner:full                   -
      name: source_subpath                     value: dist/web          # make sure
      PVCs are bound after the chart is synced         # by temporarily mount them
      into short-live job.         runPostInstallMountPvcJob: false      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.16"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true    ```    Above helm chart creates a new ArgoCD project
      for each project in values, for each component in project''s components there
      is created a separate ArgoCD   application and required for Tekton ci/cd resources
      (triggerbindings, roles, configmaps, jobs, serviceaccounts, pvcs and etc).    #
      fill below parameters for each `project` block    - apps[PROJECT].environment
      - possbility to define custom project''s environment, needed for cases when
      need to deploy `dev` and `prod` envs to the same cluster. For example `xxx`
      dev     and prod both deployed in rocks EKS (not required)   - apps[PROJECT].enabled
      - boolean value to define whether the project enabled or not (required)   -
      apps[PROJECT].argocd.labels - labels which are added to ArgoCD project (required)   -
      apps[PROJECT].argocd.namespace - allowed for ArgoCD project namespace (required)   -
      apps[PROJECT].argocd.syncWave - ArgoCD project sync wave, i.e. sequence in which
      project should be synced (not required, default: "200")   - apps[PROJECT].argocd.sourceRepos[]
      - source repositories added to ArgoCD project (not required, default: [<apps[PROJECT].kubernetesRepository.url>])   -
      apps[PROJECT].argocd.extraDestinationNamespaces[] - adds extra destination namespaces
      for ArgoCD project to be able to create custom apps within project''s kubernetes
      repo (not required, default: null)   - apps[PROJECT].mailList - project''s team
      email address (required)   - apps[PROJECT].devopsMailList - project''s devops
      team email address (required)   - apps[PROJECT].jiraURL - project''s JIRA url
      (required)   - apps[PROJECT].tektonURL - link to Tekton pipelineruns used in
      Tekton ConfigMap as `TEKTON_URL` during Slack notification send (required)   -
      apps[PROJECT].slack - project''s Slack channel name (required)   - apps[PROJECT].kubernetesRepository.name
      - project''s kubernetes repository name used in ArgoCD application and Tekton
      TriggerBinding (may be absent and replaced with     `apps[PROJECT].components[NAME].argocd`
      and `apps[PROJECT].argocd.sourceRepos[]` blocks in case if project has no kubernetes
      repo)   - apps[PROJECT].kubernetesRepository.branch - project''s kubernetes
      repository branch used in ArgoCD application and Tekton TriggerBinding (may
      be absent and replaced     with `apps[PROJECT].components[NAME].argocd` and
      `apps[PROJECT].argocd.sourceRepos[]` blocks in case if project has no kubernetes
      repo)   - apps[PROJECT].kubernetesRepository.url - project''s kubernetes repository
      url used in ArgoCD application and Tekton TriggerBinding (may be absent and
      replaced with     `apps[PROJECT].components[NAME].argocd` and `apps[PROJECT].argocd.sourceRepos[]`
      blocks in case if project has no kubernetes repo)    Basically we have 2 different
      types of ci/cd - basic (buildpacks, kaniko) and wordpress ones. So depending
      on project''s component type you will need to fill different parameters.    #
      fill below parameters for each `component` block    - apps[PROJECT].components[NAME].repository
      - the name of the repository containing the code (may be absent in case of wordpress
      application without deployment, i.e. bolrdswp, taco,     saritasa-wordpress-demo)   -
      apps[PROJECT].components[NAME].pipeline - the name of the pipeline building
      the code from the repository above   - apps[PROJECT].components[NAME].argocd.source.syncWave
      - custom component ArgoCD application sync wave (default: "210")   - apps[PROJECT].components[NAME].argocd.source.path
      - path to directory responsible for kubernetes resources creation of the ArgoCD
      Application (default: kubernetes repo path for basic     projects "apps/<apps[PROJECT].components[NAME].name>/manifests/<environment>"
      or "null" for wordpress projects)   - apps[PROJECT].components[NAME].argocd.source.repoUrl
      - url of repository which should be used for ArgoCD Application (default: kubernetes
      repo for basic projects     "<apps[PROJECT].kubernetesRepository.url>" or `https://charts.bitnami.com/bitnami`
      for wordpress projects)   - apps[PROJECT].components[NAME].argocd.source.targetRevision
      - tag or branch in the repository for ArgoCD Application (default: kubernetes
      branch for basic projects     "<apps[PROJECT].kubernetesRepository.branch>"
      or "11.0.14" for wordpress projects)   - apps[PROJECT].components[NAME].argocd.ignoreDeploymentReplicasDiff
      - flag whether this exact ArgoCD application should ignore `Replicas` count
      differences for deployments. It may be needed for `staging` and `prod` environments
      which use HPA (default: false)   - apps[PROJECT].components[NAME].applicationURL
      - url that should be used in tekton build ConfigMap `APPLICATION_URL` param   -
      apps[PROJECT].components[NAME].tektonKubernetesRepoDeployKeyName - name of existing
      in kubernetes cluster secret with SSH key to kubernetes repository, used in
      `kustomize` deployment     step (i.e. addon-backend-deploy-key). This param
      sets by default to `<project>-kubernetes-aws-deploy-key` if project has `kubernetesRepository`
      param in values (actual only for basic     components, not wordpress)   - apps[PROJECT].components[NAME].eventlistener.template
      - the name of the trigger template for the component to be used   - apps[PROJECT].components[NAME].eventlistener.enableWebhookSecret
      - should you enable the git web hook for this particular app/component in the
      eventlistener configuration   - apps[PROJECT].components[NAME].eventlistener.filter
      - custom filter for the component of the eventlistener   - apps[PROJECT].components[NAME].eventlistener.extraOverlays
      - extra overlays to be added into the eventlistener for the component   - apps[PROJECT].components[NAME].eventlistener.eventTypes
      - github event types to trigger the ci/cd   - apps[PROJECT].components[NAME].eventlistener.gitWebhookBranches[]
      - list of branches, push to which triggers ci/cd   - apps[PROJECT].components[NAME].extraBuildConfigParams
      - additional key/values to be added into `build-pipeline-config configmap` ConfigMap
      associated with the app   - apps[PROJECT].components[NAME].triggerBinding -
      values to be added into the TriggerBinding manifest except default ones    What
      is important to know is that any key defined in apps[PROJECT].components[NAME].triggerBinding
      would be added as is   into the generated triggerbinding associated with your
      app. However the chart renders some default values based on the values   in
      this values.yaml file:      - application, project, environment, docker_registry,
      kubernetes_repository_ssh_url, kubernetes_branch, kubernetes_repository_kustomize_path,
      source_subpath (for basic components)     - application, project, environment,
      namespace (for wordpress components)     # fill below parameters block only
      for `wordpress` components    - apps[PROJECT].components[NAME].wordpress.imageTag
      - tag of the wordpress image (default: "5.7.2")   - apps[PROJECT].components[NAME].wordpress.repository_ssh_url
      - project''s wordpress repository SSH url (default: null, may be absent if project
      has no wordpress repo)   - apps[PROJECT].components[NAME].wordpress.resources
      - wordpress pod resources params (default: requests.cpu: 100m, requests.memory:
      128Mi)   - apps[PROJECT].components[NAME].wordpress.commonLabels - wordpress
      pod common labels (default: commonLabels.tech_stack: php, commonLabels.application:
      wordpress)   - apps[PROJECT].components[NAME].wordpress.wordpressTablePrefix
      - wordpress DB tables prefix (default: wp_)   - apps[PROJECT].components[NAME].wordpress.existingSecret
      - name of existing in kubernetes secret with wp admin auth info (default: "<project_name>-<component_name>-<env>",     i.e.
      "taco-wordpress-dev")   - apps[PROJECT].components[NAME].wordpress.updateStrategy
      - strategy that should be used for wordpress pod update (default: updateStrategy.type:
      RollingUpdate,     updateStrategy.rollingUpdate.maxSurge: 0%, updateStrategy.rollingUpdate.maxUnavailable:
      100%, i.e. stop old pod and then create a new one)   - apps[PROJECT].components[NAME].wordpress.smtp.host
      - SMTP host for sending emails (default: mailhog.mailhog.svc.cluster.local)   -
      apps[PROJECT].components[NAME].wordpress.smtp.port - SMTP port for sending emails
      (default: 1025)   - apps[PROJECT].components[NAME].wordpress.smtp.user - SMTP
      user for sending emails (default: <project_name>, i.e. taco)   - apps[PROJECT].components[NAME].wordpress.smtp.password
      - SMTP password for sending emails (default: anypassword)   - apps[PROJECT].components[NAME].wordpress.nodeSelector
      - wordpress pod node selector params (default: nodeSelector.tech_stack: php,
      nodeSelector.pvc: "true")   - apps[PROJECT].components[NAME].wordpress.podSecurityContext
      - wordpress pod''s security context params (default: podSecurityContext.enabled:
      true, podSecurityContext.fsGroup: 1000)   - apps[PROJECT].components[NAME].wordpress.containerSecurityContext
      - wordpress pod container''s security context params (default: containerSecurityContext.enabled:
      true,     containerSecurityContext.runAsUser: 1000)   - apps[PROJECT].components[NAME].wordpress.ci
      - boolean flag which defines whether wordpress project has ci/cd or not (default:
      true)   - apps[PROJECT].components[NAME].wordpress.extraInitContainers - extra
      ci/cd init containers if needed, enabled only if wordpress component has `ci`
      flag enabled (default: null)   - apps[PROJECT].components[NAME].wordpress.extraVolumesSshKeySecret
      - name of a secret with wordpress repository SSH url (default: "<project_name>-<component_name>-deploy-key",     i.e.
      "taco-wordpress-deploy-key")   - apps[PROJECT].components[NAME].wordpress.extraVolumes
      - extra volumes that might be needed to wordpress pod (default: null)   - apps[PROJECT].components[NAME].wordpress.ingress.hostname
      - wordpress ingress hostname (default: "<project_name>.saritasa.rocks", i.e.
      "taco.saritasa.rocks")   - apps[PROJECT].components[NAME].wordpress.ingress.annotations
      - wordpress ingress annotations (default: kubernetes.io/ingress.class: "nginx",
      cert-manager.io/cluster-issuer: "letsencrypt-prod",     nginx.ingress.kubernetes.io/proxy-body-size:
      100m, nginx.ingress.kubernetes.io/proxy-connect-timeout: "300", nginx.ingress.kubernetes.io/proxy-next-upstream-timeout:
      "300",     nginx.ingress.kubernetes.io/auth-type: basic, nginx.ingress.kubernetes.io/auth-secret:
      <ingress.authSecret>, nginx.ingress.kubernetes.io/auth-realm: "Authentication
      Required",     nginx.ingress.kubernetes.io/server-snippet: |-,   add_header
      X-Robots-Tag "noindex, nofollow, nosnippet, noarchive")   - apps[PROJECT].components[NAME].wordpress.ingress.authSecret
      - name of kubernetes secret that should be used in ingress for basic auth (default:
      "<project_name>-<compinent_name>-<env>-basic-auth",     i.e. "taco-wordpress-dev-basic-auth")   -
      apps[PROJECT].components[NAME].wordpress.ingress.extraHosts - list of extra
      hosts that may be defined in ingress (default: null)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.host
      - wordpress DB host (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.user
      - wordpress DB user (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.existingSecret
      - name of existing in kubernetes secret with DB user password (required)   -
      apps[PROJECT].components[NAME].wordpress.externalDatabase.database - wordpress
      DB name (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.port
      - wordpress DB port (default: 3306)   - apps[PROJECT].components[NAME].wordpress.wordpressExtraConfigContent
      - wordpress extra configs if needed (default: null)   - apps[PROJECT].components[NAME].wordpress.extraEnvVars
      - wordpress extra env vars if needed (default: null)    Example of values with
      extra `eventlistener` and `extraBuildConfigParams` in component:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           gitBranchPrefixes:             -
      staging           storageClassName: gp2           aws:             region: "us-west-2"             dns:
      staging.site.com           defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com           argocd:             server:
      deploy.staging.site.com           eventlistener:             enableWebhookSecret:
      true           apps:             - project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: prod               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.site.com/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack                   applicationURL: https://api.site.com                   eventlistener:                     template:
      buildpack-backend-build-pipeline-trigger-template                   extraBuildConfigParams:
      # what additional K/V pairs you want to add into the build-pipeline-config configmap                     KEY:
      value                   triggerBinding:                     - name: docker_registry_repository                       value:
      XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/backend                     - name:
      buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/runner:v1                 -
      name: frontend                   repository: xxx-frontend                   pipeline:
      buildpack                   applicationURL: https://site.com                   eventlistener:                     enableWebhookSecret:
      false                     filter: (body.ref.startsWith(''refs/heads/develop'')
      || body.ref.startsWith(''refs/heads/release/''))                     template:
      buildpack-frontend-build-pipeline-trigger-template                     extraOverlays:
      []                     # - key: truncated_sha                     #   expression:
      "body.head_commit.id.truncate(7)"                     eventTypes: ["pull_request",
      "push"]                   extraBuildConfigParams: {}                   triggerBinding:                     -
      name: docker_registry_repository                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/frontend                     -
      name: buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web            # make
      sure PVCs are bound after the chart is synced           # by temporarily mount
      them into short-live job.           runPostInstallMountPvcJob: false        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true    ```    Example of
      old application from `saritasa-clients` repo, which has no separate `kubernetes`
      repository. Here we replace `apps[PROJECT].kubernetesRepository` block with   `apps[PROJECT].argocd.sourceRepos`
      and `apps[PROJECT].components[NAME].argocd` block, also it is required to set
      `apps[PROJECT].components[NAME].tektonKubernetesRepoDeployKeyName`   in such
      a case to use correct secret with deploy key as far as there is no kubernetes
      repo that is used by default.    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      git@github.com:saritasa-nest/xxx-backend.git                   - git@github.com:saritasa-nest/xxx-frontend.git               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: backend                   repository:
      xxx-backend                   pipeline: buildpack-django-build-pipeline                   applicationURL:
      https://api.xxx.site.url                   argocd:                     source:                       path:
      .kubernetes/manifests/dev                       repoUrl: git@github.com:saritasa-nest/xxx-backend.git                       targetRevision:
      develop                   eventlistener:                     template: buildpack-django-build-pipeline-trigger-template                   tektonKubernetesRepoDeployKeyName:
      xxx-backend-deploy-key                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1                 -
      name: frontend                   repository: xxx-frontend                   pipeline:
      buildpack-frontend-build-pipeline                   applicationURL: https://xxx.site.url                   argocd:                     source:                       path:
      .kubernetes/manifests/dev                       repoUrl: git@github.com:saritasa-nest/xxx-frontend.git                       targetRevision:
      develop                   eventlistener:                     template: buildpack-frontend-build-pipeline-trigger-template                   tektonKubernetesRepoDeployKeyName:
      xxx-frontend-deploy-key                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/frontend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Example with
      creating an ArgoCD project and application with its custom `environment` (case
      when in common `staging` environment we need to create for some reason project
      with   `dev` environment). Here is added an extra `apps[PROJECT].environment`
      param, which overrides default `environment` in helm values for this project,
      and   `apps[PROJECT].components[NAME].eventlistener.gitWebhookBranches` param,
      which defines that ci/cd should be trigger on push to `develop` branch.    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack-django-build-pipeline                   applicationURL: https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Also there might
      a situation that you would like to provision custom utility ArgoCD Application
      in argo-cd from project''s kubernetes repo (for example VP project provisions   like
      this `jitsi` application). To reach this you might need to add an extra destination
      namespace to ArgoCD Project, you should use   `apps[PROJECT].argocd.extraDestinationNamespaces[]`
      param for that like in below example.    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev                 extraDestinationNamespaces:                   -
      argo-cd               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack-django-build-pipeline                   applicationURL: https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    If you want
      to enable ignoring deployment replicas count differences in ArgoCD application
      of your component add `apps[PROJECT].components[NAME].argocd.ignoreDeploymentReplicasDiff:
      true` flag like in the below example (it may be needed for `staging` and `prod`
      envs, where you have horizontal pod autoscheduling - HPA):    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev                 extraDestinationNamespaces:                   -
      argo-cd               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   argocd:                     ignoreDeploymentReplicasDiff:
      true                   pipeline: buildpack-django-build-pipeline                   applicationURL:
      https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Simple wordpress
      application example filled by default:    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: wordpress                   repository:
      xxx-wordpress                   pipeline: wordpress-build-pipeline                   applicationURL:
      https://xxx.site.url                   wordpress:                     repository_ssh_url:
      git@github.com:saritasa-nest/xxx-wordpress.git                     externalDatabase:                       host:
      xxx.xxx.us-west-2.rds.amazonaws.com                       user: xxx-wordpress-user-dev                       existingSecret:
      xxx-wordpress-dev-externaldb                       database: xxx-wordpress-dev                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Simple wordpress
      application example filled by default, but without ci/cd:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: wordpress                   repository:
      xxx-wordpress                   pipeline: wordpress-build-pipeline                   applicationURL:
      https://xxx.site.url                   wordpress:                     ci: false                     externalDatabase:                       host:
      xxx.xxx.us-west-2.rds.amazonaws.com                       user: xxx-wordpress-user-dev                       existingSecret:
      xxx-wordpress-dev-externaldb                       database: xxx-wordpress-dev                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    More difficult
      example of project containing `wordpress` and `frontend` component. Also defined
      for example all extra wordpress params that could be set:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami                   - git@github.com:saritasa-nest/xxx-kubernetes-aws.git               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: wordpress                   repository: xxx-wordpress                   pipeline:
      wordpress-build-pipeline                   applicationURL: https://xxx.site.url                   wordpress:                     imageTag:
      "5.8.1"                     repository_ssh_url: "git@github.com:saritasa-nest/xxx-wordpress.git"                     resources:                       requests:                         memory:
      512Mi                         cpu: 100m                     commonLabels:                       tech_stack:
      php                       application: wordpress                     wordpressTablePrefix:
      "qbf_"                     existingSecret: xxx-wordpress                     updateStrategy:                       type:
      RollingUpdate                       rollingUpdate:                         maxSurge:
      25%                         maxUnavailable: 25%                     smtp:                       host:
      mysmtp.site.url                       port: 1010                       user:
      myuser                       password: mypassword                     nodeSelector:                       tech_stack:
      php                       pvc: "true"                     podSecurityContext:                       enabled:
      true                       fsGroup: 1001                     containerSecurityContext:                       enabled:
      true                       runAsUser: 1001                     ci: true                     extraInitContainers:                       -
      name: build-frontend                         image: node:14                         imagePullPolicy:
      Always                         command:                           - bash                           -
      -c                           - |                             git -c core.sshCommand="ssh
      -i ~/.ssh/id_rsa" clone git@github.com:saritasa-nest/xxx.git -b develop ~/xxx                             cd
      ~/xxx                             npm install                             npm
      run build:embedded-questionnaire                             cp -Rf $(pwd)/dist/*
      /bitnami/wordpress/wp-content/                             echo "Copied built
      files into /bitnami/wordpress/wp-content/"                             ls -la
      /bitnami/wordpress/wp-content/                             echo "Done BUILD
      FRONTEND"                         volumeMounts:                         - mountPath:
      /bitnami/wordpress                           name: wordpress-data                           subPath:
      wordpress                         - mountPath: /home/node/.ssh/id_rsa                           name:
      xxx-ssh-key                           subPath: ssh-privatekey                         -
      mountPath: /home/node/.ssh/known_hosts                           name: github-known-hosts                           subPath:
      config.ssh                         securityContext:                           runAsNonRoot:
      true                           runAsUser: 1000                           allowPrivilegeEscalation:
      false                     extraVolumesSshKeySecret: xxx-wordpress-deploy-key                     extraVolumes:                     -
      name: xxx-ssh-key                       secret:                         secretName:
      xxx-deploy-key                     ingress:                       hostname:
      test.xxx.site.url                       annotations:                         kubernetes.io/ingress.class:
      "nginx"                         cert-manager.io/cluster-issuer: "letsencrypt-prod"                         nginx.ingress.kubernetes.io/proxy-body-size:
      100m                         nginx.ingress.kubernetes.io/client-max-body-size:
      100m                         nginx.ingress.kubernetes.io/server-snippet: |-                           add_header
      X-Robots-Tag "noindex, nofollow, nosnippet, noarchive";                         nginx.ingress.kubernetes.io/whitelist-source-range:
      |                           35.85.92.224/32,                           100.21.244.185/32                       extraHosts:                         -
      name: test.xxx.site.url                           path: /wp-admin                     externalDatabase:                       host:
      "xxx.xxx.us-west-2.rds.amazonaws.com"                       user: "xxx-wp-user-dev"                       existingSecret:
      "xxx-wordpress-dev-externaldb"                       database: "xxx-wp-dev"                     wordpressExtraConfigContent:
      |                       @ini_set(''WP_MEMORY_LIMIT'', ''512M'');                       @ini_set(''ALLOW_UNFILTERED_UPLOADS'',
      true);                     extraEnvVars:                       KEY: VALUE                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template                  - name: frontend                   repository:
      xxx-frontend                   pipeline: buildpack-frontend-build-pipeline                   applicationURL:
      https://app.xxx.site.url                   eventlistener:                     template:
      buildpack-frontend-build-pipeline-trigger-template                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/frontend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ``` '
    digest: 7dd6698998a9bf7074d29ce047b1bab7de9c0a6091adbb2bc9d4ed7a698e9ad4
    maintainers:
    - email: nospam@saritasa.com
      name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-apps
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-apps-0.1.23-dev/saritasa-tekton-apps-0.1.23-dev.tgz
    version: 0.1.23-dev
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2022-08-31T02:33:27.654335075Z"
    description: 'A Helm chart for tekton apps (rbac, eventlistener)  Implements:
      - dynamic records for eventlistener - PVCs - RBAC - configmaps for each app
      - triggerbindings for each app - kubernetes job to make sure the PVCs are bound
      and argocd marks the app as healthy - argocd project for each app - argocd application
      for each app component  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then declare dynamic list of projects (and associated components of that
      project like backend, api, frontend, etc) that would be dynamically added into
      the tekton''s eventlistener manifest.  Each component should be a separate git
      repository.  ```yaml --- apiVersion: argoproj.io/v1alpha1 kind: Application
      metadata:   name: tekton-apps   namespace: argo-cd   finalizers:   - resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "41" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-apps     helm:       values: |         environment: staging         gitBranchPrefixes:           -
      staging         storageClassName: gp3         nodeSelector:           ops: ''true''         aws:           region:
      "us-west-2"           dns: staging.site.com         defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com         argocd:           server:
      deploy.staging.site.com         eventlistener:           enableWebhookSecret:
      true         apps:           - project: vp             enabled: true             argocd:               labels:                 created-by:
      xxx                 ops-main: xxx                 ops-secondary: xxx                 pm:
      xxx                 tm: xxx               namespace: prod             mailList:
      vp@site.com             devopsMailList: devops+vp@site.com             jiraURL:
      https://site.atlassian.net/browse/vp             tektonURL: https://tekton.staging.site.com/#/namespaces/ci/pipelineruns             slack:
      client-vp-ci             kubernetesRepository:               name: vp-kubernetes-aws               branch:
      main               url: git@github.com:org-name/vp-kubernetes-aws.git              components:               -
      name: backend                 repository: vp-backend                 pipeline:
      buildpack-django-build-pipeline                 applicationURL: https://api.staging.site.com                 eventlistener:                   template:
      buildpack-django-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/backend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/builder:v1                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/runner:v1               -
      name: frontend                 repository: vp-frontend                 pipeline:
      buildpack-frontend-build-pipeline                 applicationURL: https://staging.site.com                 eventlistener:                   template:
      buildpack-frontend-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/frontend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/builder:full                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/runner:full                   -
      name: source_subpath                     value: dist/web          # make sure
      PVCs are bound after the chart is synced         # by temporarily mount them
      into short-live job.         runPostInstallMountPvcJob: false      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.16"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true    ```    Above helm chart creates a new ArgoCD project
      for each project in values, for each component in project''s components there
      is created a separate ArgoCD   application and required for Tekton ci/cd resources
      (triggerbindings, roles, configmaps, jobs, serviceaccounts, pvcs and etc).    #
      fill below parameters for each `project` block    - apps[PROJECT].environment
      - possbility to define custom project''s environment, needed for cases when
      need to deploy `dev` and `prod` envs to the same cluster. For example `xxx`
      dev     and prod both deployed in rocks EKS (not required)   - apps[PROJECT].enabled
      - boolean value to define whether the project enabled or not (required)   -
      apps[PROJECT].argocd.labels - labels which are added to ArgoCD project (required)   -
      apps[PROJECT].argocd.namespace - allowed for ArgoCD project namespace (required)   -
      apps[PROJECT].argocd.syncWave - ArgoCD project sync wave, i.e. sequence in which
      project should be synced (not required, default: "200")   - apps[PROJECT].argocd.sourceRepos[]
      - source repositories added to ArgoCD project (not required, default: [<apps[PROJECT].kubernetesRepository.url>])   -
      apps[PROJECT].argocd.extraDestinationNamespaces[] - adds extra destination namespaces
      for ArgoCD project to be able to create custom apps within project''s kubernetes
      repo (not required, default: null)   - apps[PROJECT].mailList - project''s team
      email address (required)   - apps[PROJECT].devopsMailList - project''s devops
      team email address (required)   - apps[PROJECT].jiraURL - project''s JIRA url
      (required)   - apps[PROJECT].tektonURL - link to Tekton pipelineruns used in
      Tekton ConfigMap as `TEKTON_URL` during Slack notification send (required)   -
      apps[PROJECT].slack - project''s Slack channel name (required)   - apps[PROJECT].kubernetesRepository.name
      - project''s kubernetes repository name used in ArgoCD application and Tekton
      TriggerBinding (may be absent and replaced with     `apps[PROJECT].components[NAME].argocd`
      and `apps[PROJECT].argocd.sourceRepos[]` blocks in case if project has no kubernetes
      repo)   - apps[PROJECT].kubernetesRepository.branch - project''s kubernetes
      repository branch used in ArgoCD application and Tekton TriggerBinding (may
      be absent and replaced     with `apps[PROJECT].components[NAME].argocd` and
      `apps[PROJECT].argocd.sourceRepos[]` blocks in case if project has no kubernetes
      repo)   - apps[PROJECT].kubernetesRepository.url - project''s kubernetes repository
      url used in ArgoCD application and Tekton TriggerBinding (may be absent and
      replaced with     `apps[PROJECT].components[NAME].argocd` and `apps[PROJECT].argocd.sourceRepos[]`
      blocks in case if project has no kubernetes repo)    Basically we have 2 different
      types of ci/cd - basic (buildpacks, kaniko) and wordpress ones. So depending
      on project''s component type you will need to fill different parameters.    #
      fill below parameters for each `component` block    - apps[PROJECT].components[NAME].repository
      - the name of the repository containing the code (may be absent in case of wordpress
      application without deployment, i.e. bolrdswp, taco,     saritasa-wordpress-demo)   -
      apps[PROJECT].components[NAME].pipeline - the name of the pipeline building
      the code from the repository above   - apps[PROJECT].components[NAME].argocd.source.syncWave
      - custom component ArgoCD application sync wave (default: "210")   - apps[PROJECT].components[NAME].argocd.source.path
      - path to directory responsible for kubernetes resources creation of the ArgoCD
      Application (default: kubernetes repo path for basic     projects "apps/<apps[PROJECT].components[NAME].name>/manifests/<environment>"
      or "null" for wordpress projects)   - apps[PROJECT].components[NAME].argocd.source.repoUrl
      - url of repository which should be used for ArgoCD Application (default: kubernetes
      repo for basic projects     "<apps[PROJECT].kubernetesRepository.url>" or `https://charts.bitnami.com/bitnami`
      for wordpress projects)   - apps[PROJECT].components[NAME].argocd.source.targetRevision
      - tag or branch in the repository for ArgoCD Application (default: kubernetes
      branch for basic projects     "<apps[PROJECT].kubernetesRepository.branch>"
      or "11.0.14" for wordpress projects)   - apps[PROJECT].components[NAME].argocd.ignoreDeploymentReplicasDiff
      - flag whether this exact ArgoCD application should ignore `Replicas` count
      differences for deployments. It may be needed for `staging` and `prod` environments
      which use HPA (default: false)   - apps[PROJECT].components[NAME].applicationURL
      - url that should be used in tekton build ConfigMap `APPLICATION_URL` param   -
      apps[PROJECT].components[NAME].tektonKubernetesRepoDeployKeyName - name of existing
      in kubernetes cluster secret with SSH key to kubernetes repository, used in
      `kustomize` deployment     step (i.e. addon-backend-deploy-key). This param
      sets by default to `<project>-kubernetes-aws-deploy-key` if project has `kubernetesRepository`
      param in values (actual only for basic     components, not wordpress)   - apps[PROJECT].components[NAME].eventlistener.template
      - the name of the trigger template for the component to be used   - apps[PROJECT].components[NAME].eventlistener.enableWebhookSecret
      - should you enable the git web hook for this particular app/component in the
      eventlistener configuration   - apps[PROJECT].components[NAME].eventlistener.filter
      - custom filter for the component of the eventlistener   - apps[PROJECT].components[NAME].eventlistener.extraOverlays
      - extra overlays to be added into the eventlistener for the component   - apps[PROJECT].components[NAME].eventlistener.eventTypes
      - github event types to trigger the ci/cd   - apps[PROJECT].components[NAME].eventlistener.gitWebhookBranches[]
      - list of branches, push to which triggers ci/cd   - apps[PROJECT].components[NAME].extraBuildConfigParams
      - additional key/values to be added into `build-pipeline-config configmap` ConfigMap
      associated with the app   - apps[PROJECT].components[NAME].triggerBinding -
      values to be added into the TriggerBinding manifest except default ones    What
      is important to know is that any key defined in apps[PROJECT].components[NAME].triggerBinding
      would be added as is   into the generated triggerbinding associated with your
      app. However the chart renders some default values based on the values   in
      this values.yaml file:      - application, project, environment, docker_registry,
      kubernetes_repository_ssh_url, kubernetes_branch, kubernetes_repository_kustomize_path,
      source_subpath (for basic components)     - application, project, environment,
      namespace (for wordpress components)     # fill below parameters block only
      for `wordpress` components    - apps[PROJECT].components[NAME].wordpress.imageTag
      - tag of the wordpress image (default: "5.7.2")   - apps[PROJECT].components[NAME].wordpress.repository_ssh_url
      - project''s wordpress repository SSH url (default: null, may be absent if project
      has no wordpress repo)   - apps[PROJECT].components[NAME].wordpress.resources
      - wordpress pod resources params (default: requests.cpu: 100m, requests.memory:
      128Mi)   - apps[PROJECT].components[NAME].wordpress.commonLabels - wordpress
      pod common labels (default: commonLabels.tech_stack: php, commonLabels.application:
      wordpress)   - apps[PROJECT].components[NAME].wordpress.wordpressTablePrefix
      - wordpress DB tables prefix (default: wp_)   - apps[PROJECT].components[NAME].wordpress.existingSecret
      - name of existing in kubernetes secret with wp admin auth info (default: "<project_name>-<component_name>-<env>",     i.e.
      "taco-wordpress-dev")   - apps[PROJECT].components[NAME].wordpress.updateStrategy
      - strategy that should be used for wordpress pod update (default: updateStrategy.type:
      RollingUpdate,     updateStrategy.rollingUpdate.maxSurge: 0%, updateStrategy.rollingUpdate.maxUnavailable:
      100%, i.e. stop old pod and then create a new one)   - apps[PROJECT].components[NAME].wordpress.smtp.host
      - SMTP host for sending emails (default: mailhog.mailhog.svc.cluster.local)   -
      apps[PROJECT].components[NAME].wordpress.smtp.port - SMTP port for sending emails
      (default: 1025)   - apps[PROJECT].components[NAME].wordpress.smtp.user - SMTP
      user for sending emails (default: <project_name>, i.e. taco)   - apps[PROJECT].components[NAME].wordpress.smtp.password
      - SMTP password for sending emails (default: anypassword)   - apps[PROJECT].components[NAME].wordpress.nodeSelector
      - wordpress pod node selector params (default: nodeSelector.tech_stack: php,
      nodeSelector.pvc: "true")   - apps[PROJECT].components[NAME].wordpress.podSecurityContext
      - wordpress pod''s security context params (default: podSecurityContext.enabled:
      true, podSecurityContext.fsGroup: 1000)   - apps[PROJECT].components[NAME].wordpress.containerSecurityContext
      - wordpress pod container''s security context params (default: containerSecurityContext.enabled:
      true,     containerSecurityContext.runAsUser: 1000)   - apps[PROJECT].components[NAME].wordpress.ci
      - boolean flag which defines whether wordpress project has ci/cd or not (default:
      true)   - apps[PROJECT].components[NAME].wordpress.extraInitContainers - extra
      ci/cd init containers if needed, enabled only if wordpress component has `ci`
      flag enabled (default: null)   - apps[PROJECT].components[NAME].wordpress.extraVolumesSshKeySecret
      - name of a secret with wordpress repository SSH url (default: "<project_name>-<component_name>-deploy-key",     i.e.
      "taco-wordpress-deploy-key")   - apps[PROJECT].components[NAME].wordpress.extraVolumes
      - extra volumes that might be needed to wordpress pod (default: null)   - apps[PROJECT].components[NAME].wordpress.ingress.hostname
      - wordpress ingress hostname (default: "<project_name>.saritasa.rocks", i.e.
      "taco.saritasa.rocks")   - apps[PROJECT].components[NAME].wordpress.ingress.annotations
      - wordpress ingress annotations (default: kubernetes.io/ingress.class: "nginx",
      cert-manager.io/cluster-issuer: "letsencrypt-prod",     nginx.ingress.kubernetes.io/proxy-body-size:
      100m, nginx.ingress.kubernetes.io/proxy-connect-timeout: "300", nginx.ingress.kubernetes.io/proxy-next-upstream-timeout:
      "300",     nginx.ingress.kubernetes.io/auth-type: basic, nginx.ingress.kubernetes.io/auth-secret:
      <ingress.authSecret>, nginx.ingress.kubernetes.io/auth-realm: "Authentication
      Required",     nginx.ingress.kubernetes.io/server-snippet: |-,   add_header
      X-Robots-Tag "noindex, nofollow, nosnippet, noarchive")   - apps[PROJECT].components[NAME].wordpress.ingress.authSecret
      - name of kubernetes secret that should be used in ingress for basic auth (default:
      "<project_name>-<compinent_name>-<env>-basic-auth",     i.e. "taco-wordpress-dev-basic-auth")   -
      apps[PROJECT].components[NAME].wordpress.ingress.extraHosts - list of extra
      hosts that may be defined in ingress (default: null)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.host
      - wordpress DB host (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.user
      - wordpress DB user (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.existingSecret
      - name of existing in kubernetes secret with DB user password (required)   -
      apps[PROJECT].components[NAME].wordpress.externalDatabase.database - wordpress
      DB name (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.port
      - wordpress DB port (default: 3306)   - apps[PROJECT].components[NAME].wordpress.wordpressExtraConfigContent
      - wordpress extra configs if needed (default: null)   - apps[PROJECT].components[NAME].wordpress.extraEnvVars
      - wordpress extra env vars if needed (default: null)    Example of values with
      extra `eventlistener` and `extraBuildConfigParams` in component:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           gitBranchPrefixes:             -
      staging           storageClassName: gp2           aws:             region: "us-west-2"             dns:
      staging.site.com           defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com           argocd:             server:
      deploy.staging.site.com           eventlistener:             enableWebhookSecret:
      true           apps:             - project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: prod               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.site.com/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack                   applicationURL: https://api.site.com                   eventlistener:                     template:
      buildpack-backend-build-pipeline-trigger-template                   extraBuildConfigParams:
      # what additional K/V pairs you want to add into the build-pipeline-config configmap                     KEY:
      value                   triggerBinding:                     - name: docker_registry_repository                       value:
      XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/backend                     - name:
      buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/runner:v1                 -
      name: frontend                   repository: xxx-frontend                   pipeline:
      buildpack                   applicationURL: https://site.com                   eventlistener:                     enableWebhookSecret:
      false                     filter: (body.ref.startsWith(''refs/heads/develop'')
      || body.ref.startsWith(''refs/heads/release/''))                     template:
      buildpack-frontend-build-pipeline-trigger-template                     extraOverlays:
      []                     # - key: truncated_sha                     #   expression:
      "body.head_commit.id.truncate(7)"                     eventTypes: ["pull_request",
      "push"]                   extraBuildConfigParams: {}                   triggerBinding:                     -
      name: docker_registry_repository                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/frontend                     -
      name: buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web            # make
      sure PVCs are bound after the chart is synced           # by temporarily mount
      them into short-live job.           runPostInstallMountPvcJob: false        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true    ```    Example of
      old application from `saritasa-clients` repo, which has no separate `kubernetes`
      repository. Here we replace `apps[PROJECT].kubernetesRepository` block with   `apps[PROJECT].argocd.sourceRepos`
      and `apps[PROJECT].components[NAME].argocd` block, also it is required to set
      `apps[PROJECT].components[NAME].tektonKubernetesRepoDeployKeyName`   in such
      a case to use correct secret with deploy key as far as there is no kubernetes
      repo that is used by default.    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      git@github.com:saritasa-nest/xxx-backend.git                   - git@github.com:saritasa-nest/xxx-frontend.git               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: backend                   repository:
      xxx-backend                   pipeline: buildpack-django-build-pipeline                   applicationURL:
      https://api.xxx.site.url                   argocd:                     source:                       path:
      .kubernetes/manifests/dev                       repoUrl: git@github.com:saritasa-nest/xxx-backend.git                       targetRevision:
      develop                   eventlistener:                     template: buildpack-django-build-pipeline-trigger-template                   tektonKubernetesRepoDeployKeyName:
      xxx-backend-deploy-key                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1                 -
      name: frontend                   repository: xxx-frontend                   pipeline:
      buildpack-frontend-build-pipeline                   applicationURL: https://xxx.site.url                   argocd:                     source:                       path:
      .kubernetes/manifests/dev                       repoUrl: git@github.com:saritasa-nest/xxx-frontend.git                       targetRevision:
      develop                   eventlistener:                     template: buildpack-frontend-build-pipeline-trigger-template                   tektonKubernetesRepoDeployKeyName:
      xxx-frontend-deploy-key                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/frontend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Example with
      creating an ArgoCD project and application with its custom `environment` (case
      when in common `staging` environment we need to create for some reason project
      with   `dev` environment). Here is added an extra `apps[PROJECT].environment`
      param, which overrides default `environment` in helm values for this project,
      and   `apps[PROJECT].components[NAME].eventlistener.gitWebhookBranches` param,
      which defines that ci/cd should be trigger on push to `develop` branch.    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack-django-build-pipeline                   applicationURL: https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Also there might
      a situation that you would like to provision custom utility ArgoCD Application
      in argo-cd from project''s kubernetes repo (for example VP project provisions   like
      this `jitsi` application). To reach this you might need to add an extra destination
      namespace to ArgoCD Project, you should use   `apps[PROJECT].argocd.extraDestinationNamespaces[]`
      param for that like in below example.    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev                 extraDestinationNamespaces:                   -
      argo-cd               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack-django-build-pipeline                   applicationURL: https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    If you want
      to enable ignoring deployment replicas count differences in ArgoCD application
      of your component add `apps[PROJECT].components[NAME].argocd.ignoreDeploymentReplicasDiff:
      true` flag like in the below example (it may be needed for `staging` and `prod`
      envs, where you have horizontal pod autoscheduling - HPA):    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev                 extraDestinationNamespaces:                   -
      argo-cd               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   argocd:                     ignoreDeploymentReplicasDiff:
      true                   pipeline: buildpack-django-build-pipeline                   applicationURL:
      https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Simple wordpress
      application example filled by default:    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: wordpress                   repository:
      xxx-wordpress                   pipeline: wordpress-build-pipeline                   applicationURL:
      https://xxx.site.url                   wordpress:                     repository_ssh_url:
      git@github.com:saritasa-nest/xxx-wordpress.git                     externalDatabase:                       host:
      xxx.xxx.us-west-2.rds.amazonaws.com                       user: xxx-wordpress-user-dev                       existingSecret:
      xxx-wordpress-dev-externaldb                       database: xxx-wordpress-dev                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Simple wordpress
      application example filled by default, but without ci/cd:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: wordpress                   repository:
      xxx-wordpress                   pipeline: wordpress-build-pipeline                   applicationURL:
      https://xxx.site.url                   wordpress:                     ci: false                     externalDatabase:                       host:
      xxx.xxx.us-west-2.rds.amazonaws.com                       user: xxx-wordpress-user-dev                       existingSecret:
      xxx-wordpress-dev-externaldb                       database: xxx-wordpress-dev                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    More difficult
      example of project containing `wordpress` and `frontend` component. Also defined
      for example all extra wordpress params that could be set:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami                   - git@github.com:saritasa-nest/xxx-kubernetes-aws.git               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: wordpress                   repository: xxx-wordpress                   pipeline:
      wordpress-build-pipeline                   applicationURL: https://xxx.site.url                   wordpress:                     imageTag:
      "5.8.1"                     repository_ssh_url: "git@github.com:saritasa-nest/xxx-wordpress.git"                     resources:                       requests:                         memory:
      512Mi                         cpu: 100m                     commonLabels:                       tech_stack:
      php                       application: wordpress                     wordpressTablePrefix:
      "qbf_"                     existingSecret: xxx-wordpress                     updateStrategy:                       type:
      RollingUpdate                       rollingUpdate:                         maxSurge:
      25%                         maxUnavailable: 25%                     smtp:                       host:
      mysmtp.site.url                       port: 1010                       user:
      myuser                       password: mypassword                     nodeSelector:                       tech_stack:
      php                       pvc: "true"                     podSecurityContext:                       enabled:
      true                       fsGroup: 1001                     containerSecurityContext:                       enabled:
      true                       runAsUser: 1001                     ci: true                     extraInitContainers:                       -
      name: build-frontend                         image: node:14                         imagePullPolicy:
      Always                         command:                           - bash                           -
      -c                           - |                             git -c core.sshCommand="ssh
      -i ~/.ssh/id_rsa" clone git@github.com:saritasa-nest/xxx.git -b develop ~/xxx                             cd
      ~/xxx                             npm install                             npm
      run build:embedded-questionnaire                             cp -Rf $(pwd)/dist/*
      /bitnami/wordpress/wp-content/                             echo "Copied built
      files into /bitnami/wordpress/wp-content/"                             ls -la
      /bitnami/wordpress/wp-content/                             echo "Done BUILD
      FRONTEND"                         volumeMounts:                         - mountPath:
      /bitnami/wordpress                           name: wordpress-data                           subPath:
      wordpress                         - mountPath: /home/node/.ssh/id_rsa                           name:
      xxx-ssh-key                           subPath: ssh-privatekey                         -
      mountPath: /home/node/.ssh/known_hosts                           name: github-known-hosts                           subPath:
      config.ssh                         securityContext:                           runAsNonRoot:
      true                           runAsUser: 1000                           allowPrivilegeEscalation:
      false                     extraVolumesSshKeySecret: xxx-wordpress-deploy-key                     extraVolumes:                     -
      name: xxx-ssh-key                       secret:                         secretName:
      xxx-deploy-key                     ingress:                       hostname:
      test.xxx.site.url                       annotations:                         kubernetes.io/ingress.class:
      "nginx"                         cert-manager.io/cluster-issuer: "letsencrypt-prod"                         nginx.ingress.kubernetes.io/proxy-body-size:
      100m                         nginx.ingress.kubernetes.io/client-max-body-size:
      100m                         nginx.ingress.kubernetes.io/server-snippet: |-                           add_header
      X-Robots-Tag "noindex, nofollow, nosnippet, noarchive";                         nginx.ingress.kubernetes.io/whitelist-source-range:
      |                           35.85.92.224/32,                           100.21.244.185/32                       extraHosts:                         -
      name: test.xxx.site.url                           path: /wp-admin                     externalDatabase:                       host:
      "xxx.xxx.us-west-2.rds.amazonaws.com"                       user: "xxx-wp-user-dev"                       existingSecret:
      "xxx-wordpress-dev-externaldb"                       database: "xxx-wp-dev"                     wordpressExtraConfigContent:
      |                       @ini_set(''WP_MEMORY_LIMIT'', ''512M'');                       @ini_set(''ALLOW_UNFILTERED_UPLOADS'',
      true);                     extraEnvVars:                       KEY: VALUE                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template                  - name: frontend                   repository:
      xxx-frontend                   pipeline: buildpack-frontend-build-pipeline                   applicationURL:
      https://app.xxx.site.url                   eventlistener:                     template:
      buildpack-frontend-build-pipeline-trigger-template                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/frontend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ``` '
    digest: f91ff93e0297781b10919e49011ff72a0e6ef336e42e899a388e76245305247f
    maintainers:
    - email: nospam@saritasa.com
      name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-apps
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-apps-0.1.22/saritasa-tekton-apps-0.1.22.tgz
    version: 0.1.22
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2022-08-13T20:29:07.088852388Z"
    description: 'A Helm chart for tekton apps (rbac, eventlistener)  Implements:
      - dynamic records for eventlistener - PVCs - RBAC - configmaps for each app
      - triggerbindings for each app - kubernetes job to make sure the PVCs are bound
      and argocd marks the app as healthy - argocd project for each app - argocd application
      for each app component  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then declare dynamic list of projects (and associated components of that
      project like backend, api, frontend, etc) that would be dynamically added into
      the tekton''s eventlistener manifest.  Each component should be a separate git
      repository.  ```yaml --- apiVersion: argoproj.io/v1alpha1 kind: Application
      metadata:   name: tekton-apps   namespace: argo-cd   finalizers:   - resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "41" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-apps     helm:       values: |         environment: staging         gitBranchPrefixes:           -
      staging         storageClassName: gp3         nodeSelector:           ops: ''true''         aws:           region:
      "us-west-2"           dns: staging.site.com         defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com         argocd:           server:
      deploy.staging.site.com         eventlistener:           enableWebhookSecret:
      true         apps:           - project: vp             enabled: true             argocd:               labels:                 created-by:
      xxx                 ops-main: xxx                 ops-secondary: xxx                 pm:
      xxx                 tm: xxx               namespace: prod             mailList:
      vp@site.com             devopsMailList: devops+vp@site.com             jiraURL:
      https://site.atlassian.net/browse/vp             tektonURL: https://tekton.staging.site.com/#/namespaces/ci/pipelineruns             slack:
      client-vp-ci             kubernetesRepository:               name: vp-kubernetes-aws               branch:
      main               url: git@github.com:org-name/vp-kubernetes-aws.git              components:               -
      name: backend                 repository: vp-backend                 pipeline:
      buildpack-django-build-pipeline                 applicationURL: https://api.staging.site.com                 eventlistener:                   template:
      buildpack-django-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/backend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/builder:v1                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/runner:v1               -
      name: frontend                 repository: vp-frontend                 pipeline:
      buildpack-frontend-build-pipeline                 applicationURL: https://staging.site.com                 eventlistener:                   template:
      buildpack-frontend-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/frontend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/builder:full                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/runner:full                   -
      name: source_subpath                     value: dist/web          # make sure
      PVCs are bound after the chart is synced         # by temporarily mount them
      into short-live job.         runPostInstallMountPvcJob: false      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.16"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true    ```    Above helm chart creates a new ArgoCD project
      for each project in values, for each component in project''s components there
      is created a separate ArgoCD   application and required for Tekton ci/cd resources
      (triggerbindings, roles, configmaps, jobs, serviceaccounts, pvcs and etc).    #
      fill below parameters for each `project` block    - apps[PROJECT].environment
      - possbility to define custom project''s environment, needed for cases when
      need to deploy `dev` and `prod` envs to the same cluster. For example `xxx`
      dev     and prod both deployed in rocks EKS (not required)   - apps[PROJECT].enabled
      - boolean value to define whether the project enabled or not (required)   -
      apps[PROJECT].argocd.labels - labels which are added to ArgoCD project (required)   -
      apps[PROJECT].argocd.namespace - allowed for ArgoCD project namespace (required)   -
      apps[PROJECT].argocd.syncWave - ArgoCD project sync wave, i.e. sequence in which
      project should be synced (not required, default: "200")   - apps[PROJECT].argocd.sourceRepos[]
      - source repositories added to ArgoCD project (not required, default: [<apps[PROJECT].kubernetesRepository.url>])   -
      apps[PROJECT].argocd.extraDestinationNamespaces[] - adds extra destination namespaces
      for ArgoCD project to be able to create custom apps within project''s kubernetes
      repo (not required, default: null)   - apps[PROJECT].mailList - project''s team
      email address (required)   - apps[PROJECT].devopsMailList - project''s devops
      team email address (required)   - apps[PROJECT].jiraURL - project''s JIRA url
      (required)   - apps[PROJECT].tektonURL - link to Tekton pipelineruns used in
      Tekton ConfigMap as `TEKTON_URL` during Slack notification send (required)   -
      apps[PROJECT].slack - project''s Slack channel name (required)   - apps[PROJECT].kubernetesRepository.name
      - project''s kubernetes repository name used in ArgoCD application and Tekton
      TriggerBinding (may be absent and replaced with     `apps[PROJECT].components[NAME].argocd`
      and `apps[PROJECT].argocd.sourceRepos[]` blocks in case if project has no kubernetes
      repo)   - apps[PROJECT].kubernetesRepository.branch - project''s kubernetes
      repository branch used in ArgoCD application and Tekton TriggerBinding (may
      be absent and replaced     with `apps[PROJECT].components[NAME].argocd` and
      `apps[PROJECT].argocd.sourceRepos[]` blocks in case if project has no kubernetes
      repo)   - apps[PROJECT].kubernetesRepository.url - project''s kubernetes repository
      url used in ArgoCD application and Tekton TriggerBinding (may be absent and
      replaced with     `apps[PROJECT].components[NAME].argocd` and `apps[PROJECT].argocd.sourceRepos[]`
      blocks in case if project has no kubernetes repo)    Basically we have 2 different
      types of ci/cd - basic (buildpacks, kaniko) and wordpress ones. So depending
      on project''s component type you will need to fill different parameters.    #
      fill below parameters for each `component` block    - apps[PROJECT].components[NAME].repository
      - the name of the repository containing the code (may be absent in case of wordpress
      application without deployment, i.e. bolrdswp, taco,     saritasa-wordpress-demo)   -
      apps[PROJECT].components[NAME].pipeline - the name of the pipeline building
      the code from the repository above   - apps[PROJECT].components[NAME].argocd.source.syncWave
      - custom component ArgoCD application sync wave (default: "210")   - apps[PROJECT].components[NAME].argocd.source.path
      - path to directory responsible for kubernetes resources creation of the ArgoCD
      Application (default: kubernetes repo path for basic     projects "apps/<apps[PROJECT].components[NAME].name>/manifests/<environment>"
      or "null" for wordpress projects)   - apps[PROJECT].components[NAME].argocd.source.repoUrl
      - url of repository which should be used for ArgoCD Application (default: kubernetes
      repo for basic projects     "<apps[PROJECT].kubernetesRepository.url>" or `https://charts.bitnami.com/bitnami`
      for wordpress projects)   - apps[PROJECT].components[NAME].argocd.source.targetRevision
      - tag or branch in the repository for ArgoCD Application (default: kubernetes
      branch for basic projects     "<apps[PROJECT].kubernetesRepository.branch>"
      or "11.0.14" for wordpress projects)   - apps[PROJECT].components[NAME].argocd.ignoreDeploymentReplicasDiff
      - flag whether this exact ArgoCD application should ignore `Replicas` count
      differences for deployments. It may be needed for `staging` and `prod` environments
      which use HPA (default: false)   - apps[PROJECT].components[NAME].applicationURL
      - url that should be used in tekton build ConfigMap `APPLICATION_URL` param   -
      apps[PROJECT].components[NAME].tektonKubernetesRepoDeployKeyName - name of existing
      in kubernetes cluster secret with SSH key to kubernetes repository, used in
      `kustomize` deployment     step (i.e. addon-backend-deploy-key). This param
      sets by default to `<project>-kubernetes-aws-deploy-key` if project has `kubernetesRepository`
      param in values (actual only for basic     components, not wordpress)   - apps[PROJECT].components[NAME].eventlistener.template
      - the name of the trigger template for the component to be used   - apps[PROJECT].components[NAME].eventlistener.enableWebhookSecret
      - should you enable the git web hook for this particular app/component in the
      eventlistener configuration   - apps[PROJECT].components[NAME].eventlistener.filter
      - custom filter for the component of the eventlistener   - apps[PROJECT].components[NAME].eventlistener.extraOverlays
      - extra overlays to be added into the eventlistener for the component   - apps[PROJECT].components[NAME].eventlistener.eventTypes
      - github event types to trigger the ci/cd   - apps[PROJECT].components[NAME].eventlistener.gitWebhookBranches[]
      - list of branches, push to which triggers ci/cd   - apps[PROJECT].components[NAME].extraBuildConfigParams
      - additional key/values to be added into `build-pipeline-config configmap` ConfigMap
      associated with the app   - apps[PROJECT].components[NAME].triggerBinding -
      values to be added into the TriggerBinding manifest except default ones    What
      is important to know is that any key defined in apps[PROJECT].components[NAME].triggerBinding
      would be added as is   into the generated triggerbinding associated with your
      app. However the chart renders some default values based on the values   in
      this values.yaml file:      - application, project, environment, docker_registry,
      kubernetes_repository_ssh_url, kubernetes_branch, kubernetes_repository_kustomize_path,
      source_subpath (for basic components)     - application, project, environment,
      namespace (for wordpress components)     # fill below parameters block only
      for `wordpress` components    - apps[PROJECT].components[NAME].wordpress.imageTag
      - tag of the wordpress image (default: "5.7.2")   - apps[PROJECT].components[NAME].wordpress.repository_ssh_url
      - project''s wordpress repository SSH url (default: null, may be absent if project
      has no wordpress repo)   - apps[PROJECT].components[NAME].wordpress.resources
      - wordpress pod resources params (default: requests.cpu: 100m, requests.memory:
      128Mi)   - apps[PROJECT].components[NAME].wordpress.commonLabels - wordpress
      pod common labels (default: commonLabels.tech_stack: php, commonLabels.application:
      wordpress)   - apps[PROJECT].components[NAME].wordpress.wordpressTablePrefix
      - wordpress DB tables prefix (default: wp_)   - apps[PROJECT].components[NAME].wordpress.existingSecret
      - name of existing in kubernetes secret with wp admin auth info (default: "<project_name>-<component_name>-<env>",     i.e.
      "taco-wordpress-dev")   - apps[PROJECT].components[NAME].wordpress.updateStrategy
      - strategy that should be used for wordpress pod update (default: updateStrategy.type:
      RollingUpdate,     updateStrategy.rollingUpdate.maxSurge: 0%, updateStrategy.rollingUpdate.maxUnavailable:
      100%, i.e. stop old pod and then create a new one)   - apps[PROJECT].components[NAME].wordpress.smtp.host
      - SMTP host for sending emails (default: mailhog.mailhog.svc.cluster.local)   -
      apps[PROJECT].components[NAME].wordpress.smtp.port - SMTP port for sending emails
      (default: 1025)   - apps[PROJECT].components[NAME].wordpress.smtp.user - SMTP
      user for sending emails (default: <project_name>, i.e. taco)   - apps[PROJECT].components[NAME].wordpress.smtp.password
      - SMTP password for sending emails (default: anypassword)   - apps[PROJECT].components[NAME].wordpress.nodeSelector
      - wordpress pod node selector params (default: nodeSelector.tech_stack: php,
      nodeSelector.pvc: "true")   - apps[PROJECT].components[NAME].wordpress.podSecurityContext
      - wordpress pod''s security context params (default: podSecurityContext.enabled:
      true, podSecurityContext.fsGroup: 1000)   - apps[PROJECT].components[NAME].wordpress.containerSecurityContext
      - wordpress pod container''s security context params (default: containerSecurityContext.enabled:
      true,     containerSecurityContext.runAsUser: 1000)   - apps[PROJECT].components[NAME].wordpress.ci
      - boolean flag which defines whether wordpress project has ci/cd or not (default:
      true)   - apps[PROJECT].components[NAME].wordpress.extraInitContainers - extra
      ci/cd init containers if needed, enabled only if wordpress component has `ci`
      flag enabled (default: null)   - apps[PROJECT].components[NAME].wordpress.extraVolumesSshKeySecret
      - name of a secret with wordpress repository SSH url (default: "<project_name>-<component_name>-deploy-key",     i.e.
      "taco-wordpress-deploy-key")   - apps[PROJECT].components[NAME].wordpress.extraVolumes
      - extra volumes that might be needed to wordpress pod (default: null)   - apps[PROJECT].components[NAME].wordpress.ingress.hostname
      - wordpress ingress hostname (default: "<project_name>.saritasa.rocks", i.e.
      "taco.saritasa.rocks")   - apps[PROJECT].components[NAME].wordpress.ingress.annotations
      - wordpress ingress annotations (default: kubernetes.io/ingress.class: "nginx",
      cert-manager.io/cluster-issuer: "letsencrypt-prod",     nginx.ingress.kubernetes.io/proxy-body-size:
      100m, nginx.ingress.kubernetes.io/proxy-connect-timeout: "300", nginx.ingress.kubernetes.io/proxy-next-upstream-timeout:
      "300",     nginx.ingress.kubernetes.io/auth-type: basic, nginx.ingress.kubernetes.io/auth-secret:
      <ingress.authSecret>, nginx.ingress.kubernetes.io/auth-realm: "Authentication
      Required",     nginx.ingress.kubernetes.io/server-snippet: |-,   add_header
      X-Robots-Tag "noindex, nofollow, nosnippet, noarchive")   - apps[PROJECT].components[NAME].wordpress.ingress.authSecret
      - name of kubernetes secret that should be used in ingress for basic auth (default:
      "<project_name>-<compinent_name>-<env>-basic-auth",     i.e. "taco-wordpress-dev-basic-auth")   -
      apps[PROJECT].components[NAME].wordpress.ingress.extraHosts - list of extra
      hosts that may be defined in ingress (default: null)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.host
      - wordpress DB host (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.user
      - wordpress DB user (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.existingSecret
      - name of existing in kubernetes secret with DB user password (required)   -
      apps[PROJECT].components[NAME].wordpress.externalDatabase.database - wordpress
      DB name (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.port
      - wordpress DB port (default: 3306)   - apps[PROJECT].components[NAME].wordpress.wordpressExtraConfigContent
      - wordpress extra configs if needed (default: null)   - apps[PROJECT].components[NAME].wordpress.extraEnvVars
      - wordpress extra env vars if needed (default: null)    Example of values with
      extra `eventlistener` and `extraBuildConfigParams` in component:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           gitBranchPrefixes:             -
      staging           storageClassName: gp2           aws:             region: "us-west-2"             dns:
      staging.site.com           defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com           argocd:             server:
      deploy.staging.site.com           eventlistener:             enableWebhookSecret:
      true           apps:             - project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: prod               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.site.com/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack                   applicationURL: https://api.site.com                   eventlistener:                     template:
      buildpack-backend-build-pipeline-trigger-template                   extraBuildConfigParams:
      # what additional K/V pairs you want to add into the build-pipeline-config configmap                     KEY:
      value                   triggerBinding:                     - name: docker_registry_repository                       value:
      XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/backend                     - name:
      buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/runner:v1                 -
      name: frontend                   repository: xxx-frontend                   pipeline:
      buildpack                   applicationURL: https://site.com                   eventlistener:                     enableWebhookSecret:
      false                     filter: (body.ref.startsWith(''refs/heads/develop'')
      || body.ref.startsWith(''refs/heads/release/''))                     template:
      buildpack-frontend-build-pipeline-trigger-template                     extraOverlays:
      []                     # - key: truncated_sha                     #   expression:
      "body.head_commit.id.truncate(7)"                     eventTypes: ["pull_request",
      "push"]                   extraBuildConfigParams: {}                   triggerBinding:                     -
      name: docker_registry_repository                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/frontend                     -
      name: buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web            # make
      sure PVCs are bound after the chart is synced           # by temporarily mount
      them into short-live job.           runPostInstallMountPvcJob: false        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true    ```    Example of
      old application from `saritasa-clients` repo, which has no separate `kubernetes`
      repository. Here we replace `apps[PROJECT].kubernetesRepository` block with   `apps[PROJECT].argocd.sourceRepos`
      and `apps[PROJECT].components[NAME].argocd` block, also it is required to set
      `apps[PROJECT].components[NAME].tektonKubernetesRepoDeployKeyName`   in such
      a case to use correct secret with deploy key as far as there is no kubernetes
      repo that is used by default.    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      git@github.com:saritasa-nest/xxx-backend.git                   - git@github.com:saritasa-nest/xxx-frontend.git               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: backend                   repository:
      xxx-backend                   pipeline: buildpack-django-build-pipeline                   applicationURL:
      https://api.xxx.site.url                   argocd:                     source:                       path:
      .kubernetes/manifests/dev                       repoUrl: git@github.com:saritasa-nest/xxx-backend.git                       targetRevision:
      develop                   eventlistener:                     template: buildpack-django-build-pipeline-trigger-template                   tektonKubernetesRepoDeployKeyName:
      xxx-backend-deploy-key                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1                 -
      name: frontend                   repository: xxx-frontend                   pipeline:
      buildpack-frontend-build-pipeline                   applicationURL: https://xxx.site.url                   argocd:                     source:                       path:
      .kubernetes/manifests/dev                       repoUrl: git@github.com:saritasa-nest/xxx-frontend.git                       targetRevision:
      develop                   eventlistener:                     template: buildpack-frontend-build-pipeline-trigger-template                   tektonKubernetesRepoDeployKeyName:
      xxx-frontend-deploy-key                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/frontend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Example with
      creating an ArgoCD project and application with its custom `environment` (case
      when in common `staging` environment we need to create for some reason project
      with   `dev` environment). Here is added an extra `apps[PROJECT].environment`
      param, which overrides default `environment` in helm values for this project,
      and   `apps[PROJECT].components[NAME].eventlistener.gitWebhookBranches` param,
      which defines that ci/cd should be trigger on push to `develop` branch.    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack-django-build-pipeline                   applicationURL: https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Also there might
      a situation that you would like to provision custom utility ArgoCD Application
      in argo-cd from project''s kubernetes repo (for example VP project provisions   like
      this `jitsi` application). To reach this you might need to add an extra destination
      namespace to ArgoCD Project, you should use   `apps[PROJECT].argocd.extraDestinationNamespaces[]`
      param for that like in below example.    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev                 extraDestinationNamespaces:                   -
      argo-cd               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack-django-build-pipeline                   applicationURL: https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    If you want
      to enable ignoring deployment replicas count differences in ArgoCD application
      of your component add `apps[PROJECT].components[NAME].argocd.ignoreDeploymentReplicasDiff:
      true` flag like in the below example (it may be needed for `staging` and `prod`
      envs, where you have horizontal pod autoscheduling - HPA):    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev                 extraDestinationNamespaces:                   -
      argo-cd               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   argocd:                     ignoreDeploymentReplicasDiff:
      true                   pipeline: buildpack-django-build-pipeline                   applicationURL:
      https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Simple wordpress
      application example filled by default:    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: wordpress                   repository:
      xxx-wordpress                   pipeline: wordpress-build-pipeline                   applicationURL:
      https://xxx.site.url                   wordpress:                     repository_ssh_url:
      git@github.com:saritasa-nest/xxx-wordpress.git                     externalDatabase:                       host:
      xxx.xxx.us-west-2.rds.amazonaws.com                       user: xxx-wordpress-user-dev                       existingSecret:
      xxx-wordpress-dev-externaldb                       database: xxx-wordpress-dev                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Simple wordpress
      application example filled by default, but without ci/cd:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: wordpress                   repository:
      xxx-wordpress                   pipeline: wordpress-build-pipeline                   applicationURL:
      https://xxx.site.url                   wordpress:                     ci: false                     externalDatabase:                       host:
      xxx.xxx.us-west-2.rds.amazonaws.com                       user: xxx-wordpress-user-dev                       existingSecret:
      xxx-wordpress-dev-externaldb                       database: xxx-wordpress-dev                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    More difficult
      example of project containing `wordpress` and `frontend` component. Also defined
      for example all extra wordpress params that could be set:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami                   - git@github.com:saritasa-nest/xxx-kubernetes-aws.git               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: wordpress                   repository: xxx-wordpress                   pipeline:
      wordpress-build-pipeline                   applicationURL: https://xxx.site.url                   wordpress:                     imageTag:
      "5.8.1"                     repository_ssh_url: "git@github.com:saritasa-nest/xxx-wordpress.git"                     resources:                       requests:                         memory:
      512Mi                         cpu: 100m                     commonLabels:                       tech_stack:
      php                       application: wordpress                     wordpressTablePrefix:
      "qbf_"                     existingSecret: xxx-wordpress                     updateStrategy:                       type:
      RollingUpdate                       rollingUpdate:                         maxSurge:
      25%                         maxUnavailable: 25%                     smtp:                       host:
      mysmtp.site.url                       port: 1010                       user:
      myuser                       password: mypassword                     nodeSelector:                       tech_stack:
      php                       pvc: "true"                     podSecurityContext:                       enabled:
      true                       fsGroup: 1001                     containerSecurityContext:                       enabled:
      true                       runAsUser: 1001                     ci: true                     extraInitContainers:                       -
      name: build-frontend                         image: node:14                         imagePullPolicy:
      Always                         command:                           - bash                           -
      -c                           - |                             git -c core.sshCommand="ssh
      -i ~/.ssh/id_rsa" clone git@github.com:saritasa-nest/xxx.git -b develop ~/xxx                             cd
      ~/xxx                             npm install                             npm
      run build:embedded-questionnaire                             cp -Rf $(pwd)/dist/*
      /bitnami/wordpress/wp-content/                             echo "Copied built
      files into /bitnami/wordpress/wp-content/"                             ls -la
      /bitnami/wordpress/wp-content/                             echo "Done BUILD
      FRONTEND"                         volumeMounts:                         - mountPath:
      /bitnami/wordpress                           name: wordpress-data                           subPath:
      wordpress                         - mountPath: /home/node/.ssh/id_rsa                           name:
      xxx-ssh-key                           subPath: ssh-privatekey                         -
      mountPath: /home/node/.ssh/known_hosts                           name: github-known-hosts                           subPath:
      config.ssh                         securityContext:                           runAsNonRoot:
      true                           runAsUser: 1000                           allowPrivilegeEscalation:
      false                     extraVolumesSshKeySecret: xxx-wordpress-deploy-key                     extraVolumes:                     -
      name: xxx-ssh-key                       secret:                         secretName:
      xxx-deploy-key                     ingress:                       hostname:
      test.xxx.site.url                       annotations:                         kubernetes.io/ingress.class:
      "nginx"                         cert-manager.io/cluster-issuer: "letsencrypt-prod"                         nginx.ingress.kubernetes.io/proxy-body-size:
      100m                         nginx.ingress.kubernetes.io/client-max-body-size:
      100m                         nginx.ingress.kubernetes.io/server-snippet: |-                           add_header
      X-Robots-Tag "noindex, nofollow, nosnippet, noarchive";                         nginx.ingress.kubernetes.io/whitelist-source-range:
      |                           35.85.92.224/32,                           100.21.244.185/32                       extraHosts:                         -
      name: test.xxx.site.url                           path: /wp-admin                     externalDatabase:                       host:
      "xxx.xxx.us-west-2.rds.amazonaws.com"                       user: "xxx-wp-user-dev"                       existingSecret:
      "xxx-wordpress-dev-externaldb"                       database: "xxx-wp-dev"                     wordpressExtraConfigContent:
      |                       @ini_set(''WP_MEMORY_LIMIT'', ''512M'');                       @ini_set(''ALLOW_UNFILTERED_UPLOADS'',
      true);                     extraEnvVars:                       KEY: VALUE                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template                  - name: frontend                   repository:
      xxx-frontend                   pipeline: buildpack-frontend-build-pipeline                   applicationURL:
      https://app.xxx.site.url                   eventlistener:                     template:
      buildpack-frontend-build-pipeline-trigger-template                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/frontend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ``` '
    digest: 234e3ad7e744c87979a167b5a63ff0feb11f78d21792bdd3b844fade71f29efb
    maintainers:
    - email: nospam@saritasa.com
      name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-apps
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-apps-0.1.21/saritasa-tekton-apps-0.1.21.tgz
    version: 0.1.21
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2022-06-16T22:21:00.794827691Z"
    description: 'A Helm chart for tekton apps (rbac, eventlistener)  Implements:
      - dynamic records for eventlistener - PVCs - RBAC - configmaps for each app
      - triggerbindings for each app - kubernetes job to make sure the PVCs are bound
      and argocd marks the app as healthy - argocd project for each app - argocd application
      for each app component  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then declare dynamic list of projects (and associated components of that
      project like backend, api, frontend, etc) that would be dynamically added into
      the tekton''s eventlistener manifest.  Each component should be a separate git
      repository.  ```yaml --- apiVersion: argoproj.io/v1alpha1 kind: Application
      metadata:   name: tekton-apps   namespace: argo-cd   finalizers:   - resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "41" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-apps     helm:       values: |         environment: staging         gitBranchPrefixes:           -
      staging         storageClassName: gp3         nodeSelector:           ops: ''true''         aws:           region:
      "us-west-2"           dns: staging.site.com         defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com         argocd:           server:
      deploy.staging.site.com         eventlistener:           enableWebhookSecret:
      true         apps:           - project: vp             enabled: true             argocd:               labels:                 created-by:
      xxx                 ops-main: xxx                 ops-secondary: xxx                 pm:
      xxx                 tm: xxx               namespace: prod             mailList:
      vp@site.com             devopsMailList: devops+vp@site.com             jiraURL:
      https://site.atlassian.net/browse/vp             tektonURL: https://tekton.staging.site.com/#/namespaces/ci/pipelineruns             slack:
      client-vp-ci             kubernetesRepository:               name: vp-kubernetes-aws               branch:
      main               url: git@github.com:org-name/vp-kubernetes-aws.git              components:               -
      name: backend                 repository: vp-backend                 pipeline:
      buildpack-django-build-pipeline                 applicationURL: https://api.staging.site.com                 eventlistener:                   template:
      buildpack-django-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/backend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/builder:v1                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/runner:v1               -
      name: frontend                 repository: vp-frontend                 pipeline:
      buildpack-frontend-build-pipeline                 applicationURL: https://staging.site.com                 eventlistener:                   template:
      buildpack-frontend-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/frontend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/builder:full                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/runner:full                   -
      name: source_subpath                     value: dist/web          # make sure
      PVCs are bound after the chart is synced         # by temporarily mount them
      into short-live job.         runPostInstallMountPvcJob: false      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.16"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true    ```    Above helm chart creates a new ArgoCD project
      for each project in values, for each component in project''s components there
      is created a separate ArgoCD   application and required for Tekton ci/cd resources
      (triggerbindings, roles, configmaps, jobs, serviceaccounts, pvcs and etc).    #
      fill below parameters for each `project` block    - apps[PROJECT].environment
      - possbility to define custom project''s environment, needed for cases when
      need to deploy `dev` and `prod` envs to the same cluster. For example `xxx`
      dev     and prod both deployed in rocks EKS (not required)   - apps[PROJECT].enabled
      - boolean value to define whether the project enabled or not (required)   -
      apps[PROJECT].argocd.labels - labels which are added to ArgoCD project (required)   -
      apps[PROJECT].argocd.namespace - allowed for ArgoCD project namespace (required)   -
      apps[PROJECT].argocd.syncWave - ArgoCD project sync wave, i.e. sequence in which
      project should be synced (not required, default: "200")   - apps[PROJECT].argocd.sourceRepos[]
      - source repositories added to ArgoCD project (not required, default: [<apps[PROJECT].kubernetesRepository.url>])   -
      apps[PROJECT].argocd.extraDestinationNamespaces[] - adds extra destination namespaces
      for ArgoCD project to be able to create custom apps within project''s kubernetes
      repo (not required, default: null)   - apps[PROJECT].mailList - project''s team
      email address (required)   - apps[PROJECT].devopsMailList - project''s devops
      team email address (required)   - apps[PROJECT].jiraURL - project''s JIRA url
      (required)   - apps[PROJECT].tektonURL - link to Tekton pipelineruns used in
      Tekton ConfigMap as `TEKTON_URL` during Slack notification send (required)   -
      apps[PROJECT].slack - project''s Slack channel name (required)   - apps[PROJECT].kubernetesRepository.name
      - project''s kubernetes repository name used in ArgoCD application and Tekton
      TriggerBinding (may be absent and replaced with     `apps[PROJECT].components[NAME].argocd`
      and `apps[PROJECT].argocd.sourceRepos[]` blocks in case if project has no kubernetes
      repo)   - apps[PROJECT].kubernetesRepository.branch - project''s kubernetes
      repository branch used in ArgoCD application and Tekton TriggerBinding (may
      be absent and replaced     with `apps[PROJECT].components[NAME].argocd` and
      `apps[PROJECT].argocd.sourceRepos[]` blocks in case if project has no kubernetes
      repo)   - apps[PROJECT].kubernetesRepository.url - project''s kubernetes repository
      url used in ArgoCD application and Tekton TriggerBinding (may be absent and
      replaced with     `apps[PROJECT].components[NAME].argocd` and `apps[PROJECT].argocd.sourceRepos[]`
      blocks in case if project has no kubernetes repo)    Basically we have 2 different
      types of ci/cd - basic (buildpacks, kaniko) and wordpress ones. So depending
      on project''s component type you will need to fill different parameters.    #
      fill below parameters for each `component` block    - apps[PROJECT].components[NAME].repository
      - the name of the repository containing the code (may be absent in case of wordpress
      application without deployment, i.e. bolrdswp, taco,     saritasa-wordpress-demo)   -
      apps[PROJECT].components[NAME].pipeline - the name of the pipeline building
      the code from the repository above   - apps[PROJECT].components[NAME].argocd.source.syncWave
      - custom component ArgoCD application sync wave (default: "210")   - apps[PROJECT].components[NAME].argocd.source.path
      - path to directory responsible for kubernetes resources creation of the ArgoCD
      Application (default: kubernetes repo path for basic     projects "apps/<apps[PROJECT].components[NAME].name>/manifests/<environment>"
      or "null" for wordpress projects)   - apps[PROJECT].components[NAME].argocd.source.repoUrl
      - url of repository which should be used for ArgoCD Application (default: kubernetes
      repo for basic projects     "<apps[PROJECT].kubernetesRepository.url>" or `https://charts.bitnami.com/bitnami`
      for wordpress projects)   - apps[PROJECT].components[NAME].argocd.source.targetRevision
      - tag or branch in the repository for ArgoCD Application (default: kubernetes
      branch for basic projects     "<apps[PROJECT].kubernetesRepository.branch>"
      or "11.0.14" for wordpress projects)   - apps[PROJECT].components[NAME].argocd.ignoreDeploymentReplicasDiff
      - flag whether this exact ArgoCD application should ignore `Replicas` count
      differences for deployments. It may be needed for `staging` and `prod` environments
      which use HPA (default: false)   - apps[PROJECT].components[NAME].applicationURL
      - url that should be used in tekton build ConfigMap `APPLICATION_URL` param   -
      apps[PROJECT].components[NAME].tektonKubernetesRepoDeployKeyName - name of existing
      in kubernetes cluster secret with SSH key to kubernetes repository, used in
      `kustomize` deployment     step (i.e. addon-backend-deploy-key). This param
      sets by default to `<project>-kubernetes-aws-deploy-key` if project has `kubernetesRepository`
      param in values (actual only for basic     components, not wordpress)   - apps[PROJECT].components[NAME].eventlistener.template
      - the name of the trigger template for the component to be used   - apps[PROJECT].components[NAME].eventlistener.enableWebhookSecret
      - should you enable the git web hook for this particular app/component in the
      eventlistener configuration   - apps[PROJECT].components[NAME].eventlistener.filter
      - custom filter for the component of the eventlistener   - apps[PROJECT].components[NAME].eventlistener.extraOverlays
      - extra overlays to be added into the eventlistener for the component   - apps[PROJECT].components[NAME].eventlistener.eventTypes
      - github event types to trigger the ci/cd   - apps[PROJECT].components[NAME].eventlistener.gitWebhookBranches[]
      - list of branches, push to which triggers ci/cd   - apps[PROJECT].components[NAME].extraBuildConfigParams
      - additional key/values to be added into `build-pipeline-config configmap` ConfigMap
      associated with the app   - apps[PROJECT].components[NAME].triggerBinding -
      values to be added into the TriggerBinding manifest except default ones    What
      is important to know is that any key defined in apps[PROJECT].components[NAME].triggerBinding
      would be added as is   into the generated triggerbinding associated with your
      app. However the chart renders some default values based on the values   in
      this values.yaml file:      - application, project, environment, docker_registry,
      kubernetes_repository_ssh_url, kubernetes_branch, kubernetes_repository_kustomize_path,
      source_subpath (for basic components)     - application, project, environment,
      namespace (for wordpress components)     # fill below parameters block only
      for `wordpress` components    - apps[PROJECT].components[NAME].wordpress.imageTag
      - tag of the wordpress image (default: "5.7.2")   - apps[PROJECT].components[NAME].wordpress.repository_ssh_url
      - project''s wordpress repository SSH url (default: null, may be absent if project
      has no wordpress repo)   - apps[PROJECT].components[NAME].wordpress.resources
      - wordpress pod resources params (default: requests.cpu: 100m, requests.memory:
      128Mi)   - apps[PROJECT].components[NAME].wordpress.commonLabels - wordpress
      pod common labels (default: commonLabels.tech_stack: php, commonLabels.application:
      wordpress)   - apps[PROJECT].components[NAME].wordpress.wordpressTablePrefix
      - wordpress DB tables prefix (default: wp_)   - apps[PROJECT].components[NAME].wordpress.existingSecret
      - name of existing in kubernetes secret with wp admin auth info (default: "<project_name>-<component_name>-<env>",     i.e.
      "taco-wordpress-dev")   - apps[PROJECT].components[NAME].wordpress.updateStrategy
      - strategy that should be used for wordpress pod update (default: updateStrategy.type:
      RollingUpdate,     updateStrategy.rollingUpdate.maxSurge: 0%, updateStrategy.rollingUpdate.maxUnavailable:
      100%, i.e. stop old pod and then create a new one)   - apps[PROJECT].components[NAME].wordpress.smtp.host
      - SMTP host for sending emails (default: mailhog.mailhog.svc.cluster.local)   -
      apps[PROJECT].components[NAME].wordpress.smtp.port - SMTP port for sending emails
      (default: 1025)   - apps[PROJECT].components[NAME].wordpress.smtp.user - SMTP
      user for sending emails (default: <project_name>, i.e. taco)   - apps[PROJECT].components[NAME].wordpress.smtp.password
      - SMTP password for sending emails (default: anypassword)   - apps[PROJECT].components[NAME].wordpress.nodeSelector
      - wordpress pod node selector params (default: nodeSelector.tech_stack: php,
      nodeSelector.pvc: "true")   - apps[PROJECT].components[NAME].wordpress.podSecurityContext
      - wordpress pod''s security context params (default: podSecurityContext.enabled:
      true, podSecurityContext.fsGroup: 1000)   - apps[PROJECT].components[NAME].wordpress.containerSecurityContext
      - wordpress pod container''s security context params (default: containerSecurityContext.enabled:
      true,     containerSecurityContext.runAsUser: 1000)   - apps[PROJECT].components[NAME].wordpress.ci
      - boolean flag which defines whether wordpress project has ci/cd or not (default:
      true)   - apps[PROJECT].components[NAME].wordpress.extraInitContainers - extra
      ci/cd init containers if needed, enabled only if wordpress component has `ci`
      flag enabled (default: null)   - apps[PROJECT].components[NAME].wordpress.extraVolumesSshKeySecret
      - name of a secret with wordpress repository SSH url (default: "<project_name>-<component_name>-deploy-key",     i.e.
      "taco-wordpress-deploy-key")   - apps[PROJECT].components[NAME].wordpress.extraVolumes
      - extra volumes that might be needed to wordpress pod (default: null)   - apps[PROJECT].components[NAME].wordpress.ingress.hostname
      - wordpress ingress hostname (default: "<project_name>.saritasa.rocks", i.e.
      "taco.saritasa.rocks")   - apps[PROJECT].components[NAME].wordpress.ingress.annotations
      - wordpress ingress annotations (default: kubernetes.io/ingress.class: "nginx",
      cert-manager.io/cluster-issuer: "letsencrypt-prod",     nginx.ingress.kubernetes.io/proxy-body-size:
      100m, nginx.ingress.kubernetes.io/proxy-connect-timeout: "300", nginx.ingress.kubernetes.io/proxy-next-upstream-timeout:
      "300",     nginx.ingress.kubernetes.io/auth-type: basic, nginx.ingress.kubernetes.io/auth-secret:
      <ingress.authSecret>, nginx.ingress.kubernetes.io/auth-realm: "Authentication
      Required",     nginx.ingress.kubernetes.io/server-snippet: |-,   add_header
      X-Robots-Tag "noindex, nofollow, nosnippet, noarchive")   - apps[PROJECT].components[NAME].wordpress.ingress.authSecret
      - name of kubernetes secret that should be used in ingress for basic auth (default:
      "<project_name>-<compinent_name>-<env>-basic-auth",     i.e. "taco-wordpress-dev-basic-auth")   -
      apps[PROJECT].components[NAME].wordpress.ingress.extraHosts - list of extra
      hosts that may be defined in ingress (default: null)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.host
      - wordpress DB host (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.user
      - wordpress DB user (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.existingSecret
      - name of existing in kubernetes secret with DB user password (required)   -
      apps[PROJECT].components[NAME].wordpress.externalDatabase.database - wordpress
      DB name (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.port
      - wordpress DB port (default: 3306)   - apps[PROJECT].components[NAME].wordpress.wordpressExtraConfigContent
      - wordpress extra configs if needed (default: null)   - apps[PROJECT].components[NAME].wordpress.extraEnvVars
      - wordpress extra env vars if needed (default: null)    Example of values with
      extra `eventlistener` and `extraBuildConfigParams` in component:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           gitBranchPrefixes:             -
      staging           storageClassName: gp2           aws:             region: "us-west-2"             dns:
      staging.site.com           defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com           argocd:             server:
      deploy.staging.site.com           eventlistener:             enableWebhookSecret:
      true           apps:             - project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: prod               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.site.com/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack                   applicationURL: https://api.site.com                   eventlistener:                     template:
      buildpack-backend-build-pipeline-trigger-template                   extraBuildConfigParams:
      # what additional K/V pairs you want to add into the build-pipeline-config configmap                     KEY:
      value                   triggerBinding:                     - name: docker_registry_repository                       value:
      XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/backend                     - name:
      buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/runner:v1                 -
      name: frontend                   repository: xxx-frontend                   pipeline:
      buildpack                   applicationURL: https://site.com                   eventlistener:                     enableWebhookSecret:
      false                     filter: (body.ref.startsWith(''refs/heads/develop'')
      || body.ref.startsWith(''refs/heads/release/''))                     template:
      buildpack-frontend-build-pipeline-trigger-template                     extraOverlays:
      []                     # - key: truncated_sha                     #   expression:
      "body.head_commit.id.truncate(7)"                     eventTypes: ["pull_request",
      "push"]                   extraBuildConfigParams: {}                   triggerBinding:                     -
      name: docker_registry_repository                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/frontend                     -
      name: buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web            # make
      sure PVCs are bound after the chart is synced           # by temporarily mount
      them into short-live job.           runPostInstallMountPvcJob: false        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true    ```    Example of
      old application from `saritasa-clients` repo, which has no separate `kubernetes`
      repository. Here we replace `apps[PROJECT].kubernetesRepository` block with   `apps[PROJECT].argocd.sourceRepos`
      and `apps[PROJECT].components[NAME].argocd` block, also it is required to set
      `apps[PROJECT].components[NAME].tektonKubernetesRepoDeployKeyName`   in such
      a case to use correct secret with deploy key as far as there is no kubernetes
      repo that is used by default.    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      git@github.com:saritasa-nest/xxx-backend.git                   - git@github.com:saritasa-nest/xxx-frontend.git               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: backend                   repository:
      xxx-backend                   pipeline: buildpack-django-build-pipeline                   applicationURL:
      https://api.xxx.site.url                   argocd:                     source:                       path:
      .kubernetes/manifests/dev                       repoUrl: git@github.com:saritasa-nest/xxx-backend.git                       targetRevision:
      develop                   eventlistener:                     template: buildpack-django-build-pipeline-trigger-template                   tektonKubernetesRepoDeployKeyName:
      xxx-backend-deploy-key                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1                 -
      name: frontend                   repository: xxx-frontend                   pipeline:
      buildpack-frontend-build-pipeline                   applicationURL: https://xxx.site.url                   argocd:                     source:                       path:
      .kubernetes/manifests/dev                       repoUrl: git@github.com:saritasa-nest/xxx-frontend.git                       targetRevision:
      develop                   eventlistener:                     template: buildpack-frontend-build-pipeline-trigger-template                   tektonKubernetesRepoDeployKeyName:
      xxx-frontend-deploy-key                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/frontend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Example with
      creating an ArgoCD project and application with its custom `environment` (case
      when in common `staging` environment we need to create for some reason project
      with   `dev` environment). Here is added an extra `apps[PROJECT].environment`
      param, which overrides default `environment` in helm values for this project,
      and   `apps[PROJECT].components[NAME].eventlistener.gitWebhookBranches` param,
      which defines that ci/cd should be trigger on push to `develop` branch.    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack-django-build-pipeline                   applicationURL: https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Also there might
      a situation that you would like to provision custom utility ArgoCD Application
      in argo-cd from project''s kubernetes repo (for example VP project provisions   like
      this `jitsi` application). To reach this you might need to add an extra destination
      namespace to ArgoCD Project, you should use   `apps[PROJECT].argocd.extraDestinationNamespaces[]`
      param for that like in below example.    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev                 extraDestinationNamespaces:                   -
      argo-cd               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack-django-build-pipeline                   applicationURL: https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    If you want
      to enable ignoring deployment replicas count differences in ArgoCD application
      of your component add `apps[PROJECT].components[NAME].argocd.ignoreDeploymentReplicasDiff:
      true` flag like in the below example (it may be needed for `staging` and `prod`
      envs, where you have horizontal pod autoscheduling - HPA):    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev                 extraDestinationNamespaces:                   -
      argo-cd               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   argocd:                     ignoreDeploymentReplicasDiff:
      true                   pipeline: buildpack-django-build-pipeline                   applicationURL:
      https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Simple wordpress
      application example filled by default:    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: wordpress                   repository:
      xxx-wordpress                   pipeline: wordpress-build-pipeline                   applicationURL:
      https://xxx.site.url                   wordpress:                     repository_ssh_url:
      git@github.com:saritasa-nest/xxx-wordpress.git                     externalDatabase:                       host:
      xxx.xxx.us-west-2.rds.amazonaws.com                       user: xxx-wordpress-user-dev                       existingSecret:
      xxx-wordpress-dev-externaldb                       database: xxx-wordpress-dev                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Simple wordpress
      application example filled by default, but without ci/cd:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: wordpress                   repository:
      xxx-wordpress                   pipeline: wordpress-build-pipeline                   applicationURL:
      https://xxx.site.url                   wordpress:                     ci: false                     externalDatabase:                       host:
      xxx.xxx.us-west-2.rds.amazonaws.com                       user: xxx-wordpress-user-dev                       existingSecret:
      xxx-wordpress-dev-externaldb                       database: xxx-wordpress-dev                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    More difficult
      example of project containing `wordpress` and `frontend` component. Also defined
      for example all extra wordpress params that could be set:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami                   - git@github.com:saritasa-nest/xxx-kubernetes-aws.git               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: wordpress                   repository: xxx-wordpress                   pipeline:
      wordpress-build-pipeline                   applicationURL: https://xxx.site.url                   wordpress:                     imageTag:
      "5.8.1"                     repository_ssh_url: "git@github.com:saritasa-nest/xxx-wordpress.git"                     resources:                       requests:                         memory:
      512Mi                         cpu: 100m                     commonLabels:                       tech_stack:
      php                       application: wordpress                     wordpressTablePrefix:
      "qbf_"                     existingSecret: xxx-wordpress                     updateStrategy:                       type:
      RollingUpdate                       rollingUpdate:                         maxSurge:
      25%                         maxUnavailable: 25%                     smtp:                       host:
      mysmtp.site.url                       port: 1010                       user:
      myuser                       password: mypassword                     nodeSelector:                       tech_stack:
      php                       pvc: "true"                     podSecurityContext:                       enabled:
      true                       fsGroup: 1001                     containerSecurityContext:                       enabled:
      true                       runAsUser: 1001                     ci: true                     extraInitContainers:                       -
      name: build-frontend                         image: node:14                         imagePullPolicy:
      Always                         command:                           - bash                           -
      -c                           - |                             git -c core.sshCommand="ssh
      -i ~/.ssh/id_rsa" clone git@github.com:saritasa-nest/xxx.git -b develop ~/xxx                             cd
      ~/xxx                             npm install                             npm
      run build:embedded-questionnaire                             cp -Rf $(pwd)/dist/*
      /bitnami/wordpress/wp-content/                             echo "Copied built
      files into /bitnami/wordpress/wp-content/"                             ls -la
      /bitnami/wordpress/wp-content/                             echo "Done BUILD
      FRONTEND"                         volumeMounts:                         - mountPath:
      /bitnami/wordpress                           name: wordpress-data                           subPath:
      wordpress                         - mountPath: /home/node/.ssh/id_rsa                           name:
      xxx-ssh-key                           subPath: ssh-privatekey                         -
      mountPath: /home/node/.ssh/known_hosts                           name: github-known-hosts                           subPath:
      config.ssh                         securityContext:                           runAsNonRoot:
      true                           runAsUser: 1000                           allowPrivilegeEscalation:
      false                     extraVolumesSshKeySecret: xxx-wordpress-deploy-key                     extraVolumes:                     -
      name: xxx-ssh-key                       secret:                         secretName:
      xxx-deploy-key                     ingress:                       hostname:
      test.xxx.site.url                       annotations:                         kubernetes.io/ingress.class:
      "nginx"                         cert-manager.io/cluster-issuer: "letsencrypt-prod"                         nginx.ingress.kubernetes.io/proxy-body-size:
      100m                         nginx.ingress.kubernetes.io/client-max-body-size:
      100m                         nginx.ingress.kubernetes.io/server-snippet: |-                           add_header
      X-Robots-Tag "noindex, nofollow, nosnippet, noarchive";                         nginx.ingress.kubernetes.io/whitelist-source-range:
      |                           35.85.92.224/32,                           100.21.244.185/32                       extraHosts:                         -
      name: test.xxx.site.url                           path: /wp-admin                     externalDatabase:                       host:
      "xxx.xxx.us-west-2.rds.amazonaws.com"                       user: "xxx-wp-user-dev"                       existingSecret:
      "xxx-wordpress-dev-externaldb"                       database: "xxx-wp-dev"                     wordpressExtraConfigContent:
      |                       @ini_set(''WP_MEMORY_LIMIT'', ''512M'');                       @ini_set(''ALLOW_UNFILTERED_UPLOADS'',
      true);                     extraEnvVars:                       KEY: VALUE                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template                  - name: frontend                   repository:
      xxx-frontend                   pipeline: buildpack-frontend-build-pipeline                   applicationURL:
      https://app.xxx.site.url                   eventlistener:                     template:
      buildpack-frontend-build-pipeline-trigger-template                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/frontend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ``` '
    digest: 1f559e960186a3dd046b0bde44410f94f687adb10b80a811e6a8720f4be0a418
    maintainers:
    - email: nospam@saritasa.com
      name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-apps
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-apps-0.1.20/saritasa-tekton-apps-0.1.20.tgz
    version: 0.1.20
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2022-06-02T16:49:50.475418688Z"
    description: 'A Helm chart for tekton apps (rbac, eventlistener)  Implements:
      - dynamic records for eventlistener - PVCs - RBAC - configmaps for each app
      - triggerbindings for each app - kubernetes job to make sure the PVCs are bound
      and argocd marks the app as healthy - argocd project for each app - argocd application
      for each app component  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then declare dynamic list of projects (and associated components of that
      project like backend, api, frontend, etc) that would be dynamically added into
      the tekton''s eventlistener manifest.  Each component should be a separate git
      repository.  ```yaml --- apiVersion: argoproj.io/v1alpha1 kind: Application
      metadata:   name: tekton-apps   namespace: argo-cd   finalizers:   - resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "41" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-apps     helm:       values: |         environment: staging         gitBranchPrefixes:           -
      staging         storageClassName: gp2         aws:           region: "us-west-2"           dns:
      staging.site.com         defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com         argocd:           server:
      deploy.staging.site.com         eventlistener:           enableWebhookSecret:
      true         apps:           - project: vp             enabled: true             argocd:               labels:                 created-by:
      xxx                 ops-main: xxx                 ops-secondary: xxx                 pm:
      xxx                 tm: xxx               namespace: prod             mailList:
      vp@site.com             devopsMailList: devops+vp@site.com             jiraURL:
      https://site.atlassian.net/browse/vp             tektonURL: https://tekton.staging.site.com/#/namespaces/ci/pipelineruns             slack:
      client-vp-ci             kubernetesRepository:               name: vp-kubernetes-aws               branch:
      main               url: git@github.com:org-name/vp-kubernetes-aws.git              components:               -
      name: backend                 repository: vp-backend                 pipeline:
      buildpack-django-build-pipeline                 applicationURL: https://api.staging.site.com                 eventlistener:                   template:
      buildpack-django-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/backend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/builder:v1                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/runner:v1               -
      name: frontend                 repository: vp-frontend                 pipeline:
      buildpack-frontend-build-pipeline                 applicationURL: https://staging.site.com                 eventlistener:                   template:
      buildpack-frontend-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/frontend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/builder:full                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/runner:full                   -
      name: source_subpath                     value: dist/web          # make sure
      PVCs are bound after the chart is synced         # by temporarily mount them
      into short-live job.         runPostInstallMountPvcJob: false      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.16"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true    ```    Above helm chart creates a new ArgoCD project
      for each project in values, for each component in project''s components there
      is created a separate ArgoCD   application and required for Tekton ci/cd resources
      (triggerbindings, roles, configmaps, jobs, serviceaccounts, pvcs and etc).    #
      fill below parameters for each `project` block    - apps[PROJECT].environment
      - possbility to define custom project''s environment, needed for cases when
      need to deploy `dev` and `prod` envs to the same cluster. For example `xxx`
      dev     and prod both deployed in rocks EKS (not required)   - apps[PROJECT].enabled
      - boolean value to define whether the project enabled or not (required)   -
      apps[PROJECT].argocd.labels - labels which are added to ArgoCD project (required)   -
      apps[PROJECT].argocd.namespace - allowed for ArgoCD project namespace (required)   -
      apps[PROJECT].argocd.syncWave - ArgoCD project sync wave, i.e. sequence in which
      project should be synced (not required, default: "200")   - apps[PROJECT].argocd.sourceRepos[]
      - source repositories added to ArgoCD project (not required, default: [<apps[PROJECT].kubernetesRepository.url>])   -
      apps[PROJECT].argocd.extraDestinationNamespaces[] - adds extra destination namespaces
      for ArgoCD project to be able to create custom apps within project''s kubernetes
      repo (not required, default: null)   - apps[PROJECT].mailList - project''s team
      email address (required)   - apps[PROJECT].devopsMailList - project''s devops
      team email address (required)   - apps[PROJECT].jiraURL - project''s JIRA url
      (required)   - apps[PROJECT].tektonURL - link to Tekton pipelineruns used in
      Tekton ConfigMap as `TEKTON_URL` during Slack notification send (required)   -
      apps[PROJECT].slack - project''s Slack channel name (required)   - apps[PROJECT].kubernetesRepository.name
      - project''s kubernetes repository name used in ArgoCD application and Tekton
      TriggerBinding (may be absent and replaced with     `apps[PROJECT].components[NAME].argocd`
      and `apps[PROJECT].argocd.sourceRepos[]` blocks in case if project has no kubernetes
      repo)   - apps[PROJECT].kubernetesRepository.branch - project''s kubernetes
      repository branch used in ArgoCD application and Tekton TriggerBinding (may
      be absent and replaced     with `apps[PROJECT].components[NAME].argocd` and
      `apps[PROJECT].argocd.sourceRepos[]` blocks in case if project has no kubernetes
      repo)   - apps[PROJECT].kubernetesRepository.url - project''s kubernetes repository
      url used in ArgoCD application and Tekton TriggerBinding (may be absent and
      replaced with     `apps[PROJECT].components[NAME].argocd` and `apps[PROJECT].argocd.sourceRepos[]`
      blocks in case if project has no kubernetes repo)    Basically we have 2 different
      types of ci/cd - basic (buildpacks, kaniko) and wordpress ones. So depending
      on project''s component type you will need to fill different parameters.    #
      fill below parameters for each `component` block    - apps[PROJECT].components[NAME].repository
      - the name of the repository containing the code (may be absent in case of wordpress
      application without deployment, i.e. bolrdswp, taco,     saritasa-wordpress-demo)   -
      apps[PROJECT].components[NAME].pipeline - the name of the pipeline building
      the code from the repository above   - apps[PROJECT].components[NAME].argocd.source.syncWave
      - custom component ArgoCD application sync wave (default: "210")   - apps[PROJECT].components[NAME].argocd.source.path
      - path to directory responsible for kubernetes resources creation of the ArgoCD
      Application (default: kubernetes repo path for basic     projects "apps/<apps[PROJECT].components[NAME].name>/manifests/<environment>"
      or "null" for wordpress projects)   - apps[PROJECT].components[NAME].argocd.source.repoUrl
      - url of repository which should be used for ArgoCD Application (default: kubernetes
      repo for basic projects     "<apps[PROJECT].kubernetesRepository.url>" or `https://charts.bitnami.com/bitnami`
      for wordpress projects)   - apps[PROJECT].components[NAME].argocd.source.targetRevision
      - tag or branch in the repository for ArgoCD Application (default: kubernetes
      branch for basic projects     "<apps[PROJECT].kubernetesRepository.branch>"
      or "11.0.14" for wordpress projects)   - apps[PROJECT].components[NAME].applicationURL
      - url that should be used in tekton build ConfigMap `APPLICATION_URL` param   -
      apps[PROJECT].components[NAME].tektonKubernetesRepoDeployKeyName - name of existing
      in kubernetes cluster secret with SSH key to kubernetes repository, used in
      `kustomize` deployment     step (i.e. addon-backend-deploy-key). This param
      sets by default to `<project>-kubernetes-aws-deploy-key` if project has `kubernetesRepository`
      param in values (actual only for basic     components, not wordpress)   - apps[PROJECT].components[NAME].eventlistener.template
      - the name of the trigger template for the component to be used   - apps[PROJECT].components[NAME].eventlistener.enableWebhookSecret
      - should you enable the git web hook for this particular app/component in the
      eventlistener configuration   - apps[PROJECT].components[NAME].eventlistener.filter
      - custom filter for the component of the eventlistener   - apps[PROJECT].components[NAME].eventlistener.extraOverlays
      - extra overlays to be added into the eventlistener for the component   - apps[PROJECT].components[NAME].eventlistener.eventTypes
      - github event types to trigger the ci/cd   - apps[PROJECT].components[NAME].eventlistener.gitWebhookBranches[]
      - list of branches, push to which triggers ci/cd   - apps[PROJECT].components[NAME].extraBuildConfigParams
      - additional key/values to be added into `build-pipeline-config configmap` ConfigMap
      associated with the app   - apps[PROJECT].components[NAME].triggerBinding -
      values to be added into the TriggerBinding manifest except default ones    What
      is important to know is that any key defined in apps[PROJECT].components[NAME].triggerBinding
      would be added as is   into the generated triggerbinding associated with your
      app. However the chart renders some default values based on the values   in
      this values.yaml file:      - application, project, environment, docker_registry,
      kubernetes_repository_ssh_url, kubernetes_branch, kubernetes_repository_kustomize_path,
      source_subpath (for basic components)     - application, project, environment,
      namespace (for wordpress components)     # fill below parameters block only
      for `wordpress` components    - apps[PROJECT].components[NAME].wordpress.imageTag
      - tag of the wordpress image (default: "5.7.2")   - apps[PROJECT].components[NAME].wordpress.repository_ssh_url
      - project''s wordpress repository SSH url (default: null, may be absent if project
      has no wordpress repo)   - apps[PROJECT].components[NAME].wordpress.resources
      - wordpress pod resources params (default: requests.cpu: 100m, requests.memory:
      128Mi)   - apps[PROJECT].components[NAME].wordpress.commonLabels - wordpress
      pod common labels (default: commonLabels.tech_stack: php, commonLabels.application:
      wordpress)   - apps[PROJECT].components[NAME].wordpress.wordpressTablePrefix
      - wordpress DB tables prefix (default: wp_)   - apps[PROJECT].components[NAME].wordpress.existingSecret
      - name of existing in kubernetes secret with wp admin auth info (default: "<project_name>-<component_name>-<env>",     i.e.
      "taco-wordpress-dev")   - apps[PROJECT].components[NAME].wordpress.updateStrategy
      - strategy that should be used for wordpress pod update (default: updateStrategy.type:
      RollingUpdate,     updateStrategy.rollingUpdate.maxSurge: 0%, updateStrategy.rollingUpdate.maxUnavailable:
      100%, i.e. stop old pod and then create a new one)   - apps[PROJECT].components[NAME].wordpress.smtp.host
      - SMTP host for sending emails (default: mailhog.mailhog.svc.cluster.local)   -
      apps[PROJECT].components[NAME].wordpress.smtp.port - SMTP port for sending emails
      (default: 1025)   - apps[PROJECT].components[NAME].wordpress.smtp.user - SMTP
      user for sending emails (default: <project_name>, i.e. taco)   - apps[PROJECT].components[NAME].wordpress.smtp.password
      - SMTP password for sending emails (default: anypassword)   - apps[PROJECT].components[NAME].wordpress.nodeSelector
      - wordpress pod node selector params (default: nodeSelector.tech_stack: php,
      nodeSelector.pvc: "true")   - apps[PROJECT].components[NAME].wordpress.podSecurityContext
      - wordpress pod''s security context params (default: podSecurityContext.enabled:
      true, podSecurityContext.fsGroup: 1000)   - apps[PROJECT].components[NAME].wordpress.containerSecurityContext
      - wordpress pod container''s security context params (default: containerSecurityContext.enabled:
      true,     containerSecurityContext.runAsUser: 1000)   - apps[PROJECT].components[NAME].wordpress.ci
      - boolean flag which defines whether wordpress project has ci/cd or not (default:
      true)   - apps[PROJECT].components[NAME].wordpress.extraInitContainers - extra
      ci/cd init containers if needed, enabled only if wordpress component has `ci`
      flag enabled (default: null)   - apps[PROJECT].components[NAME].wordpress.extraVolumesSshKeySecret
      - name of a secret with wordpress repository SSH url (default: "<project_name>-<component_name>-deploy-key",     i.e.
      "taco-wordpress-deploy-key")   - apps[PROJECT].components[NAME].wordpress.extraVolumes
      - extra volumes that might be needed to wordpress pod (default: null)   - apps[PROJECT].components[NAME].wordpress.ingress.hostname
      - wordpress ingress hostname (default: "<project_name>.saritasa.rocks", i.e.
      "taco.saritasa.rocks")   - apps[PROJECT].components[NAME].wordpress.ingress.annotations
      - wordpress ingress annotations (default: kubernetes.io/ingress.class: "nginx",
      cert-manager.io/cluster-issuer: "letsencrypt-prod",     nginx.ingress.kubernetes.io/proxy-body-size:
      100m, nginx.ingress.kubernetes.io/proxy-connect-timeout: "300", nginx.ingress.kubernetes.io/proxy-next-upstream-timeout:
      "300",     nginx.ingress.kubernetes.io/auth-type: basic, nginx.ingress.kubernetes.io/auth-secret:
      <ingress.authSecret>, nginx.ingress.kubernetes.io/auth-realm: "Authentication
      Required",     nginx.ingress.kubernetes.io/server-snippet: |-,   add_header
      X-Robots-Tag "noindex, nofollow, nosnippet, noarchive")   - apps[PROJECT].components[NAME].wordpress.ingress.authSecret
      - name of kubernetes secret that should be used in ingress for basic auth (default:
      "<project_name>-<compinent_name>-<env>-basic-auth",     i.e. "taco-wordpress-dev-basic-auth")   -
      apps[PROJECT].components[NAME].wordpress.ingress.extraHosts - list of extra
      hosts that may be defined in ingress (default: null)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.host
      - wordpress DB host (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.user
      - wordpress DB user (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.existingSecret
      - name of existing in kubernetes secret with DB user password (required)   -
      apps[PROJECT].components[NAME].wordpress.externalDatabase.database - wordpress
      DB name (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.port
      - wordpress DB port (default: 3306)   - apps[PROJECT].components[NAME].wordpress.wordpressExtraConfigContent
      - wordpress extra configs if needed (default: null)   - apps[PROJECT].components[NAME].wordpress.extraEnvVars
      - wordpress extra env vars if needed (default: null)    Example of values with
      extra `eventlistener` and `extraBuildConfigParams` in component:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           gitBranchPrefixes:             -
      staging           storageClassName: gp2           aws:             region: "us-west-2"             dns:
      staging.site.com           defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com           argocd:             server:
      deploy.staging.site.com           eventlistener:             enableWebhookSecret:
      true           apps:             - project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: prod               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.site.com/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack                   applicationURL: https://api.site.com                   eventlistener:                     template:
      buildpack-backend-build-pipeline-trigger-template                   extraBuildConfigParams:
      # what additional K/V pairs you want to add into the build-pipeline-config configmap                     KEY:
      value                   triggerBinding:                     - name: docker_registry_repository                       value:
      XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/backend                     - name:
      buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/runner:v1                 -
      name: frontend                   repository: xxx-frontend                   pipeline:
      buildpack                   applicationURL: https://site.com                   eventlistener:                     enableWebhookSecret:
      false                     filter: (body.ref.startsWith(''refs/heads/develop'')
      || body.ref.startsWith(''refs/heads/release/''))                     template:
      buildpack-frontend-build-pipeline-trigger-template                     extraOverlays:
      []                     # - key: truncated_sha                     #   expression:
      "body.head_commit.id.truncate(7)"                     eventTypes: ["pull_request",
      "push"]                   extraBuildConfigParams: {}                   triggerBinding:                     -
      name: docker_registry_repository                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/frontend                     -
      name: buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web            # make
      sure PVCs are bound after the chart is synced           # by temporarily mount
      them into short-live job.           runPostInstallMountPvcJob: false        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true    ```    Example of
      old application from `saritasa-clients` repo, which has no separate `kubernetes`
      repository. Here we replace `apps[PROJECT].kubernetesRepository` block with   `apps[PROJECT].argocd.sourceRepos`
      and `apps[PROJECT].components[NAME].argocd` block, also it is required to set
      `apps[PROJECT].components[NAME].tektonKubernetesRepoDeployKeyName`   in such
      a case to use correct secret with deploy key as far as there is no kubernetes
      repo that is used by default.    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      git@github.com:saritasa-nest/xxx-backend.git                   - git@github.com:saritasa-nest/xxx-frontend.git               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: backend                   repository:
      xxx-backend                   pipeline: buildpack-django-build-pipeline                   applicationURL:
      https://api.xxx.site.url                   argocd:                     source:                       path:
      .kubernetes/manifests/dev                       repoUrl: git@github.com:saritasa-nest/xxx-backend.git                       targetRevision:
      develop                   eventlistener:                     template: buildpack-django-build-pipeline-trigger-template                   tektonKubernetesRepoDeployKeyName:
      xxx-backend-deploy-key                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1                 -
      name: frontend                   repository: xxx-frontend                   pipeline:
      buildpack-frontend-build-pipeline                   applicationURL: https://xxx.site.url                   argocd:                     source:                       path:
      .kubernetes/manifests/dev                       repoUrl: git@github.com:saritasa-nest/xxx-frontend.git                       targetRevision:
      develop                   eventlistener:                     template: buildpack-frontend-build-pipeline-trigger-template                   tektonKubernetesRepoDeployKeyName:
      xxx-frontend-deploy-key                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/frontend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Example with
      creating an ArgoCD project and application with its custom `environment` (case
      when in common `staging` environment we need to create for some reason project
      with   `dev` environment). Here is added an extra `apps[PROJECT].environment`
      param, which overrides default `environment` in helm values for this project,
      and   `apps[PROJECT].components[NAME].eventlistener.gitWebhookBranches` param,
      which defines that ci/cd should be trigger on push to `develop` branch.    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack-django-build-pipeline                   applicationURL: https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Also there might
      a situation that you would like to provision custom utility ArgoCD Application
      in argo-cd from project''s kubernetes repo (for example VP project provisions   like
      this `jitsi` application). To reach this you might need to add an extra destination
      namespace to ArgoCD Project, you should use   `apps[PROJECT].argocd.extraDestinationNamespaces[]`
      param for that like in below example.    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev                 extraDestinationNamespaces:                   -
      argo-cd               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack-django-build-pipeline                   applicationURL: https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Simple wordpress
      application example filled by default:    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: wordpress                   repository:
      xxx-wordpress                   pipeline: wordpress-build-pipeline                   applicationURL:
      https://xxx.site.url                   wordpress:                     repository_ssh_url:
      git@github.com:saritasa-nest/xxx-wordpress.git                     externalDatabase:                       host:
      xxx.xxx.us-west-2.rds.amazonaws.com                       user: xxx-wordpress-user-dev                       existingSecret:
      xxx-wordpress-dev-externaldb                       database: xxx-wordpress-dev                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Simple wordpress
      application example filled by default, but without ci/cd:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: wordpress                   repository:
      xxx-wordpress                   pipeline: wordpress-build-pipeline                   applicationURL:
      https://xxx.site.url                   wordpress:                     ci: false                     externalDatabase:                       host:
      xxx.xxx.us-west-2.rds.amazonaws.com                       user: xxx-wordpress-user-dev                       existingSecret:
      xxx-wordpress-dev-externaldb                       database: xxx-wordpress-dev                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    More difficult
      example of project containing `wordpress` and `frontend` component. Also defined
      for example all extra wordpress params that could be set:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami                   - git@github.com:saritasa-nest/xxx-kubernetes-aws.git               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: wordpress                   repository: xxx-wordpress                   pipeline:
      wordpress-build-pipeline                   applicationURL: https://xxx.site.url                   wordpress:                     imageTag:
      "5.8.1"                     repository_ssh_url: "git@github.com:saritasa-nest/xxx-wordpress.git"                     resources:                       requests:                         memory:
      512Mi                         cpu: 100m                     commonLabels:                       tech_stack:
      php                       application: wordpress                     wordpressTablePrefix:
      "qbf_"                     existingSecret: xxx-wordpress                     updateStrategy:                       type:
      RollingUpdate                       rollingUpdate:                         maxSurge:
      25%                         maxUnavailable: 25%                     smtp:                       host:
      mysmtp.site.url                       port: 1010                       user:
      myuser                       password: mypassword                     nodeSelector:                       tech_stack:
      php                       pvc: "true"                     podSecurityContext:                       enabled:
      true                       fsGroup: 1001                     containerSecurityContext:                       enabled:
      true                       runAsUser: 1001                     ci: true                     extraInitContainers:                       -
      name: build-frontend                         image: node:14                         imagePullPolicy:
      Always                         command:                           - bash                           -
      -c                           - |                             git -c core.sshCommand="ssh
      -i ~/.ssh/id_rsa" clone git@github.com:saritasa-nest/xxx.git -b develop ~/xxx                             cd
      ~/xxx                             npm install                             npm
      run build:embedded-questionnaire                             cp -Rf $(pwd)/dist/*
      /bitnami/wordpress/wp-content/                             echo "Copied built
      files into /bitnami/wordpress/wp-content/"                             ls -la
      /bitnami/wordpress/wp-content/                             echo "Done BUILD
      FRONTEND"                         volumeMounts:                         - mountPath:
      /bitnami/wordpress                           name: wordpress-data                           subPath:
      wordpress                         - mountPath: /home/node/.ssh/id_rsa                           name:
      xxx-ssh-key                           subPath: ssh-privatekey                         -
      mountPath: /home/node/.ssh/known_hosts                           name: github-known-hosts                           subPath:
      config.ssh                         securityContext:                           runAsNonRoot:
      true                           runAsUser: 1000                           allowPrivilegeEscalation:
      false                     extraVolumesSshKeySecret: xxx-wordpress-deploy-key                     extraVolumes:                     -
      name: xxx-ssh-key                       secret:                         secretName:
      xxx-deploy-key                     ingress:                       hostname:
      test.xxx.site.url                       annotations:                         kubernetes.io/ingress.class:
      "nginx"                         cert-manager.io/cluster-issuer: "letsencrypt-prod"                         nginx.ingress.kubernetes.io/proxy-body-size:
      100m                         nginx.ingress.kubernetes.io/client-max-body-size:
      100m                         nginx.ingress.kubernetes.io/server-snippet: |-                           add_header
      X-Robots-Tag "noindex, nofollow, nosnippet, noarchive";                         nginx.ingress.kubernetes.io/whitelist-source-range:
      |                           35.85.92.224/32,                           100.21.244.185/32                       extraHosts:                         -
      name: test.xxx.site.url                           path: /wp-admin                     externalDatabase:                       host:
      "xxx.xxx.us-west-2.rds.amazonaws.com"                       user: "xxx-wp-user-dev"                       existingSecret:
      "xxx-wordpress-dev-externaldb"                       database: "xxx-wp-dev"                     wordpressExtraConfigContent:
      |                       @ini_set(''WP_MEMORY_LIMIT'', ''512M'');                       @ini_set(''ALLOW_UNFILTERED_UPLOADS'',
      true);                     extraEnvVars:                       KEY: VALUE                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template                  - name: frontend                   repository:
      xxx-frontend                   pipeline: buildpack-frontend-build-pipeline                   applicationURL:
      https://app.xxx.site.url                   eventlistener:                     template:
      buildpack-frontend-build-pipeline-trigger-template                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/frontend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ``` '
    digest: 78c3e20e3d5baae2e7e5d1d50a7eb0e773b40ef58e2cdf68495e69d647440d93
    maintainers:
    - email: nospam@saritasa.com
      name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-apps
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-apps-0.1.19/saritasa-tekton-apps-0.1.19.tgz
    version: 0.1.19
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2022-05-06T02:11:53.795824362Z"
    description: 'A Helm chart for tekton apps (rbac, eventlistener)  Implements:
      - dynamic records for eventlistener - PVCs - RBAC - configmaps for each app
      - triggerbindings for each app - kubernetes job to make sure the PVCs are bound
      and argocd marks the app as healthy - argocd project for each app - argocd application
      for each app component  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then declare dynamic list of projects (and associated components of that
      project like backend, api, frontend, etc) that would be dynamically added into
      the tekton''s eventlistener manifest.  Each component should be a separate git
      repository.  ```yaml --- apiVersion: argoproj.io/v1alpha1 kind: Application
      metadata:   name: tekton-apps   namespace: argo-cd   finalizers:   - resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "41" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-apps     helm:       values: |         environment: staging         gitBranchPrefixes:           -
      staging         storageClassName: gp2         aws:           region: "us-west-2"           dns:
      staging.site.com         defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com         argocd:           server:
      deploy.staging.site.com         eventlistener:           enableWebhookSecret:
      true         apps:           - project: vp             enabled: true             argocd:               labels:                 created-by:
      xxx                 ops-main: xxx                 ops-secondary: xxx                 pm:
      xxx                 tm: xxx               namespace: prod             mailList:
      vp@site.com             devopsMailList: devops+vp@site.com             jiraURL:
      https://site.atlassian.net/browse/vp             tektonURL: https://tekton.staging.site.com/#/namespaces/ci/pipelineruns             slack:
      client-vp-ci             kubernetesRepository:               name: vp-kubernetes-aws               branch:
      main               url: git@github.com:org-name/vp-kubernetes-aws.git              components:               -
      name: backend                 repository: vp-backend                 pipeline:
      buildpack-django-build-pipeline                 applicationURL: https://api.staging.site.com                 eventlistener:                   template:
      buildpack-django-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/backend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/builder:v1                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/runner:v1               -
      name: frontend                 repository: vp-frontend                 pipeline:
      buildpack-frontend-build-pipeline                 applicationURL: https://staging.site.com                 eventlistener:                   template:
      buildpack-frontend-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/frontend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/builder:full                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/runner:full                   -
      name: source_subpath                     value: dist/web          # make sure
      PVCs are bound after the chart is synced         # by temporarily mount them
      into short-live job.         runPostInstallMountPvcJob: false      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.16"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true    ```    Above helm chart creates a new ArgoCD project
      for each project in values, for each component in project''s components there
      is created a separate ArgoCD   application and required for Tekton ci/cd resources
      (triggerbindings, roles, configmaps, jobs, serviceaccounts, pvcs and etc).    #
      fill below parameters for each `project` block    - apps[PROJECT].environment
      - possbility to define custom project''s environment, needed for cases when
      need to deploy `dev` and `prod` envs to the same cluster. For example `xxx`
      dev     and prod both deployed in rocks EKS (not required)   - apps[PROJECT].enabled
      - boolean value to define whether the project enabled or not (required)   -
      apps[PROJECT].argocd.labels - labels which are added to ArgoCD project (required)   -
      apps[PROJECT].argocd.namespace - allowed for ArgoCD project namespace (required)   -
      apps[PROJECT].argocd.syncWave - ArgoCD project sync wave, i.e. sequence in which
      project should be synced (not required, default: "200")   - apps[PROJECT].argocd.sourceRepos[]
      - source repositories added to ArgoCD project (not required, default: [<apps[PROJECT].kubernetesRepository.url>])   -
      apps[PROJECT].argocd.extraDestinationNamespaces[] - adds extra destination namespaces
      for ArgoCD project to be able to create custom apps within project''s kubernetes
      repo (not required, default: null)   - apps[PROJECT].mailList - project''s team
      email address (required)   - apps[PROJECT].devopsMailList - project''s devops
      team email address (required)   - apps[PROJECT].jiraURL - project''s JIRA url
      (required)   - apps[PROJECT].tektonURL - link to Tekton pipelineruns used in
      Tekton ConfigMap as `TEKTON_URL` during Slack notification send (required)   -
      apps[PROJECT].slack - project''s Slack channel name (required)   - apps[PROJECT].kubernetesRepository.name
      - project''s kubernetes repository name used in ArgoCD application and Tekton
      TriggerBinding (may be absent and replaced with     `apps[PROJECT].components[NAME].argocd`
      and `apps[PROJECT].argocd.sourceRepos[]` blocks in case if project has no kubernetes
      repo)   - apps[PROJECT].kubernetesRepository.branch - project''s kubernetes
      repository branch used in ArgoCD application and Tekton TriggerBinding (may
      be absent and replaced     with `apps[PROJECT].components[NAME].argocd` and
      `apps[PROJECT].argocd.sourceRepos[]` blocks in case if project has no kubernetes
      repo)   - apps[PROJECT].kubernetesRepository.url - project''s kubernetes repository
      url used in ArgoCD application and Tekton TriggerBinding (may be absent and
      replaced with     `apps[PROJECT].components[NAME].argocd` and `apps[PROJECT].argocd.sourceRepos[]`
      blocks in case if project has no kubernetes repo)    Basically we have 2 different
      types of ci/cd - basic (buildpacks, kaniko) and wordpress ones. So depending
      on project''s component type you will need to fill different parameters.    #
      fill below parameters for each `component` block    - apps[PROJECT].components[NAME].repository
      - the name of the repository containing the code (may be absent in case of wordpress
      application without deployment, i.e. bolrdswp, taco,     saritasa-wordpress-demo)   -
      apps[PROJECT].components[NAME].pipeline - the name of the pipeline building
      the code from the repository above   - apps[PROJECT].components[NAME].argocd.source.syncWave
      - custom component ArgoCD application sync wave (default: "210")   - apps[PROJECT].components[NAME].argocd.source.path
      - path to directory responsible for kubernetes resources creation of the ArgoCD
      Application (default: kubernetes repo path for basic     projects "apps/<apps[PROJECT].components[NAME].name>/manifests/<environment>"
      or "null" for wordpress projects)   - apps[PROJECT].components[NAME].argocd.source.repoUrl
      - url of repository which should be used for ArgoCD Application (default: kubernetes
      repo for basic projects     "<apps[PROJECT].kubernetesRepository.url>" or `https://charts.bitnami.com/bitnami`
      for wordpress projects)   - apps[PROJECT].components[NAME].argocd.source.targetRevision
      - tag or branch in the repository for ArgoCD Application (default: kubernetes
      branch for basic projects     "<apps[PROJECT].kubernetesRepository.branch>"
      or "11.0.14" for wordpress projects)   - apps[PROJECT].components[NAME].applicationURL
      - url that should be used in tekton build ConfigMap `APPLICATION_URL` param   -
      apps[PROJECT].components[NAME].tektonKubernetesRepoDeployKeyName - name of existing
      in kubernetes cluster secret with SSH key to kubernetes repository, used in
      `kustomize` deployment     step (i.e. addon-backend-deploy-key). This param
      sets by default to `<project>-kubernetes-aws-deploy-key` if project has `kubernetesRepository`
      param in values (actual only for basic     components, not wordpress)   - apps[PROJECT].components[NAME].eventlistener.template
      - the name of the trigger template for the component to be used   - apps[PROJECT].components[NAME].eventlistener.enableWebhookSecret
      - should you enable the git web hook for this particular app/component in the
      eventlistener configuration   - apps[PROJECT].components[NAME].eventlistener.filter
      - custom filter for the component of the eventlistener   - apps[PROJECT].components[NAME].eventlistener.extraOverlays
      - extra overlays to be added into the eventlistener for the component   - apps[PROJECT].components[NAME].eventlistener.eventTypes
      - github event types to trigger the ci/cd   - apps[PROJECT].components[NAME].eventlistener.gitWebhookBranches[]
      - list of branches, push to which triggers ci/cd   - apps[PROJECT].components[NAME].extraBuildConfigParams
      - additional key/values to be added into `build-pipeline-config configmap` ConfigMap
      associated with the app   - apps[PROJECT].components[NAME].triggerBinding -
      values to be added into the TriggerBinding manifest except default ones    What
      is important to know is that any key defined in apps[PROJECT].components[NAME].triggerBinding
      would be added as is   into the generated triggerbinding associated with your
      app. However the chart renders some default values based on the values   in
      this values.yaml file:      - application, project, environment, docker_registry,
      kubernetes_repository_ssh_url, kubernetes_branch, kubernetes_repository_kustomize_path,
      source_subpath (for basic components)     - application, project, environment,
      namespace (for wordpress components)     # fill below parameters block only
      for `wordpress` components    - apps[PROJECT].components[NAME].wordpress.imageTag
      - tag of the wordpress image (default: "5.7.2")   - apps[PROJECT].components[NAME].wordpress.repository_ssh_url
      - project''s wordpress repository SSH url (default: null, may be absent if project
      has no wordpress repo)   - apps[PROJECT].components[NAME].wordpress.resources
      - wordpress pod resources params (default: requests.cpu: 100m, requests.memory:
      128Mi)   - apps[PROJECT].components[NAME].wordpress.commonLabels - wordpress
      pod common labels (default: commonLabels.tech_stack: php, commonLabels.application:
      wordpress)   - apps[PROJECT].components[NAME].wordpress.wordpressTablePrefix
      - wordpress DB tables prefix (default: wp_)   - apps[PROJECT].components[NAME].wordpress.existingSecret
      - name of existing in kubernetes secret with wp admin auth info (default: "<project_name>-<component_name>-<env>",     i.e.
      "taco-wordpress-dev")   - apps[PROJECT].components[NAME].wordpress.updateStrategy
      - strategy that should be used for wordpress pod update (default: updateStrategy.type:
      RollingUpdate,     updateStrategy.rollingUpdate.maxSurge: 0%, updateStrategy.rollingUpdate.maxUnavailable:
      100%, i.e. stop old pod and then create a new one)   - apps[PROJECT].components[NAME].wordpress.smtp.host
      - SMTP host for sending emails (default: mailhog.mailhog.svc.cluster.local)   -
      apps[PROJECT].components[NAME].wordpress.smtp.port - SMTP port for sending emails
      (default: 1025)   - apps[PROJECT].components[NAME].wordpress.smtp.user - SMTP
      user for sending emails (default: <project_name>, i.e. taco)   - apps[PROJECT].components[NAME].wordpress.smtp.password
      - SMTP password for sending emails (default: anypassword)   - apps[PROJECT].components[NAME].wordpress.nodeSelector
      - wordpress pod node selector params (default: nodeSelector.tech_stack: php,
      nodeSelector.pvc: "true")   - apps[PROJECT].components[NAME].wordpress.podSecurityContext
      - wordpress pod''s security context params (default: podSecurityContext.enabled:
      true, podSecurityContext.fsGroup: 1000)   - apps[PROJECT].components[NAME].wordpress.containerSecurityContext
      - wordpress pod container''s security context params (default: containerSecurityContext.enabled:
      true,     containerSecurityContext.runAsUser: 1000)   - apps[PROJECT].components[NAME].wordpress.ci
      - boolean flag which defines whether wordpress project has ci/cd or not (default:
      true)   - apps[PROJECT].components[NAME].wordpress.extraInitContainers - extra
      ci/cd init containers if needed, enabled only if wordpress component has `ci`
      flag enabled (default: null)   - apps[PROJECT].components[NAME].wordpress.extraVolumesSshKeySecret
      - name of a secret with wordpress repository SSH url (default: "<project_name>-<component_name>-deploy-key",     i.e.
      "taco-wordpress-deploy-key")   - apps[PROJECT].components[NAME].wordpress.extraVolumes
      - extra volumes that might be needed to wordpress pod (default: null)   - apps[PROJECT].components[NAME].wordpress.ingress.hostname
      - wordpress ingress hostname (default: "<project_name>.saritasa.rocks", i.e.
      "taco.saritasa.rocks")   - apps[PROJECT].components[NAME].wordpress.ingress.annotations
      - wordpress ingress annotations (default: kubernetes.io/ingress.class: "nginx",
      cert-manager.io/cluster-issuer: "letsencrypt-prod",     nginx.ingress.kubernetes.io/proxy-body-size:
      100m, nginx.ingress.kubernetes.io/proxy-connect-timeout: "300", nginx.ingress.kubernetes.io/proxy-next-upstream-timeout:
      "300",     nginx.ingress.kubernetes.io/auth-type: basic, nginx.ingress.kubernetes.io/auth-secret:
      <ingress.authSecret>, nginx.ingress.kubernetes.io/auth-realm: "Authentication
      Required",     nginx.ingress.kubernetes.io/server-snippet: |-,   add_header
      X-Robots-Tag "noindex, nofollow, nosnippet, noarchive")   - apps[PROJECT].components[NAME].wordpress.ingress.authSecret
      - name of kubernetes secret that should be used in ingress for basic auth (default:
      "<project_name>-<compinent_name>-<env>-basic-auth",     i.e. "taco-wordpress-dev-basic-auth")   -
      apps[PROJECT].components[NAME].wordpress.ingress.extraHosts - list of extra
      hosts that may be defined in ingress (default: null)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.host
      - wordpress DB host (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.user
      - wordpress DB user (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.existingSecret
      - name of existing in kubernetes secret with DB user password (required)   -
      apps[PROJECT].components[NAME].wordpress.externalDatabase.database - wordpress
      DB name (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.port
      - wordpress DB port (default: 3306)   - apps[PROJECT].components[NAME].wordpress.wordpressExtraConfigContent
      - wordpress extra configs if needed (default: null)   - apps[PROJECT].components[NAME].wordpress.extraEnvVars
      - wordpress extra env vars if needed (default: null)    Example of values with
      extra `eventlistener` and `extraBuildConfigParams` in component:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           gitBranchPrefixes:             -
      staging           storageClassName: gp2           aws:             region: "us-west-2"             dns:
      staging.site.com           defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com           argocd:             server:
      deploy.staging.site.com           eventlistener:             enableWebhookSecret:
      true           apps:             - project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: prod               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.site.com/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack                   applicationURL: https://api.site.com                   eventlistener:                     template:
      buildpack-backend-build-pipeline-trigger-template                   extraBuildConfigParams:
      # what additional K/V pairs you want to add into the build-pipeline-config configmap                     KEY:
      value                   triggerBinding:                     - name: docker_registry_repository                       value:
      XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/backend                     - name:
      buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/runner:v1                 -
      name: frontend                   repository: xxx-frontend                   pipeline:
      buildpack                   applicationURL: https://site.com                   eventlistener:                     enableWebhookSecret:
      false                     filter: (body.ref.startsWith(''refs/heads/develop'')
      || body.ref.startsWith(''refs/heads/release/''))                     template:
      buildpack-frontend-build-pipeline-trigger-template                     extraOverlays:
      []                     # - key: truncated_sha                     #   expression:
      "body.head_commit.id.truncate(7)"                     eventTypes: ["pull_request",
      "push"]                   extraBuildConfigParams: {}                   triggerBinding:                     -
      name: docker_registry_repository                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/frontend                     -
      name: buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web            # make
      sure PVCs are bound after the chart is synced           # by temporarily mount
      them into short-live job.           runPostInstallMountPvcJob: false        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true    ```    Example of
      old application from `saritasa-clients` repo, which has no separate `kubernetes`
      repository. Here we replace `apps[PROJECT].kubernetesRepository` block with   `apps[PROJECT].argocd.sourceRepos`
      and `apps[PROJECT].components[NAME].argocd` block, also it is required to set
      `apps[PROJECT].components[NAME].tektonKubernetesRepoDeployKeyName`   in such
      a case to use correct secret with deploy key as far as there is no kubernetes
      repo that is used by default.    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      git@github.com:saritasa-nest/xxx-backend.git                   - git@github.com:saritasa-nest/xxx-frontend.git               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: backend                   repository:
      xxx-backend                   pipeline: buildpack-django-build-pipeline                   applicationURL:
      https://api.xxx.site.url                   argocd:                     source:                       path:
      .kubernetes/manifests/dev                       repoUrl: git@github.com:saritasa-nest/xxx-backend.git                       targetRevision:
      develop                   eventlistener:                     template: buildpack-django-build-pipeline-trigger-template                   tektonKubernetesRepoDeployKeyName:
      xxx-backend-deploy-key                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1                 -
      name: frontend                   repository: xxx-frontend                   pipeline:
      buildpack-frontend-build-pipeline                   applicationURL: https://xxx.site.url                   argocd:                     source:                       path:
      .kubernetes/manifests/dev                       repoUrl: git@github.com:saritasa-nest/xxx-frontend.git                       targetRevision:
      develop                   eventlistener:                     template: buildpack-frontend-build-pipeline-trigger-template                   tektonKubernetesRepoDeployKeyName:
      xxx-frontend-deploy-key                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/frontend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Example with
      creating an ArgoCD project and application with its custom `environment` (case
      when in common `staging` environment we need to create for some reason project
      with   `dev` environment). Here is added an extra `apps[PROJECT].environment`
      param, which overrides default `environment` in helm values for this project,
      and   `apps[PROJECT].components[NAME].eventlistener.gitWebhookBranches` param,
      which defines that ci/cd should be trigger on push to `develop` branch.    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack-django-build-pipeline                   applicationURL: https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Also there might
      a situation that you would like to provision custom utility ArgoCD Application
      in argo-cd from project''s kubernetes repo (for example VP project provisions   like
      this `jitsi` application). To reach this you might need to add an extra destination
      namespace to ArgoCD Project, you should use   `apps[PROJECT].argocd.extraDestinationNamespaces[]`
      param for that like in below example.    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev                 extraDestinationNamespaces:                   -
      argo-cd               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack-django-build-pipeline                   applicationURL: https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Simple wordpress
      application example filled by default:    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: wordpress                   repository:
      xxx-wordpress                   pipeline: wordpress-build-pipeline                   applicationURL:
      https://xxx.site.url                   wordpress:                     repository_ssh_url:
      git@github.com:saritasa-nest/xxx-wordpress.git                     externalDatabase:                       host:
      xxx.xxx.us-west-2.rds.amazonaws.com                       user: xxx-wordpress-user-dev                       existingSecret:
      xxx-wordpress-dev-externaldb                       database: xxx-wordpress-dev                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Simple wordpress
      application example filled by default, but without ci/cd:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: wordpress                   repository:
      xxx-wordpress                   pipeline: wordpress-build-pipeline                   applicationURL:
      https://xxx.site.url                   wordpress:                     ci: false                     externalDatabase:                       host:
      xxx.xxx.us-west-2.rds.amazonaws.com                       user: xxx-wordpress-user-dev                       existingSecret:
      xxx-wordpress-dev-externaldb                       database: xxx-wordpress-dev                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    More difficult
      example of project containing `wordpress` and `frontend` component. Also defined
      for example all extra wordpress params that could be set:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami                   - git@github.com:saritasa-nest/xxx-kubernetes-aws.git               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: wordpress                   repository: xxx-wordpress                   pipeline:
      wordpress-build-pipeline                   applicationURL: https://xxx.site.url                   wordpress:                     imageTag:
      "5.8.1"                     repository_ssh_url: "git@github.com:saritasa-nest/xxx-wordpress.git"                     resources:                       requests:                         memory:
      512Mi                         cpu: 100m                     commonLabels:                       tech_stack:
      php                       application: wordpress                     wordpressTablePrefix:
      "qbf_"                     existingSecret: xxx-wordpress                     updateStrategy:                       type:
      RollingUpdate                       rollingUpdate:                         maxSurge:
      25%                         maxUnavailable: 25%                     smtp:                       host:
      mysmtp.site.url                       port: 1010                       user:
      myuser                       password: mypassword                     nodeSelector:                       tech_stack:
      php                       pvc: "true"                     podSecurityContext:                       enabled:
      true                       fsGroup: 1001                     containerSecurityContext:                       enabled:
      true                       runAsUser: 1001                     ci: true                     extraInitContainers:                       -
      name: build-frontend                         image: node:14                         imagePullPolicy:
      Always                         command:                           - bash                           -
      -c                           - |                             git -c core.sshCommand="ssh
      -i ~/.ssh/id_rsa" clone git@github.com:saritasa-nest/xxx.git -b develop ~/xxx                             cd
      ~/xxx                             npm install                             npm
      run build:embedded-questionnaire                             cp -Rf $(pwd)/dist/*
      /bitnami/wordpress/wp-content/                             echo "Copied built
      files into /bitnami/wordpress/wp-content/"                             ls -la
      /bitnami/wordpress/wp-content/                             echo "Done BUILD
      FRONTEND"                         volumeMounts:                         - mountPath:
      /bitnami/wordpress                           name: wordpress-data                           subPath:
      wordpress                         - mountPath: /home/node/.ssh/id_rsa                           name:
      xxx-ssh-key                           subPath: ssh-privatekey                         -
      mountPath: /home/node/.ssh/known_hosts                           name: github-known-hosts                           subPath:
      config.ssh                         securityContext:                           runAsNonRoot:
      true                           runAsUser: 1000                           allowPrivilegeEscalation:
      false                     extraVolumesSshKeySecret: xxx-wordpress-deploy-key                     extraVolumes:                     -
      name: xxx-ssh-key                       secret:                         secretName:
      xxx-deploy-key                     ingress:                       hostname:
      test.xxx.site.url                       annotations:                         kubernetes.io/ingress.class:
      "nginx"                         cert-manager.io/cluster-issuer: "letsencrypt-prod"                         nginx.ingress.kubernetes.io/proxy-body-size:
      100m                         nginx.ingress.kubernetes.io/client-max-body-size:
      100m                         nginx.ingress.kubernetes.io/server-snippet: |-                           add_header
      X-Robots-Tag "noindex, nofollow, nosnippet, noarchive";                         nginx.ingress.kubernetes.io/whitelist-source-range:
      |                           35.85.92.224/32,                           100.21.244.185/32                       extraHosts:                         -
      name: test.xxx.site.url                           path: /wp-admin                     externalDatabase:                       host:
      "xxx.xxx.us-west-2.rds.amazonaws.com"                       user: "xxx-wp-user-dev"                       existingSecret:
      "xxx-wordpress-dev-externaldb"                       database: "xxx-wp-dev"                     wordpressExtraConfigContent:
      |                       @ini_set(''WP_MEMORY_LIMIT'', ''512M'');                       @ini_set(''ALLOW_UNFILTERED_UPLOADS'',
      true);                     extraEnvVars:                       KEY: VALUE                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template                  - name: frontend                   repository:
      xxx-frontend                   pipeline: buildpack-frontend-build-pipeline                   applicationURL:
      https://app.xxx.site.url                   eventlistener:                     template:
      buildpack-frontend-build-pipeline-trigger-template                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/frontend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ``` '
    digest: c0935c8bac6f9fe0141c9818bfed4d08f883c7539af1ad15cdaa3ea5dae223ec
    maintainers:
    - email: nospam@saritasa.com
      name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-apps
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-apps-0.1.18/saritasa-tekton-apps-0.1.18.tgz
    version: 0.1.18
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2022-04-18T10:44:30.685357327Z"
    description: 'A Helm chart for tekton apps (rbac, eventlistener)  Implements:
      - dynamic records for eventlistener - PVCs - RBAC - configmaps for each app
      - triggerbindings for each app - kubernetes job to make sure the PVCs are bound
      and argocd marks the app as healthy - argocd project for each app - argocd application
      for each app component  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then declare dynamic list of projects (and associated components of that
      project like backend, api, frontend, etc) that would be dynamically added into
      the tekton''s eventlistener manifest.  Each component should be a separate git
      repository.  ```yaml --- apiVersion: argoproj.io/v1alpha1 kind: Application
      metadata:   name: tekton-apps   namespace: argo-cd   finalizers:   - resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "41" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-apps     helm:       values: |         environment: staging         gitBranchPrefixes:           -
      staging         storageClassName: gp2         aws:           region: "us-west-2"           dns:
      staging.site.com         defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com         argocd:           server:
      deploy.staging.site.com         eventlistener:           enableWebhookSecret:
      true         apps:           - project: vp             enabled: true             argocd:               labels:                 created-by:
      xxx                 ops-main: xxx                 ops-secondary: xxx                 pm:
      xxx                 tm: xxx               namespace: prod             mailList:
      vp@site.com             devopsMailList: devops+vp@site.com             jiraURL:
      https://site.atlassian.net/browse/vp             tektonURL: https://tekton.staging.site.com/#/namespaces/ci/pipelineruns             slack:
      client-vp-ci             kubernetesRepository:               name: vp-kubernetes-aws               branch:
      main               url: git@github.com:org-name/vp-kubernetes-aws.git              components:               -
      name: backend                 repository: vp-backend                 pipeline:
      buildpack-django-build-pipeline                 applicationURL: https://api.staging.site.com                 eventlistener:                   template:
      buildpack-django-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/backend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/builder:v1                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/runner:v1               -
      name: frontend                 repository: vp-frontend                 pipeline:
      buildpack-frontend-build-pipeline                 applicationURL: https://staging.site.com                 eventlistener:                   template:
      buildpack-frontend-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/frontend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/builder:full                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/runner:full                   -
      name: source_subpath                     value: dist/web          # make sure
      PVCs are bound after the chart is synced         # by temporarily mount them
      into short-live job.         runPostInstallMountPvcJob: false      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.16"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true    ```    Above helm chart creates a new ArgoCD project
      for each project in values, for each component in project''s components there
      is created a separate ArgoCD   application and required for Tekton ci/cd resources
      (triggerbindings, roles, configmaps, jobs, serviceaccounts, pvcs and etc).    #
      fill below parameters for each `project` block    - apps[PROJECT].environment
      - possbility to define custom project''s environment, needed for cases when
      need to deploy `dev` and `prod` envs to the same cluster. For example `xxx`
      dev     and prod both deployed in rocks EKS (not required)   - apps[PROJECT].enabled
      - boolean value to define whether the project enabled or not (required)   -
      apps[PROJECT].argocd.labels - labels which are added to ArgoCD project (required)   -
      apps[PROJECT].argocd.namespace - allowed for ArgoCD project namespace (required)   -
      apps[PROJECT].argocd.syncWave - ArgoCD project sync wave, i.e. sequence in which
      project should be synced (not required, default: "200")   - apps[PROJECT].argocd.sourceRepos[]
      - source repositories added to ArgoCD project (not required, default: [<apps[PROJECT].kubernetesRepository.url>])   -
      apps[PROJECT].argocd.extraDestinationNamespaces[] - adds extra destination namespaces
      for ArgoCD project to be able to create custom apps within project''s kubernetes
      repo (not required, default: null)   - apps[PROJECT].mailList - project''s team
      email address (required)   - apps[PROJECT].devopsMailList - project''s devops
      team email address (required)   - apps[PROJECT].jiraURL - project''s JIRA url
      (required)   - apps[PROJECT].tektonURL - link to Tekton pipelineruns used in
      Tekton ConfigMap as `TEKTON_URL` during Slack notification send (required)   -
      apps[PROJECT].slack - project''s Slack channel name (required)   - apps[PROJECT].kubernetesRepository.name
      - project''s kubernetes repository name used in ArgoCD application and Tekton
      TriggerBinding (may be absent and replaced with     `apps[PROJECT].components[NAME].argocd`
      and `apps[PROJECT].argocd.sourceRepos[]` blocks in case if project has no kubernetes
      repo)   - apps[PROJECT].kubernetesRepository.branch - project''s kubernetes
      repository branch used in ArgoCD application and Tekton TriggerBinding (may
      be absent and replaced     with `apps[PROJECT].components[NAME].argocd` and
      `apps[PROJECT].argocd.sourceRepos[]` blocks in case if project has no kubernetes
      repo)   - apps[PROJECT].kubernetesRepository.url - project''s kubernetes repository
      url used in ArgoCD application and Tekton TriggerBinding (may be absent and
      replaced with     `apps[PROJECT].components[NAME].argocd` and `apps[PROJECT].argocd.sourceRepos[]`
      blocks in case if project has no kubernetes repo)    Basically we have 2 different
      types of ci/cd - basic (buildpacks, kaniko) and wordpress ones. So depending
      on project''s component type you will need to fill different parameters.    #
      fill below parameters for each `component` block    - apps[PROJECT].components[NAME].repository
      - the name of the repository containing the code (may be absent in case of wordpress
      application without deployment, i.e. bolrdswp, taco,     saritasa-wordpress-demo)   -
      apps[PROJECT].components[NAME].pipeline - the name of the pipeline building
      the code from the repository above   - apps[PROJECT].components[NAME].argocd.source.syncWave
      - custom component ArgoCD application sync wave (default: "210")   - apps[PROJECT].components[NAME].argocd.source.path
      - path to directory responsible for kubernetes resources creation of the ArgoCD
      Application (default: kubernetes repo path for basic     projects "apps/<apps[PROJECT].components[NAME].name>/manifests/<environment>"
      or "null" for wordpress projects)   - apps[PROJECT].components[NAME].argocd.source.repoUrl
      - url of repository which should be used for ArgoCD Application (default: kubernetes
      repo for basic projects     "<apps[PROJECT].kubernetesRepository.url>" or `https://charts.bitnami.com/bitnami`
      for wordpress projects)   - apps[PROJECT].components[NAME].argocd.source.targetRevision
      - tag or branch in the repository for ArgoCD Application (default: kubernetes
      branch for basic projects     "<apps[PROJECT].kubernetesRepository.branch>"
      or "11.0.14" for wordpress projects)   - apps[PROJECT].components[NAME].applicationURL
      - url that should be used in tekton build ConfigMap `APPLICATION_URL` param   -
      apps[PROJECT].components[NAME].tektonKubernetesRepoDeployKeyName - name of existing
      in kubernetes cluster secret with SSH key to kubernetes repository, used in
      `kustomize` deployment     step (i.e. addon-backend-deploy-key). This param
      sets by default to `<project>-kubernetes-aws-deploy-key` if project has `kubernetesRepository`
      param in values (actual only for basic     components, not wordpress)   - apps[PROJECT].components[NAME].eventlistener.template
      - the name of the trigger template for the component to be used   - apps[PROJECT].components[NAME].eventlistener.enableWebhookSecret
      - should you enable the git web hook for this particular app/component in the
      eventlistener configuration   - apps[PROJECT].components[NAME].eventlistener.filter
      - custom filter for the component of the eventlistener   - apps[PROJECT].components[NAME].eventlistener.extraOverlays
      - extra overlays to be added into the eventlistener for the component   - apps[PROJECT].components[NAME].eventlistener.eventTypes
      - github event types to trigger the ci/cd   - apps[PROJECT].components[NAME].eventlistener.gitWebhookBranches[]
      - list of branches, push to which triggers ci/cd   - apps[PROJECT].components[NAME].extraBuildConfigParams
      - additional key/values to be added into `build-pipeline-config configmap` ConfigMap
      associated with the app   - apps[PROJECT].components[NAME].triggerBinding -
      values to be added into the TriggerBinding manifest except default ones    What
      is important to know is that any key defined in apps[PROJECT].components[NAME].triggerBinding
      would be added as is   into the generated triggerbinding associated with your
      app. However the chart renders some default values based on the values   in
      this values.yaml file:      - application, project, environment, docker_registry,
      kubernetes_repository_ssh_url, kubernetes_branch, kubernetes_repository_kustomize_path,
      source_subpath (for basic components)     - application, project, environment,
      namespace (for wordpress components)     # fill below parameters block only
      for `wordpress` components    - apps[PROJECT].components[NAME].wordpress.imageTag
      - tag of the wordpress image (default: "5.7.2")   - apps[PROJECT].components[NAME].wordpress.repository_ssh_url
      - project''s wordpress repository SSH url (default: null, may be absent if project
      has no wordpress repo)   - apps[PROJECT].components[NAME].wordpress.resources
      - wordpress pod resources params (default: requests.cpu: 100m, requests.memory:
      128Mi)   - apps[PROJECT].components[NAME].wordpress.commonLabels - wordpress
      pod common labels (default: commonLabels.tech_stack: php, commonLabels.application:
      wordpress)   - apps[PROJECT].components[NAME].wordpress.wordpressTablePrefix
      - wordpress DB tables prefix (default: wp_)   - apps[PROJECT].components[NAME].wordpress.existingSecret
      - name of existing in kubernetes secret with wp admin auth info (default: "<project_name>-<component_name>-<env>",     i.e.
      "taco-wordpress-dev")   - apps[PROJECT].components[NAME].wordpress.updateStrategy
      - strategy that should be used for wordpress pod update (default: updateStrategy.type:
      RollingUpdate,     updateStrategy.rollingUpdate.maxSurge: 0%, updateStrategy.rollingUpdate.maxUnavailable:
      100%, i.e. stop old pod and then create a new one)   - apps[PROJECT].components[NAME].wordpress.smtp.host
      - SMTP host for sending emails (default: mailhog.mailhog.svc.cluster.local)   -
      apps[PROJECT].components[NAME].wordpress.smtp.port - SMTP port for sending emails
      (default: 1025)   - apps[PROJECT].components[NAME].wordpress.smtp.user - SMTP
      user for sending emails (default: <project_name>, i.e. taco)   - apps[PROJECT].components[NAME].wordpress.smtp.password
      - SMTP password for sending emails (default: anypassword)   - apps[PROJECT].components[NAME].wordpress.nodeSelector
      - wordpress pod node selector params (default: nodeSelector.tech_stack: php,
      nodeSelector.pvc: "true")   - apps[PROJECT].components[NAME].wordpress.podSecurityContext
      - wordpress pod''s security context params (default: podSecurityContext.enabled:
      true, podSecurityContext.fsGroup: 1000)   - apps[PROJECT].components[NAME].wordpress.containerSecurityContext
      - wordpress pod container''s security context params (default: containerSecurityContext.enabled:
      true,     containerSecurityContext.runAsUser: 1000)   - apps[PROJECT].components[NAME].wordpress.ci
      - boolean flag which defines whether wordpress project has ci/cd or not (default:
      true)   - apps[PROJECT].components[NAME].wordpress.extraInitContainers - extra
      ci/cd init containers if needed, enabled only if wordpress component has `ci`
      flag enabled (default: null)   - apps[PROJECT].components[NAME].wordpress.extraVolumesSshKeySecret
      - name of a secret with wordpress repository SSH url (default: "<project_name>-<component_name>-deploy-key",     i.e.
      "taco-wordpress-deploy-key")   - apps[PROJECT].components[NAME].wordpress.extraVolumes
      - extra volumes that might be needed to wordpress pod (default: null)   - apps[PROJECT].components[NAME].wordpress.ingress.hostname
      - wordpress ingress hostname (default: "<project_name>.saritasa.rocks", i.e.
      "taco.saritasa.rocks")   - apps[PROJECT].components[NAME].wordpress.ingress.annotations
      - wordpress ingress annotations (default: kubernetes.io/ingress.class: "nginx",
      cert-manager.io/cluster-issuer: "letsencrypt-prod",     nginx.ingress.kubernetes.io/proxy-body-size:
      100m, nginx.ingress.kubernetes.io/proxy-connect-timeout: "300", nginx.ingress.kubernetes.io/proxy-next-upstream-timeout:
      "300",     nginx.ingress.kubernetes.io/auth-type: basic, nginx.ingress.kubernetes.io/auth-secret:
      <ingress.authSecret>, nginx.ingress.kubernetes.io/auth-realm: "Authentication
      Required",     nginx.ingress.kubernetes.io/server-snippet: |-,   add_header
      X-Robots-Tag "noindex, nofollow, nosnippet, noarchive")   - apps[PROJECT].components[NAME].wordpress.ingress.authSecret
      - name of kubernetes secret that should be used in ingress for basic auth (default:
      "<project_name>-<compinent_name>-<env>-basic-auth",     i.e. "taco-wordpress-dev-basic-auth")   -
      apps[PROJECT].components[NAME].wordpress.ingress.extraHosts - list of extra
      hosts that may be defined in ingress (default: null)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.host
      - wordpress DB host (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.user
      - wordpress DB user (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.existingSecret
      - name of existing in kubernetes secret with DB user password (required)   -
      apps[PROJECT].components[NAME].wordpress.externalDatabase.database - wordpress
      DB name (required)   - apps[PROJECT].components[NAME].wordpress.externalDatabase.port
      - wordpress DB port (default: 3306)   - apps[PROJECT].components[NAME].wordpress.wordpressExtraConfigContent
      - wordpress extra configs if needed (default: null)   - apps[PROJECT].components[NAME].wordpress.extraEnvVars
      - wordpress extra env vars if needed (default: null)    Example of values with
      extra `eventlistener` and `extraBuildConfigParams` in component:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           gitBranchPrefixes:             -
      staging           storageClassName: gp2           aws:             region: "us-west-2"             dns:
      staging.site.com           defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com           argocd:             server:
      deploy.staging.site.com           eventlistener:             enableWebhookSecret:
      true           apps:             - project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: prod               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.site.com/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack                   applicationURL: https://api.site.com                   eventlistener:                     template:
      buildpack-backend-build-pipeline-trigger-template                   extraBuildConfigParams:
      # what additional K/V pairs you want to add into the build-pipeline-config configmap                     KEY:
      value                   triggerBinding:                     - name: docker_registry_repository                       value:
      XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/backend                     - name:
      buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/runner:v1                 -
      name: frontend                   repository: xxx-frontend                   pipeline:
      buildpack                   applicationURL: https://site.com                   eventlistener:                     enableWebhookSecret:
      false                     filter: (body.ref.startsWith(''refs/heads/develop'')
      || body.ref.startsWith(''refs/heads/release/''))                     template:
      buildpack-frontend-build-pipeline-trigger-template                     extraOverlays:
      []                     # - key: truncated_sha                     #   expression:
      "body.head_commit.id.truncate(7)"                     eventTypes: ["pull_request",
      "push"]                   extraBuildConfigParams: {}                   triggerBinding:                     -
      name: docker_registry_repository                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/frontend                     -
      name: buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web            # make
      sure PVCs are bound after the chart is synced           # by temporarily mount
      them into short-live job.           runPostInstallMountPvcJob: false        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true    ```    Example of
      old application from `saritasa-clients` repo, which has no separate `kubernetes`
      repository. Here we replace `apps[PROJECT].kubernetesRepository` block with   `apps[PROJECT].argocd.sourceRepos`
      and `apps[PROJECT].components[NAME].argocd` block, also it is required to set
      `apps[PROJECT].components[NAME].tektonKubernetesRepoDeployKeyName`   in such
      a case to use correct secret with deploy key as far as there is no kubernetes
      repo that is used by default.    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      git@github.com:saritasa-nest/xxx-backend.git                   - git@github.com:saritasa-nest/xxx-frontend.git               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: backend                   repository:
      xxx-backend                   pipeline: buildpack-django-build-pipeline                   applicationURL:
      https://api.xxx.site.url                   argocd:                     source:                       path:
      .kubernetes/manifests/dev                       repoUrl: git@github.com:saritasa-nest/xxx-backend.git                       targetRevision:
      develop                   eventlistener:                     template: buildpack-django-build-pipeline-trigger-template                   tektonKubernetesRepoDeployKeyName:
      xxx-backend-deploy-key                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1                 -
      name: frontend                   repository: xxx-frontend                   pipeline:
      buildpack-frontend-build-pipeline                   applicationURL: https://xxx.site.url                   argocd:                     source:                       path:
      .kubernetes/manifests/dev                       repoUrl: git@github.com:saritasa-nest/xxx-frontend.git                       targetRevision:
      develop                   eventlistener:                     template: buildpack-frontend-build-pipeline-trigger-template                   tektonKubernetesRepoDeployKeyName:
      xxx-frontend-deploy-key                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/frontend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Example with
      creating an ArgoCD project and application with its custom `environment` (case
      when in common `staging` environment we need to create for some reason project
      with   `dev` environment). Here is added an extra `apps[PROJECT].environment`
      param, which overrides default `environment` in helm values for this project,
      and   `apps[PROJECT].components[NAME].eventlistener.gitWebhookBranches` param,
      which defines that ci/cd should be trigger on push to `develop` branch.    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack-django-build-pipeline                   applicationURL: https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Also there might
      a situation that you would like to provision custom utility ArgoCD Application
      in argo-cd from project''s kubernetes repo (for example VP project provisions   like
      this `jitsi` application). To reach this you might need to add an extra destination
      namespace to ArgoCD Project, you should use   `apps[PROJECT].argocd.extraDestinationNamespaces[]`
      param for that like in below example.    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx-dev               environment: dev               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx-dev                 extraDestinationNamespaces:                   -
      argo-cd               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack-django-build-pipeline                   applicationURL: https://xxx.site.url                   eventlistener:                     template:
      buildpack-django-build-pipeline-trigger-template                     gitWebhookBranches:                       -
      develop                   triggerBinding:                     - name: docker_registry_repository                       value:
      xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/backend                     - name:
      buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/google/runner:v1        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Simple wordpress
      application example filled by default:    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: wordpress                   repository:
      xxx-wordpress                   pipeline: wordpress-build-pipeline                   applicationURL:
      https://xxx.site.url                   wordpress:                     repository_ssh_url:
      git@github.com:saritasa-nest/xxx-wordpress.git                     externalDatabase:                       host:
      xxx.xxx.us-west-2.rds.amazonaws.com                       user: xxx-wordpress-user-dev                       existingSecret:
      xxx-wordpress-dev-externaldb                       database: xxx-wordpress-dev                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    Simple wordpress
      application example filled by default, but without ci/cd:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci                components:                 - name: wordpress                   repository:
      xxx-wordpress                   pipeline: wordpress-build-pipeline                   applicationURL:
      https://xxx.site.url                   wordpress:                     ci: false                     externalDatabase:                       host:
      xxx.xxx.us-west-2.rds.amazonaws.com                       user: xxx-wordpress-user-dev                       existingSecret:
      xxx-wordpress-dev-externaldb                       database: xxx-wordpress-dev                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ```    More difficult
      example of project containing `wordpress` and `frontend` component. Also defined
      for example all extra wordpress params that could be set:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: xxx                 sourceRepos:                   -
      https://charts.bitnami.com/bitnami                   - git@github.com:saritasa-nest/xxx-kubernetes-aws.git               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.saritasa.rocks/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: wordpress                   repository: xxx-wordpress                   pipeline:
      wordpress-build-pipeline                   applicationURL: https://xxx.site.url                   wordpress:                     imageTag:
      "5.8.1"                     repository_ssh_url: "git@github.com:saritasa-nest/xxx-wordpress.git"                     resources:                       requests:                         memory:
      512Mi                         cpu: 100m                     commonLabels:                       tech_stack:
      php                       application: wordpress                     wordpressTablePrefix:
      "qbf_"                     existingSecret: xxx-wordpress                     updateStrategy:                       type:
      RollingUpdate                       rollingUpdate:                         maxSurge:
      25%                         maxUnavailable: 25%                     smtp:                       host:
      mysmtp.site.url                       port: 1010                       user:
      myuser                       password: mypassword                     nodeSelector:                       tech_stack:
      php                       pvc: "true"                     podSecurityContext:                       enabled:
      true                       fsGroup: 1001                     containerSecurityContext:                       enabled:
      true                       runAsUser: 1001                     ci: true                     extraInitContainers:                       -
      name: build-frontend                         image: node:14                         imagePullPolicy:
      Always                         command:                           - bash                           -
      -c                           - |                             git -c core.sshCommand="ssh
      -i ~/.ssh/id_rsa" clone git@github.com:saritasa-nest/xxx.git -b develop ~/xxx                             cd
      ~/xxx                             npm install                             npm
      run build:embedded-questionnaire                             cp -Rf $(pwd)/dist/*
      /bitnami/wordpress/wp-content/                             echo "Copied built
      files into /bitnami/wordpress/wp-content/"                             ls -la
      /bitnami/wordpress/wp-content/                             echo "Done BUILD
      FRONTEND"                         volumeMounts:                         - mountPath:
      /bitnami/wordpress                           name: wordpress-data                           subPath:
      wordpress                         - mountPath: /home/node/.ssh/id_rsa                           name:
      xxx-ssh-key                           subPath: ssh-privatekey                         -
      mountPath: /home/node/.ssh/known_hosts                           name: github-known-hosts                           subPath:
      config.ssh                         securityContext:                           runAsNonRoot:
      true                           runAsUser: 1000                           allowPrivilegeEscalation:
      false                     extraVolumesSshKeySecret: xxx-wordpress-deploy-key                     extraVolumes:                     -
      name: xxx-ssh-key                       secret:                         secretName:
      xxx-deploy-key                     ingress:                       hostname:
      test.xxx.site.url                       annotations:                         kubernetes.io/ingress.class:
      "nginx"                         cert-manager.io/cluster-issuer: "letsencrypt-prod"                         nginx.ingress.kubernetes.io/proxy-body-size:
      100m                         nginx.ingress.kubernetes.io/client-max-body-size:
      100m                         nginx.ingress.kubernetes.io/server-snippet: |-                           add_header
      X-Robots-Tag "noindex, nofollow, nosnippet, noarchive";                         nginx.ingress.kubernetes.io/whitelist-source-range:
      |                           35.85.92.224/32,                           100.21.244.185/32                       extraHosts:                         -
      name: test.xxx.site.url                           path: /wp-admin                     externalDatabase:                       host:
      "xxx.xxx.us-west-2.rds.amazonaws.com"                       user: "xxx-wp-user-dev"                       existingSecret:
      "xxx-wordpress-dev-externaldb"                       database: "xxx-wp-dev"                     wordpressExtraConfigContent:
      |                       @ini_set(''WP_MEMORY_LIMIT'', ''512M'');                       @ini_set(''ALLOW_UNFILTERED_UPLOADS'',
      true);                     extraEnvVars:                       KEY: VALUE                   eventlistener:                     template:
      wordpress-build-pipeline-trigger-template                  - name: frontend                   repository:
      xxx-frontend                   pipeline: buildpack-frontend-build-pipeline                   applicationURL:
      https://app.xxx.site.url                   eventlistener:                     template:
      buildpack-frontend-build-pipeline-trigger-template                   triggerBinding:                     -
      name: docker_registry_repository                       value: xxx.dkr.ecr.us-west-2.amazonaws.com/xxx/frontend                     -
      name: buildpack_builder_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: public.ecr.aws/saritasa/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.16"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ``` '
    digest: fb57c63fe939db457850bf809e98244e4c9f64fc4a7b776f41747a5f647aaf89
    maintainers:
    - email: nospam@saritasa.com
      name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-apps
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-apps-0.1.17/saritasa-tekton-apps-0.1.17.tgz
    version: 0.1.17
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2022-03-04T07:54:23.706224365Z"
    description: 'A Helm chart for tekton apps (rbac, eventlistener)  Implements:
      - dynamic records for eventlistener - PVCs - RBAC - configmaps for each app
      - triggerbindings for each app - kubernetes job to make sure the PVCs are bound
      and argocd marks the app as healthy - argocd project for each app - argocd application
      for each app component  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then declare dynamic list of projects (and associated components of that
      project like backend, api, frontend, etc) that would be dynamically added into
      the tekton''s eventlistener manifest.  Each component should be a separate git
      repository.  ```yaml --- apiVersion: argoproj.io/v1alpha1 kind: Application
      metadata:   name: tekton-apps   namespace: argo-cd   finalizers:   - resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "41" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-apps     helm:       values: |         environment: staging          gitBranchPrefixes:           -
      staging          storageClassName: gp2          aws:           region: "us-west-2"           dns:
      staging.site.com          defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com          argocd:           server:
      deploy.staging.site.com          eventlistener:           enableWebhookSecret:
      true          apps:           - project: vp             enabled: true             argocd:               labels:                 created-by:
      xxx                 ops-main: xxx                 ops-secondary: xxx                 pm:
      xxx                 tm: xxx               namespace: prod             mailList:
      vp@site.com             devopsMailList: devops+vp@site.com             jiraURL:
      https://site.atlassian.net/browse/vp             tektonURL: https://tekton.staging.site.com/#/namespaces/ci/pipelineruns             slack:
      client-vp-ci             kubernetesRepository:               name: vp-kubernetes-aws               branch:
      main               url: git@github.com:org-name/vp-kubernetes-aws.git              components:               -
      name: backend                 repository: vp-backend                 pipeline:
      buildpack-django-build-pipeline                 applicationURL: https://api.staging.site.com                 eventlistener:                   template:
      buildpack-django-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/backend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/builder:v1                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/runner:v1                -
      name: frontend                 repository: vp-frontend                 pipeline:
      buildpack-frontend-build-pipeline                 applicationURL: https://staging.site.com                 eventlistener:                   template:
      buildpack-frontend-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/frontend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/builder:full                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/runner:full                   -
      name: source_subpath                     value: dist/web          # make sure
      PVCs are bound after the chart is synced         # by temporarily mount them
      into short-live job.         runPostInstallMountPvcJob: false      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.14"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true    ```    What is important to know is that any key defined
      in apps[PROJECT].components[NAME].triggerBinding would be added as is   into
      the generated triggerbinding associated with your app. However the chart renders
      some default values - such as   application, environment, docker_registry based
      on the values in this values.yaml file.     - apps[PROJECT].components[NAME].repository
      - the name of the repository containing the code   - apps[PROJECT].components[NAME].pipeline
      - the name of the pipeline building the code in the repository above   - apps[PROJECT].components[NAME].eventlistener.template
      - the name of the trigger template for the component to be used   - apps[PROJECT].components[NAME].eventlistener.enableWebhookSecret
      - should you enable the git web hook for this particular app/component in the
      eventlistener configuration   - apps[PROJECT].components[NAME].eventlistener.filter
      - custom filter for the component of the eventlistener   - apps[PROJECT].components[NAME].eventlistener.extraOverlays
      - extra overlays to be added into the eventlistener for the component   - apps[PROJECT].components[NAME].eventlistener.eventTypes
      - github event types to trigger the ci/cd   - apps[PROJECT].components[NAME].extraBuildConfigParams
      - additional key/values to be added into `build-pipeline-config configmap` ConfigMap
      associated with the app   - apps[PROJECT].components[NAME].triggerBinding -
      values to be added into the TriggerBinding manifest    an example of argocd
      app with the additional params above:    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging            gitBranchPrefixes:             -
      staging            storageClassName: gp2            aws:             region:
      "us-west-2"             dns: staging.site.com            defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com            argocd:             server:
      deploy.staging.site.com            eventlistener:             enableWebhookSecret:
      true            apps:             - project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: prod               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.site.com/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack                   applicationURL: https://api.site.com                   eventlistener:                     template:
      buildpack-backend-build-pipeline-trigger-template                   extraBuildConfigParams:
      # what additional K/V pairs you want to add into the build-pipeline-config configmap                     KEY:
      value                   triggerBinding:                     - name: docker_registry_repository                       value:
      XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/backend                     - name:
      buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/runner:v1                  -
      name: frontend                   repository: xxx-frontend                   pipeline:
      buildpack                   applicationURL: https://site.com                   eventlistener:                     enableWebhookSecret:
      false                     filter: (body.ref.startsWith(''refs/heads/develop'')
      || body.ref.startsWith(''refs/heads/release/''))                     template:
      buildpack-frontend-build-pipeline-trigger-template                     extraOverlays:
      []                     # - key: truncated_sha                     #   expression:
      "body.head_commit.id.truncate(7)"                     eventTypes: ["pull_request",
      "push"]                   extraBuildConfigParams: {}                   triggerBinding:                     -
      name: docker_registry_repository                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/frontend                     -
      name: buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web            # make
      sure PVCs are bound after the chart is synced           # by temporarily mount
      them into short-live job.           runPostInstallMountPvcJob: false        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.14"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true    ```    This chart
      also has flexible implementation to generate ArgoCD Project and Application
      manifests. There are below additional   parameters, which allow you to override
      default helm chart generation behavior.    Project extra vars    - apps[PROJECT].argocd.syncWave
      - set custom Project sync wave (default: "200")   - apps[PROJECT].argocd.sourceRepos[]
      - set custom Project source repositories as list of strings     (default: [<apps[PROJECT].kubernetesRepository.url>])    Application
      extra vars    - apps[PROJECT].components[NAME].argocd.appName - set custom Application
      name for the component     (default: "<apps[PROJECT].project>-<apps[PROJECT].components[NAME].name>-<environment>")   -
      apps[PROJECT].components[NAME].argocd.syncWave - set custom Application sync
      wave (default: "210")   - apps[PROJECT].components[NAME].argocd.source.path
      - set custom Application source path     (default: "apps/<apps[PROJECT].components[NAME].name>/manifests/<environment>")   -
      apps[PROJECT].components[NAME].argocd.source.repoUrl - set custom Application
      source repository url     (default: "<apps[PROJECT].kubernetesRepository.url>")   -
      apps[PROJECT].components[NAME].argocd.source.targetRevision - set custom Application
      source     repository target revision - branch or tag (default: "<apps[PROJECT].kubernetesRepository.branch>")    Example
      of helm chart with all extra parameters in `apps` section:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: prod                 syncWave:
      "200"                 sourceRepos:                   - git@github.com:saritasa-nest/custom-repo-1.git                   -
      git@github.com:saritasa-nest/custom-repo-2.git               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.site.com/#/namespaces/ci/pipelineruns               slack: client-xxx-ci               kubernetesRepository:                 name:
      xxx-kubernetes-aws                 branch: main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   argocd:                     appName: custom-backend-app-name                     syncWave:
      "210"                     source:                       path: "custom/dir"                       repoUrl:
      git@github.com:saritasa-nest/custom-repo-1.git                       targetRevision:
      custom-v1                   repository: xxx-backend                   pipeline:
      buildpack                   applicationURL: https://api.site.com                   eventlistener:                     template:
      buildpack-backend-build-pipeline-trigger-template                   extraBuildConfigParams:
      # what additional K/V pairs you want to add into the build-pipeline-config configmap                     KEY:
      value                   triggerBinding:                     - name: docker_registry_repository                       value:
      XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/backend                     - name:
      buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/runner:v1                  -
      name: frontend                   argocd:                     appName: custom-frontend-app-name                     syncWave:
      "210"                     source:                       path: "custom/dir"                       repoUrl:
      git@github.com:saritasa-nest/custom-repo-1.git                       targetRevision:
      custom-v1                   repository: xxx-frontend                   pipeline:
      buildpack                   applicationURL: https://site.com                   eventlistener:                     enableWebhookSecret:
      false                     filter: (body.ref.startsWith(''refs/heads/develop'')
      || body.ref.startsWith(''refs/heads/release/''))                     template:
      buildpack-frontend-build-pipeline-trigger-template                     extraOverlays:
      []                     # - key: truncated_sha                     #   expression:
      "body.head_commit.id.truncate(7)"                     eventTypes: ["pull_request",
      "push"]                   extraBuildConfigParams: {}                   triggerBinding:                     -
      name: docker_registry_repository                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/frontend                     -
      name: buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.14"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ``` '
    digest: 0e810386c36b779318e9b105146b87f22965f142f20ea591873b2dcb03e79fc6
    maintainers:
    - email: nospam@saritasa.com
      name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-apps
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-apps-0.1.16/saritasa-tekton-apps-0.1.16.tgz
    version: 0.1.16
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2021-12-24T03:44:09.415375854Z"
    description: 'A Helm chart for tekton apps (rbac, eventlistener)  Implements:
      - dynamic records for eventlistener - PVCs - RBAC - configmaps for each app
      - triggerbindings for each app - kubernetes job to make sure the PVCs are bound
      and argocd marks the app as healthy  ## `example usage with argocd`  Install
      the chart:  ``` helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then declare dynamic list of projects (and associated components of that
      project like backend, api, frontend, etc) that would be dynamically added into
      the tekton''s eventlistener manifest.  Each component should be a separate git
      repository.  ```yaml --- apiVersion: argoproj.io/v1alpha1 kind: Application
      metadata:   name: tekton-apps   namespace: argo-cd   finalizers:   - resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "41" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-apps     helm:       values: |         environment: staging          gitBranchPrefixes:           -
      staging          storageClassName: gp2          aws:           region: "us-west-2"           dns:
      staging.site.com          defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com          argocd:           server:
      deploy.staging.site.com          eventlistener:           enableWebhookSecret:
      true          apps:           - project: vp             enabled: true             argocd:               labels:                 created-by:
      xxx                 ops-main: xxx                 ops-secondary: xxx                 pm:
      xxx                 tm: xxx               namespace: prod               sourceRepos:                  -
      git@github.com:org-name/xxx-kubernetes-aws.git             mailList: vp@site.com             devopsMailList:
      devops+vp@site.com             jiraURL: https://site.atlassian.net/browse/vp             tektonURL:
      https://tekton.staging.site.com/#/namespaces/ci/pipelineruns             slack:
      client-vp-ci             kubernetesRepository:               name: vp-kubernetes-aws               branch:
      main               url: git@github.com:org-name/vp-kubernetes-aws.git              components:               -
      name: backend                 argocd:                   appName: xxx-backend-prod                   syncWave:
      210                   source:                     path: apps/backend/manifests/prod                     #
      if these below lines are simmilar to project''s `kubernetesRepository`                     #
      settings - you can omit them and they would be automatically taken                     #
      from project.kubernetesRepository                     repoUrl: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                     targetRevision:
      main                 repository: vp-backend                 pipeline: buildpack-django-build-pipeline                 applicationURL:
      https://api.staging.site.com                 eventlistener:                   template:
      buildpack-django-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/backend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/builder:v1                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/runner:v1                -
      name: frontend                 argocd:                   appName: xxx-frontend-prod                   syncWave:
      210                   source:                     path: apps/frontend/manifests/prod                     #
      if these below lines are simmilar to project''s `kubernetesRepository`                     #
      settings - you can omit them and they would be automatically taken                     #
      from project.kubernetesRepository                     repoUrl: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                     targetRevision:
      main                 repository: vp-frontend                 pipeline: buildpack-frontend-build-pipeline                 applicationURL:
      https://staging.site.com                 eventlistener:                   template:
      buildpack-frontend-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/frontend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/builder:full                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/runner:full                   -
      name: source_subpath                     value: dist/web          # make sure
      PVCs are bound after the chart is synced         # by temporarily mount them
      into short-live job.         runPostInstallMountPvcJob: false      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.14"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true    ```    What is important to know is that any key defined
      in apps[PROJECT].components[NAME].triggerBinding would be added as is   into
      the generated triggerbinding associated with your app. However the chart renders
      some default values - such as   application, environment, docker_registry based
      on the values in this values.yaml file.     - apps[PROJECT].components[NAME].repository
      - the name of the repository containing the code   - apps[PROJECT].components[NAME].pipeline
      - the name of the pipeline building the code in the repository above   - apps[PROJECT].components[NAME].eventlistener.template
      - the name of the trigger template for the component to be used   - apps[PROJECT].components[NAME].eventlistener.enableWebhookSecret
      - should you enable the git web hook for this particular app/component in the
      eventlistener configuration   - apps[PROJECT].components[NAME].eventlistener.filter
      - custom filter for the component of the eventlistener   - apps[PROJECT].components[NAME].eventlistener.extraOverlays
      - extra overlays to be added into the eventlistener for the component   - apps[PROJECT].components[NAME].eventlistener.eventTypes
      - github event types to trigger the ci/cd   - apps[PROJECT].components[NAME].extraBuildConfigParams
      - additional key/values to be added into `build-pipeline-config configmap` ConfigMap
      associated with the app   - apps[PROJECT].components[NAME].triggerBinding -
      values to be added into the TriggerBinding manifest    an example of argocd
      app with the additional params above:    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging            gitBranchPrefixes:             -
      staging            storageClassName: gp2            aws:             region:
      "us-west-2"             dns: staging.site.com            defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com            argocd:             server:
      deploy.staging.site.com            eventlistener:             enableWebhookSecret:
      true            apps:             - project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: prod                 sourceRepos:                    -
      git@github.com:org-name/xxx-kubernetes-aws.git               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.site.com/#/namespaces/ci/pipelineruns               slack: client-xxx-ci               kubernetesRepository:                 name:
      xxx-kubernetes-aws                 branch: main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   argocd:                     appName: xxx-backend-prod                     syncWave:
      210                     source:                       path: apps/backend/manifests/prod                       #
      if these below lines are simmilar to project''s `kubernetesRepository`                       #
      settings - you can omit them and they would be automatically taken                       #
      from project.kubernetesRepository                       repoUrl: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                       targetRevision:
      main                   repository: xxx-backend                   pipeline: buildpack                   applicationURL:
      https://api.site.com                   eventlistener:                     template:
      buildpack-backend-build-pipeline-trigger-template                   extraBuildConfigParams:
      # what additional K/V pairs you want to add into the build-pipeline-config configmap                     KEY:
      value                   triggerBinding:                     - name: docker_registry_repository                       value:
      XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/backend                     - name:
      buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/runner:v1                  -
      name: frontend                   argocd:                     appName: xxx-frontend-prod                     syncWave:
      210                     source:                       path: apps/frontend/manifests/prod                       #
      if these below lines are simmilar to project''s `kubernetesRepository`                       #
      settings - you can omit them and they would be automatically taken                       #
      from project.kubernetesRepository                       repoUrl: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                       targetRevision:
      main                   repository: xxx-frontend                   pipeline:
      buildpack                   applicationURL: https://site.com                   eventlistener:                     enableWebhookSecret:
      false                     filter: (body.ref.startsWith(''refs/heads/develop'')
      || body.ref.startsWith(''refs/heads/release/''))                     template:
      buildpack-frontend-build-pipeline-trigger-template                     extraOverlays:
      []                     # - key: truncated_sha                     #   expression:
      "body.head_commit.id.truncate(7)"                     eventTypes: ["pull_request",
      "push"]                   extraBuildConfigParams: {}                   triggerBinding:                     -
      name: docker_registry_repository                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/frontend                     -
      name: buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web            # make
      sure PVCs are bound after the chart is synced           # by temporarily mount
      them into short-live job.           runPostInstallMountPvcJob: false        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.14"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true    ``` '
    digest: 7e9248e4cb902a8837922d5c2660d77a526ab68479537eabba7216b9ae90e69a
    maintainers:
    - email: nospam@saritasa.com
      name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-apps
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-apps-0.1.15/saritasa-tekton-apps-0.1.15.tgz
    version: 0.1.15
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2021-11-03T03:13:37.650014817Z"
    description: 'A Helm chart for tekton apps (rbac, eventlistener)  Implements:
      - dynamic records for eventlistener - PVCs - RBAC - configmaps for each app
      - triggerbindings for each app - kubernetes job to make sure the PVCs are bound
      and argocd marks the app as healthy  ## `example usage with argocd`  Install
      the chart:  ``` helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then declare dynamic list of projects (and associated components of that
      project like backend, api, frontend, etc) that would be dynamically added into
      the tekton''s eventlistener manifest.  Each component should be a separate git
      repository.  ```yaml --- apiVersion: argoproj.io/v1alpha1 kind: Application
      metadata:   name: tekton-apps   namespace: argo-cd   finalizers:   - resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "41" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-apps     helm:       values: |         environment: staging          gitBranchPrefixes:           -
      staging          storageClassName: gp2          aws:           region: "us-west-2"           dns:
      staging.site.com          defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com          argocd:           server:
      deploy.staging.site.com          eventlistener:           enableWebhookSecret:
      true          apps:           - project: vp             enabled: true             mailList:
      vp@site.com             devopsMailList: devops+vp@site.com             jiraURL:
      https://site.atlassian.net/browse/vp             tektonURL: https://tekton.staging.site.com/#/namespaces/ci/pipelineruns             slack:
      client-vp-ci             kubernetesRepository:               name: vp-kubernetes-aws               branch:
      main               url: git@github.com:org-name/vp-kubernetes-aws.git              components:               -
      name: backend                 repository: vp-backend                 pipeline:
      buildpack-django-build-pipeline                 applicationURL: https://api.staging.site.com                 eventlistener:                   template:
      buildpack-django-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/backend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/builder:v1                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/runner:v1                -
      name: frontend                 repository: vp-frontend                 pipeline:
      buildpack-frontend-build-pipeline                 applicationURL: https://staging.site.com                 eventlistener:                   template:
      buildpack-frontend-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/frontend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/builder:full                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/runner:full                   -
      name: source_subpath                     value: dist/web          # make sure
      PVCs are bound after the chart is synced         # by temporarily mount them
      into short-live job.         runPostInstallMountPvcJob: false      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.14"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true    ```    What is important to know is that any key defined
      in apps[PROJECT].components[NAME].triggerBinding would be added as is   into
      the generated triggerbinding associated with your app. However the chart renders
      some default values - such as   application, environment, docker_registry based
      on the values in this values.yaml file.     - apps[PROJECT].components[NAME].repository
      - the name of the repository containing the code   - apps[PROJECT].components[NAME].pipeline
      - the name of the pipeline building the code in the repository above   - apps[PROJECT].components[NAME].eventlistener.template
      - the name of the trigger template for the component to be used   - apps[PROJECT].components[NAME].eventlistener.enableWebhookSecret
      - should you enable the git web hook for this particular app/component in the
      eventlistener configuration   - apps[PROJECT].components[NAME].eventlistener.filter
      - custom filter for the component of the eventlistener   - apps[PROJECT].components[NAME].eventlistener.extraOverlays
      - extra overlays to be added into the eventlistener for the component   - apps[PROJECT].components[NAME].eventlistener.eventTypes
      - github event types to trigger the ci/cd   - apps[PROJECT].components[NAME].extraBuildConfigParams
      - additional key/values to be added into `build-pipeline-config configmap` ConfigMap
      associated with the app   - apps[PROJECT].components[NAME].triggerBinding -
      values to be added into the TriggerBinding manifest    an example of argocd
      app with the additional params above:    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging            gitBranchPrefixes:             -
      staging            storageClassName: gp2            aws:             region:
      "us-west-2"             dns: staging.site.com            defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com            argocd:             server:
      deploy.staging.site.com            eventlistener:             enableWebhookSecret:
      true            apps:             - project: xxx               enabled: true               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.site.com/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack                   applicationURL: https://api.site.com                   eventlistener:                     template:
      buildpack-backend-build-pipeline-trigger-template                   extraBuildConfigParams:
      # what additional K/V pairs you want to add into the build-pipeline-config configmap                     KEY:
      value                   triggerBinding:                     - name: docker_registry_repository                       value:
      XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/backend                     - name:
      buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/runner:v1                  -
      name: frontend                   repository: xxx-frontend                   pipeline:
      buildpack                   applicationURL: https://site.com                   eventlistener:                     enableWebhookSecret:
      false                     filter: (body.ref.startsWith(''refs/heads/develop'')
      || body.ref.startsWith(''refs/heads/release/''))                     template:
      buildpack-frontend-build-pipeline-trigger-template                     extraOverlays:
      []                     # - key: truncated_sha                     #   expression:
      "body.head_commit.id.truncate(7)"                     eventTypes: ["pull_request",
      "push"]                   extraBuildConfigParams: {}                   triggerBinding:                     -
      name: docker_registry_repository                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/frontend                     -
      name: buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web            # make
      sure PVCs are bound after the chart is synced           # by temporarily mount
      them into short-live job.           runPostInstallMountPvcJob: false        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.14"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true    ``` '
    digest: 1c9b2ee923b7b6f4221a7078cfc8cbd3ea4860cabdb6e9574b4df96f579b08c7
    maintainers:
    - email: nospam@saritasa.com
      name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-apps
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-apps-0.1.14/saritasa-tekton-apps-0.1.14.tgz
    version: 0.1.14
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2021-10-31T21:04:22.310225804Z"
    description: A Helm chart for tekton apps (rbac, eventlistener)
    digest: 2df5754f5deb3a0d24f27a3946bb43c1a8ff9be417061dae33e08119e06eb39b
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-apps
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-apps-0.1.12/saritasa-tekton-apps-0.1.12.tgz
    version: 0.1.12
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2021-10-31T20:20:40.20829655Z"
    description: A Helm chart for tekton apps (rbac, eventlistener)
    digest: 52d60214c8689106149e59aab91c781304e036dec0e9e699a41d6466762605b0
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-apps
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-apps-0.1.11/saritasa-tekton-apps-0.1.11.tgz
    version: 0.1.11
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2021-10-31T20:18:48.728572852Z"
    description: A Helm chart for tekton apps (rbac, eventlistener)
    digest: 8bc34083489083b208758f8f2d1315078efd39b47ee544068485f333e2517bc0
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-apps
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-apps-0.1.10/saritasa-tekton-apps-0.1.10.tgz
    version: 0.1.10
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2021-10-31T19:37:37.364411685Z"
    description: A Helm chart for tekton apps (rbac, eventlistener)
    digest: 55a6f8a3063795ecdae6f20b48a767c949c131ab0484e5a1c12d3ba0aa37744e
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-apps
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-apps-0.1.9/saritasa-tekton-apps-0.1.9.tgz
    version: 0.1.9
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2021-10-31T19:31:41.885854671Z"
    description: A Helm chart for tekton apps (rbac, eventlistener)
    digest: 173e2302c90ac02980afd435a6b12d34eb8f25fccb7175ac652beecc6e394d8c
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-apps
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-apps-0.1.8/saritasa-tekton-apps-0.1.8.tgz
    version: 0.1.8
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2021-10-31T19:26:34.227886705Z"
    description: A Helm chart for tekton apps (rbac, eventlistener)
    digest: 9816100e765033570e5248a69c2aec912807c8a611b08e5292629321dfae056c
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-apps
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-apps-0.1.7/saritasa-tekton-apps-0.1.7.tgz
    version: 0.1.7
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2021-10-31T19:19:44.057647699Z"
    description: A Helm chart for tekton apps (rbac, eventlistener)
    digest: a5a6d7433cabb3da19fed127bbac4f9c756cbceab9bfd47f996a0509172f8f54
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-apps
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-apps-0.1.6/saritasa-tekton-apps-0.1.6.tgz
    version: 0.1.6
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2021-10-31T18:36:24.505475189Z"
    description: A Helm chart for tekton apps (rbac, eventlistener)
    digest: 76f0b466ff8919df8c8f449da073f6868ff64e75688309909d68c4c9a5b7f1cd
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-apps
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-apps-0.1.5/saritasa-tekton-apps-0.1.5.tgz
    version: 0.1.5
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2021-10-31T18:29:37.386536851Z"
    description: A Helm chart for tekton apps (rbac, eventlistener)
    digest: b955db340c1acb711bce83678b4ff661316ac19ce82c76138385eb668c1798dc
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-apps
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-apps-0.1.4/saritasa-tekton-apps-0.1.4.tgz
    version: 0.1.4
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2021-10-31T18:17:24.320799824Z"
    description: A Helm chart for tekton apps (rbac, eventlistener)
    digest: 456e7bc608da24e206d84ffb977d9c7c50d2b19e0e197f5193a7208a99b8bfb5
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-apps
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-apps-0.1.3/saritasa-tekton-apps-0.1.3.tgz
    version: 0.1.3
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2021-10-31T16:24:07.8619512Z"
    description: A Helm chart for tekton apps (rbac, eventlistener)
    digest: 49a55998bb1858c90493ec4c289b2dc33bf1d06acd1e9f09fce943c965bdbed8
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-apps
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-apps-0.1.2/saritasa-tekton-apps-0.1.2.tgz
    version: 0.1.2
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2021-10-30T02:23:39.498952833Z"
    description: A Helm chart for tekton apps (rbac, eventlistener)
    digest: adfeafa1350bf18f1fb1835b085aeb840917b8dc55d28b6e4190e44edf65c28c
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-apps
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-apps-0.1.0/saritasa-tekton-apps-0.1.0.tgz
    version: 0.1.0
  saritasa-tekton-pipelines:
  - apiVersion: v2
    created: "2022-09-21T06:43:07.302967659Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: 'A Helm chart for Tekton Pipelines  Implements: - common tekton tasks
      - common tekton pipelines - common tekton trigger templates - common tekton
      trigger bindings  Implemented pipelines include: - buildpack based pipelines
      based on generator template (php, python, frontend, nodejs, ruby, go) - kaniko
      pipeline - wordpress pipeline  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then if you want to support only frontend and django pipelines based on
      buildpack without any script modifications:  ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-pipelines   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "60" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-pipelines     helm:       values: |         buildpacks:           enabled:
      true           generate:             buildpackFrontendBuildPipeline:               enabled:
      true              buildpackDjangoBuildPipeline:               enabled: true      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ```  If you want to modify the behavior of the build step
      you can easily do that by redefining steps you want to run prior to running
      the `build` step of the associated buildpack pipeline. You can create multiple
      versions of pipelines as a result. Just make sure to give them a different name  an
      example:  ```yaml buildpacks:   enabled: true   generate:     buildpackFrontendBuildPipelineNew:       name:
      buildpack-frontend-build-pipeline-new       enabled: false       buildTaskName:
      buildpack-frontend-new       buildTaskSteps:         - name: hello1           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world1"          - name: hello2           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world2" ```  If you want to
      modify Kaniko build arguments, you can pass `kaniko_extra_args` parameter to
      `kaniko-pipeline`. For example, if you want to pass `BASE_IMAGE` build argument
      value to be used in Dockerfile you can add following line to specific project
      trigger-binding: ```yaml - name: kaniko_extra_args   value: --build-arg=BASE_IMAGE=965067289393.dkr.ecr.us-west-2.amazonaws.com/saritasa/legacy/php:php71-smart-screen-base
      ``` '
    digest: a14d4144a5e275791b94f7b3f2026ce7073c44b99b435b08653079b0c784a206
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.29-dev/saritasa-tekton-pipelines-0.1.29-dev.tgz
    version: 0.1.29-dev
  - apiVersion: v2
    created: "2022-09-23T09:33:45.766063487Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: 'A Helm chart for Tekton Pipelines  Implements: - common tekton tasks
      - common tekton pipelines - common tekton trigger templates - common tekton
      trigger bindings  Implemented pipelines include: - buildpack based pipelines
      based on generator template (php, python, frontend, nodejs, ruby, go) - kaniko
      pipeline - wordpress pipeline  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then if you want to support only frontend and django pipelines based on
      buildpack without any script modifications:  ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-pipelines   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "60" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-pipelines     helm:       values: |         buildpacks:           enabled:
      true           generate:             buildpackFrontendBuildPipeline:               enabled:
      true              buildpackDjangoBuildPipeline:               enabled: true      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ```  If you want to modify the behavior of the build step
      you can easily do that by redefining steps you want to run prior to running
      the `build` step of the associated buildpack pipeline. You can create multiple
      versions of pipelines as a result. Just make sure to give them a different name  an
      example:  ```yaml buildpacks:   enabled: true   generate:     buildpackFrontendBuildPipelineNew:       name:
      buildpack-frontend-build-pipeline-new       enabled: false       buildTaskName:
      buildpack-frontend-new       buildTaskSteps:         - name: hello1           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world1"          - name: hello2           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world2" ```  If you want to
      modify Kaniko build arguments, you can pass `kaniko_extra_args` parameter to
      `kaniko-pipeline`. For example, if you want to pass `BASE_IMAGE` build argument
      value to be used in Dockerfile you can add following line to specific project
      trigger-binding: ```yaml - name: kaniko_extra_args   value: --build-arg=BASE_IMAGE=965067289393.dkr.ecr.us-west-2.amazonaws.com/saritasa/legacy/php:php71-smart-screen-base
      ``` '
    digest: d9eac04282092d3dd86e0773b589ca69f85eeaa6fa2a46175c42f5ebd56959c5
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.28-dev/saritasa-tekton-pipelines-0.1.28-dev.tgz
    version: 0.1.28-dev
  - apiVersion: v2
    created: "2022-09-21T06:01:42.9322823Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: 'A Helm chart for Tekton Pipelines  Implements: - common tekton tasks
      - common tekton pipelines - common tekton trigger templates - common tekton
      trigger bindings  Implemented pipelines include: - buildpack based pipelines
      based on generator template (php, python, frontend, nodejs, ruby, go) - kaniko
      pipeline - wordpress pipeline  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then if you want to support only frontend and django pipelines based on
      buildpack without any script modifications:  ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-pipelines   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "60" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-pipelines     helm:       values: |         buildpacks:           enabled:
      true           generate:             buildpackFrontendBuildPipeline:               enabled:
      true              buildpackDjangoBuildPipeline:               enabled: true      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ```  If you want to modify the behavior of the build step
      you can easily do that by redefining steps you want to run prior to running
      the `build` step of the associated buildpack pipeline. You can create multiple
      versions of pipelines as a result. Just make sure to give them a different name  an
      example:  ```yaml buildpacks:   enabled: true   generate:     buildpackFrontendBuildPipelineNew:       name:
      buildpack-frontend-build-pipeline-new       enabled: false       buildTaskName:
      buildpack-frontend-new       buildTaskSteps:         - name: hello1           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world1"          - name: hello2           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world2" ```  If you want to
      modify Kaniko build arguments, you can pass `kaniko_extra_args` parameter to
      `kaniko-pipeline`. For example, if you want to pass `BASE_IMAGE` build argument
      value to be used in Dockerfile you can add following line to specific project
      trigger-binding: ```yaml - name: kaniko_extra_args   value: --build-arg=BASE_IMAGE=965067289393.dkr.ecr.us-west-2.amazonaws.com/saritasa/legacy/php:php71-smart-screen-base
      ``` '
    digest: 321c783765ae5fb65ea83af47d360df3dd4b7a08427cec3fd1efeeacf2e40507
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.28-dev/saritasa-tekton-pipelines-0.1.28-dev.tgz
    version: 0.1.28-dev
  - apiVersion: v2
    created: "2022-09-21T07:01:29.379049795Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: 'A Helm chart for Tekton Pipelines  Implements: - common tekton tasks
      - common tekton pipelines - common tekton trigger templates - common tekton
      trigger bindings  Implemented pipelines include: - buildpack based pipelines
      based on generator template (php, python, frontend, nodejs, ruby, go) - kaniko
      pipeline - wordpress pipeline  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then if you want to support only frontend and django pipelines based on
      buildpack without any script modifications:  ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-pipelines   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "60" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-pipelines     helm:       values: |         buildpacks:           enabled:
      true           generate:             buildpackFrontendBuildPipeline:               enabled:
      true              buildpackDjangoBuildPipeline:               enabled: true      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ```  If you want to modify the behavior of the build step
      you can easily do that by redefining steps you want to run prior to running
      the `build` step of the associated buildpack pipeline. You can create multiple
      versions of pipelines as a result. Just make sure to give them a different name  an
      example:  ```yaml buildpacks:   enabled: true   generate:     buildpackFrontendBuildPipelineNew:       name:
      buildpack-frontend-build-pipeline-new       enabled: false       buildTaskName:
      buildpack-frontend-new       buildTaskSteps:         - name: hello1           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world1"          - name: hello2           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world2" ```  If you want to
      modify Kaniko build arguments, you can pass `kaniko_extra_args` parameter to
      `kaniko-pipeline`. For example, if you want to pass `BASE_IMAGE` build argument
      value to be used in Dockerfile you can add following line to specific project
      trigger-binding: ```yaml - name: kaniko_extra_args   value: --build-arg=BASE_IMAGE=965067289393.dkr.ecr.us-west-2.amazonaws.com/saritasa/legacy/php:php71-smart-screen-base
      ``` '
    digest: eccd55a74304e26966c2d1338941eca095936752ec22098639c3030c122111b8
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.28-dev/saritasa-tekton-pipelines-0.1.28-dev.tgz
    version: 0.1.28-dev
  - apiVersion: v2
    created: "2022-09-21T07:05:27.693182861Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: 'A Helm chart for Tekton Pipelines  Implements: - common tekton tasks
      - common tekton pipelines - common tekton trigger templates - common tekton
      trigger bindings  Implemented pipelines include: - buildpack based pipelines
      based on generator template (php, python, frontend, nodejs, ruby, go) - kaniko
      pipeline - wordpress pipeline  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then if you want to support only frontend and django pipelines based on
      buildpack without any script modifications:  ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-pipelines   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "60" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-pipelines     helm:       values: |         buildpacks:           enabled:
      true           generate:             buildpackFrontendBuildPipeline:               enabled:
      true              buildpackDjangoBuildPipeline:               enabled: true      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ```  If you want to modify the behavior of the build step
      you can easily do that by redefining steps you want to run prior to running
      the `build` step of the associated buildpack pipeline. You can create multiple
      versions of pipelines as a result. Just make sure to give them a different name  an
      example:  ```yaml buildpacks:   enabled: true   generate:     buildpackFrontendBuildPipelineNew:       name:
      buildpack-frontend-build-pipeline-new       enabled: false       buildTaskName:
      buildpack-frontend-new       buildTaskSteps:         - name: hello1           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world1"          - name: hello2           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world2" ```  If you want to
      modify Kaniko build arguments, you can pass `kaniko_extra_args` parameter to
      `kaniko-pipeline`. For example, if you want to pass `BASE_IMAGE` build argument
      value to be used in Dockerfile you can add following line to specific project
      trigger-binding: ```yaml - name: kaniko_extra_args   value: --build-arg=BASE_IMAGE=965067289393.dkr.ecr.us-west-2.amazonaws.com/saritasa/legacy/php:php71-smart-screen-base
      ``` '
    digest: 0d4f85a6b8ca163b210670178306f09dbaa7f73eb0fcdc368af9f1783c8ef309
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.28-dev/saritasa-tekton-pipelines-0.1.28-dev.tgz
    version: 0.1.28-dev
  - apiVersion: v2
    created: "2022-09-21T07:49:12.05099976Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: 'A Helm chart for Tekton Pipelines  Implements: - common tekton tasks
      - common tekton pipelines - common tekton trigger templates - common tekton
      trigger bindings  Implemented pipelines include: - buildpack based pipelines
      based on generator template (php, python, frontend, nodejs, ruby, go) - kaniko
      pipeline - wordpress pipeline  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then if you want to support only frontend and django pipelines based on
      buildpack without any script modifications:  ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-pipelines   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "60" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-pipelines     helm:       values: |         buildpacks:           enabled:
      true           generate:             buildpackFrontendBuildPipeline:               enabled:
      true              buildpackDjangoBuildPipeline:               enabled: true      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ```  If you want to modify the behavior of the build step
      you can easily do that by redefining steps you want to run prior to running
      the `build` step of the associated buildpack pipeline. You can create multiple
      versions of pipelines as a result. Just make sure to give them a different name  an
      example:  ```yaml buildpacks:   enabled: true   generate:     buildpackFrontendBuildPipelineNew:       name:
      buildpack-frontend-build-pipeline-new       enabled: false       buildTaskName:
      buildpack-frontend-new       buildTaskSteps:         - name: hello1           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world1"          - name: hello2           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world2" ```  If you want to
      modify Kaniko build arguments, you can pass `kaniko_extra_args` parameter to
      `kaniko-pipeline`. For example, if you want to pass `BASE_IMAGE` build argument
      value to be used in Dockerfile you can add following line to specific project
      trigger-binding: ```yaml - name: kaniko_extra_args   value: --build-arg=BASE_IMAGE=965067289393.dkr.ecr.us-west-2.amazonaws.com/saritasa/legacy/php:php71-smart-screen-base
      ``` '
    digest: 9ed224e18b0938db9d66a3900002f4498029e37524238c18299c419a43ccff93
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.28-dev/saritasa-tekton-pipelines-0.1.28-dev.tgz
    version: 0.1.28-dev
  - apiVersion: v2
    created: "2022-09-23T08:01:49.850917738Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: 'A Helm chart for Tekton Pipelines  Implements: - common tekton tasks
      - common tekton pipelines - common tekton trigger templates - common tekton
      trigger bindings  Implemented pipelines include: - buildpack based pipelines
      based on generator template (php, python, frontend, nodejs, ruby, go) - kaniko
      pipeline - wordpress pipeline  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then if you want to support only frontend and django pipelines based on
      buildpack without any script modifications:  ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-pipelines   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "60" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-pipelines     helm:       values: |         buildpacks:           enabled:
      true           generate:             buildpackFrontendBuildPipeline:               enabled:
      true              buildpackDjangoBuildPipeline:               enabled: true      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ```  If you want to modify the behavior of the build step
      you can easily do that by redefining steps you want to run prior to running
      the `build` step of the associated buildpack pipeline. You can create multiple
      versions of pipelines as a result. Just make sure to give them a different name  an
      example:  ```yaml buildpacks:   enabled: true   generate:     buildpackFrontendBuildPipelineNew:       name:
      buildpack-frontend-build-pipeline-new       enabled: false       buildTaskName:
      buildpack-frontend-new       buildTaskSteps:         - name: hello1           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world1"          - name: hello2           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world2" ```  If you want to
      modify Kaniko build arguments, you can pass `kaniko_extra_args` parameter to
      `kaniko-pipeline`. For example, if you want to pass `BASE_IMAGE` build argument
      value to be used in Dockerfile you can add following line to specific project
      trigger-binding: ```yaml - name: kaniko_extra_args   value: --build-arg=BASE_IMAGE=965067289393.dkr.ecr.us-west-2.amazonaws.com/saritasa/legacy/php:php71-smart-screen-base
      ``` '
    digest: 30db02db9737bdf873fdd4acc19cefdfd47afb403d5553762f98600593e6f9a7
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.28-dev/saritasa-tekton-pipelines-0.1.28-dev.tgz
    version: 0.1.28-dev
  - apiVersion: v2
    created: "2022-09-21T06:39:33.136421958Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: 'A Helm chart for Tekton Pipelines  Implements: - common tekton tasks
      - common tekton pipelines - common tekton trigger templates - common tekton
      trigger bindings  Implemented pipelines include: - buildpack based pipelines
      based on generator template (php, python, frontend, nodejs, ruby, go) - kaniko
      pipeline - wordpress pipeline  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then if you want to support only frontend and django pipelines based on
      buildpack without any script modifications:  ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-pipelines   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "60" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-pipelines     helm:       values: |         buildpacks:           enabled:
      true           generate:             buildpackFrontendBuildPipeline:               enabled:
      true              buildpackDjangoBuildPipeline:               enabled: true      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ```  If you want to modify the behavior of the build step
      you can easily do that by redefining steps you want to run prior to running
      the `build` step of the associated buildpack pipeline. You can create multiple
      versions of pipelines as a result. Just make sure to give them a different name  an
      example:  ```yaml buildpacks:   enabled: true   generate:     buildpackFrontendBuildPipelineNew:       name:
      buildpack-frontend-build-pipeline-new       enabled: false       buildTaskName:
      buildpack-frontend-new       buildTaskSteps:         - name: hello1           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world1"          - name: hello2           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world2" ```  If you want to
      modify Kaniko build arguments, you can pass `kaniko_extra_args` parameter to
      `kaniko-pipeline`. For example, if you want to pass `BASE_IMAGE` build argument
      value to be used in Dockerfile you can add following line to specific project
      trigger-binding: ```yaml - name: kaniko_extra_args   value: --build-arg=BASE_IMAGE=965067289393.dkr.ecr.us-west-2.amazonaws.com/saritasa/legacy/php:php71-smart-screen-base
      ``` '
    digest: b0e3bb4ff90a75211cdd83c8b4bceded004c7a64d7eeddc75402a0062f00296c
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.28-dev/saritasa-tekton-pipelines-0.1.28-dev.tgz
    version: 0.1.28-dev
  - apiVersion: v2
    created: "2022-09-21T07:28:17.242758954Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: 'A Helm chart for Tekton Pipelines  Implements: - common tekton tasks
      - common tekton pipelines - common tekton trigger templates - common tekton
      trigger bindings  Implemented pipelines include: - buildpack based pipelines
      based on generator template (php, python, frontend, nodejs, ruby, go) - kaniko
      pipeline - wordpress pipeline  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then if you want to support only frontend and django pipelines based on
      buildpack without any script modifications:  ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-pipelines   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "60" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-pipelines     helm:       values: |         buildpacks:           enabled:
      true           generate:             buildpackFrontendBuildPipeline:               enabled:
      true              buildpackDjangoBuildPipeline:               enabled: true      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ```  If you want to modify the behavior of the build step
      you can easily do that by redefining steps you want to run prior to running
      the `build` step of the associated buildpack pipeline. You can create multiple
      versions of pipelines as a result. Just make sure to give them a different name  an
      example:  ```yaml buildpacks:   enabled: true   generate:     buildpackFrontendBuildPipelineNew:       name:
      buildpack-frontend-build-pipeline-new       enabled: false       buildTaskName:
      buildpack-frontend-new       buildTaskSteps:         - name: hello1           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world1"          - name: hello2           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world2" ```  If you want to
      modify Kaniko build arguments, you can pass `kaniko_extra_args` parameter to
      `kaniko-pipeline`. For example, if you want to pass `BASE_IMAGE` build argument
      value to be used in Dockerfile you can add following line to specific project
      trigger-binding: ```yaml - name: kaniko_extra_args   value: --build-arg=BASE_IMAGE=965067289393.dkr.ecr.us-west-2.amazonaws.com/saritasa/legacy/php:php71-smart-screen-base
      ``` '
    digest: 596a27067f62f75baee5ffac30f7395e3fc6dae731e5a930f78b0a3af69ac47b
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.28-dev/saritasa-tekton-pipelines-0.1.28-dev.tgz
    version: 0.1.28-dev
  - apiVersion: v2
    created: "2022-09-21T07:37:00.926257796Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: 'A Helm chart for Tekton Pipelines  Implements: - common tekton tasks
      - common tekton pipelines - common tekton trigger templates - common tekton
      trigger bindings  Implemented pipelines include: - buildpack based pipelines
      based on generator template (php, python, frontend, nodejs, ruby, go) - kaniko
      pipeline - wordpress pipeline  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then if you want to support only frontend and django pipelines based on
      buildpack without any script modifications:  ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-pipelines   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "60" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-pipelines     helm:       values: |         buildpacks:           enabled:
      true           generate:             buildpackFrontendBuildPipeline:               enabled:
      true              buildpackDjangoBuildPipeline:               enabled: true      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ```  If you want to modify the behavior of the build step
      you can easily do that by redefining steps you want to run prior to running
      the `build` step of the associated buildpack pipeline. You can create multiple
      versions of pipelines as a result. Just make sure to give them a different name  an
      example:  ```yaml buildpacks:   enabled: true   generate:     buildpackFrontendBuildPipelineNew:       name:
      buildpack-frontend-build-pipeline-new       enabled: false       buildTaskName:
      buildpack-frontend-new       buildTaskSteps:         - name: hello1           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world1"          - name: hello2           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world2" ```  If you want to
      modify Kaniko build arguments, you can pass `kaniko_extra_args` parameter to
      `kaniko-pipeline`. For example, if you want to pass `BASE_IMAGE` build argument
      value to be used in Dockerfile you can add following line to specific project
      trigger-binding: ```yaml - name: kaniko_extra_args   value: --build-arg=BASE_IMAGE=965067289393.dkr.ecr.us-west-2.amazonaws.com/saritasa/legacy/php:php71-smart-screen-base
      ``` '
    digest: 3c7e34d4adbc11230363d39d707a5da13e9edcd12c03f8bae1ab447b4a5d90bb
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.28-dev/saritasa-tekton-pipelines-0.1.28-dev.tgz
    version: 0.1.28-dev
  - apiVersion: v2
    created: "2022-09-21T07:54:57.638516567Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: 'A Helm chart for Tekton Pipelines  Implements: - common tekton tasks
      - common tekton pipelines - common tekton trigger templates - common tekton
      trigger bindings  Implemented pipelines include: - buildpack based pipelines
      based on generator template (php, python, frontend, nodejs, ruby, go) - kaniko
      pipeline - wordpress pipeline  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then if you want to support only frontend and django pipelines based on
      buildpack without any script modifications:  ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-pipelines   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "60" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-pipelines     helm:       values: |         buildpacks:           enabled:
      true           generate:             buildpackFrontendBuildPipeline:               enabled:
      true              buildpackDjangoBuildPipeline:               enabled: true      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ```  If you want to modify the behavior of the build step
      you can easily do that by redefining steps you want to run prior to running
      the `build` step of the associated buildpack pipeline. You can create multiple
      versions of pipelines as a result. Just make sure to give them a different name  an
      example:  ```yaml buildpacks:   enabled: true   generate:     buildpackFrontendBuildPipelineNew:       name:
      buildpack-frontend-build-pipeline-new       enabled: false       buildTaskName:
      buildpack-frontend-new       buildTaskSteps:         - name: hello1           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world1"          - name: hello2           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world2" ```  If you want to
      modify Kaniko build arguments, you can pass `kaniko_extra_args` parameter to
      `kaniko-pipeline`. For example, if you want to pass `BASE_IMAGE` build argument
      value to be used in Dockerfile you can add following line to specific project
      trigger-binding: ```yaml - name: kaniko_extra_args   value: --build-arg=BASE_IMAGE=965067289393.dkr.ecr.us-west-2.amazonaws.com/saritasa/legacy/php:php71-smart-screen-base
      ``` '
    digest: a93acf3715215c9f0a51cb78f7daf86e7fe46293ab6f90f9d00f391c6dc852cd
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.28-dev/saritasa-tekton-pipelines-0.1.28-dev.tgz
    version: 0.1.28-dev
  - apiVersion: v2
    created: "2022-09-21T08:44:44.889464563Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: 'A Helm chart for Tekton Pipelines  Implements: - common tekton tasks
      - common tekton pipelines - common tekton trigger templates - common tekton
      trigger bindings  Implemented pipelines include: - buildpack based pipelines
      based on generator template (php, python, frontend, nodejs, ruby, go) - kaniko
      pipeline - wordpress pipeline  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then if you want to support only frontend and django pipelines based on
      buildpack without any script modifications:  ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-pipelines   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "60" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-pipelines     helm:       values: |         buildpacks:           enabled:
      true           generate:             buildpackFrontendBuildPipeline:               enabled:
      true              buildpackDjangoBuildPipeline:               enabled: true      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ```  If you want to modify the behavior of the build step
      you can easily do that by redefining steps you want to run prior to running
      the `build` step of the associated buildpack pipeline. You can create multiple
      versions of pipelines as a result. Just make sure to give them a different name  an
      example:  ```yaml buildpacks:   enabled: true   generate:     buildpackFrontendBuildPipelineNew:       name:
      buildpack-frontend-build-pipeline-new       enabled: false       buildTaskName:
      buildpack-frontend-new       buildTaskSteps:         - name: hello1           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world1"          - name: hello2           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world2" ```  If you want to
      modify Kaniko build arguments, you can pass `kaniko_extra_args` parameter to
      `kaniko-pipeline`. For example, if you want to pass `BASE_IMAGE` build argument
      value to be used in Dockerfile you can add following line to specific project
      trigger-binding: ```yaml - name: kaniko_extra_args   value: --build-arg=BASE_IMAGE=965067289393.dkr.ecr.us-west-2.amazonaws.com/saritasa/legacy/php:php71-smart-screen-base
      ``` '
    digest: 651c8e42107a8c4fd0df95857d117b8faa274a35a98fddd6eabe22edcb01ea3d
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.28-dev/saritasa-tekton-pipelines-0.1.28-dev.tgz
    version: 0.1.28-dev
  - apiVersion: v2
    created: "2022-09-21T11:25:16.129180115Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: 'A Helm chart for Tekton Pipelines  Implements: - common tekton tasks
      - common tekton pipelines - common tekton trigger templates - common tekton
      trigger bindings  Implemented pipelines include: - buildpack based pipelines
      based on generator template (php, python, frontend, nodejs, ruby, go) - kaniko
      pipeline - wordpress pipeline  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then if you want to support only frontend and django pipelines based on
      buildpack without any script modifications:  ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-pipelines   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "60" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-pipelines     helm:       values: |         buildpacks:           enabled:
      true           generate:             buildpackFrontendBuildPipeline:               enabled:
      true              buildpackDjangoBuildPipeline:               enabled: true      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ```  If you want to modify the behavior of the build step
      you can easily do that by redefining steps you want to run prior to running
      the `build` step of the associated buildpack pipeline. You can create multiple
      versions of pipelines as a result. Just make sure to give them a different name  an
      example:  ```yaml buildpacks:   enabled: true   generate:     buildpackFrontendBuildPipelineNew:       name:
      buildpack-frontend-build-pipeline-new       enabled: false       buildTaskName:
      buildpack-frontend-new       buildTaskSteps:         - name: hello1           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world1"          - name: hello2           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world2" ```  If you want to
      modify Kaniko build arguments, you can pass `kaniko_extra_args` parameter to
      `kaniko-pipeline`. For example, if you want to pass `BASE_IMAGE` build argument
      value to be used in Dockerfile you can add following line to specific project
      trigger-binding: ```yaml - name: kaniko_extra_args   value: --build-arg=BASE_IMAGE=965067289393.dkr.ecr.us-west-2.amazonaws.com/saritasa/legacy/php:php71-smart-screen-base
      ``` '
    digest: 47ede531c6c1074b160a8e07a315a349ad74793a462d5e1ec7a88a0c47907b72
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.28-dev/saritasa-tekton-pipelines-0.1.28-dev.tgz
    version: 0.1.28-dev
  - apiVersion: v2
    created: "2022-09-21T07:12:00.060040709Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: 'A Helm chart for Tekton Pipelines  Implements: - common tekton tasks
      - common tekton pipelines - common tekton trigger templates - common tekton
      trigger bindings  Implemented pipelines include: - buildpack based pipelines
      based on generator template (php, python, frontend, nodejs, ruby, go) - kaniko
      pipeline - wordpress pipeline  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then if you want to support only frontend and django pipelines based on
      buildpack without any script modifications:  ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-pipelines   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "60" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-pipelines     helm:       values: |         buildpacks:           enabled:
      true           generate:             buildpackFrontendBuildPipeline:               enabled:
      true              buildpackDjangoBuildPipeline:               enabled: true      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ```  If you want to modify the behavior of the build step
      you can easily do that by redefining steps you want to run prior to running
      the `build` step of the associated buildpack pipeline. You can create multiple
      versions of pipelines as a result. Just make sure to give them a different name  an
      example:  ```yaml buildpacks:   enabled: true   generate:     buildpackFrontendBuildPipelineNew:       name:
      buildpack-frontend-build-pipeline-new       enabled: false       buildTaskName:
      buildpack-frontend-new       buildTaskSteps:         - name: hello1           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world1"          - name: hello2           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world2" ```  If you want to
      modify Kaniko build arguments, you can pass `kaniko_extra_args` parameter to
      `kaniko-pipeline`. For example, if you want to pass `BASE_IMAGE` build argument
      value to be used in Dockerfile you can add following line to specific project
      trigger-binding: ```yaml - name: kaniko_extra_args   value: --build-arg=BASE_IMAGE=965067289393.dkr.ecr.us-west-2.amazonaws.com/saritasa/legacy/php:php71-smart-screen-base
      ``` '
    digest: f8c1d2461c5c56ab15613dfcf892658aad0e0868c9ed0fa68d6017d1022707d9
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.28-dev/saritasa-tekton-pipelines-0.1.28-dev.tgz
    version: 0.1.28-dev
  - apiVersion: v2
    created: "2022-09-21T09:03:22.466540837Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: 'A Helm chart for Tekton Pipelines  Implements: - common tekton tasks
      - common tekton pipelines - common tekton trigger templates - common tekton
      trigger bindings  Implemented pipelines include: - buildpack based pipelines
      based on generator template (php, python, frontend, nodejs, ruby, go) - kaniko
      pipeline - wordpress pipeline  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then if you want to support only frontend and django pipelines based on
      buildpack without any script modifications:  ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-pipelines   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "60" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-pipelines     helm:       values: |         buildpacks:           enabled:
      true           generate:             buildpackFrontendBuildPipeline:               enabled:
      true              buildpackDjangoBuildPipeline:               enabled: true      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ```  If you want to modify the behavior of the build step
      you can easily do that by redefining steps you want to run prior to running
      the `build` step of the associated buildpack pipeline. You can create multiple
      versions of pipelines as a result. Just make sure to give them a different name  an
      example:  ```yaml buildpacks:   enabled: true   generate:     buildpackFrontendBuildPipelineNew:       name:
      buildpack-frontend-build-pipeline-new       enabled: false       buildTaskName:
      buildpack-frontend-new       buildTaskSteps:         - name: hello1           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world1"          - name: hello2           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world2" ```  If you want to
      modify Kaniko build arguments, you can pass `kaniko_extra_args` parameter to
      `kaniko-pipeline`. For example, if you want to pass `BASE_IMAGE` build argument
      value to be used in Dockerfile you can add following line to specific project
      trigger-binding: ```yaml - name: kaniko_extra_args   value: --build-arg=BASE_IMAGE=965067289393.dkr.ecr.us-west-2.amazonaws.com/saritasa/legacy/php:php71-smart-screen-base
      ``` '
    digest: 969e3745a25dd02c64e5ff6e5e67ae6de4ba596a5b06292af8233024168d4db0
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.28-dev/saritasa-tekton-pipelines-0.1.28-dev.tgz
    version: 0.1.28-dev
  - apiVersion: v2
    created: "2022-09-21T09:53:46.132048688Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: 'A Helm chart for Tekton Pipelines  Implements: - common tekton tasks
      - common tekton pipelines - common tekton trigger templates - common tekton
      trigger bindings  Implemented pipelines include: - buildpack based pipelines
      based on generator template (php, python, frontend, nodejs, ruby, go) - kaniko
      pipeline - wordpress pipeline  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then if you want to support only frontend and django pipelines based on
      buildpack without any script modifications:  ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-pipelines   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "60" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-pipelines     helm:       values: |         buildpacks:           enabled:
      true           generate:             buildpackFrontendBuildPipeline:               enabled:
      true              buildpackDjangoBuildPipeline:               enabled: true      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ```  If you want to modify the behavior of the build step
      you can easily do that by redefining steps you want to run prior to running
      the `build` step of the associated buildpack pipeline. You can create multiple
      versions of pipelines as a result. Just make sure to give them a different name  an
      example:  ```yaml buildpacks:   enabled: true   generate:     buildpackFrontendBuildPipelineNew:       name:
      buildpack-frontend-build-pipeline-new       enabled: false       buildTaskName:
      buildpack-frontend-new       buildTaskSteps:         - name: hello1           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world1"          - name: hello2           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world2" ```  If you want to
      modify Kaniko build arguments, you can pass `kaniko_extra_args` parameter to
      `kaniko-pipeline`. For example, if you want to pass `BASE_IMAGE` build argument
      value to be used in Dockerfile you can add following line to specific project
      trigger-binding: ```yaml - name: kaniko_extra_args   value: --build-arg=BASE_IMAGE=965067289393.dkr.ecr.us-west-2.amazonaws.com/saritasa/legacy/php:php71-smart-screen-base
      ``` '
    digest: e2ca5a42fa748b4eecd390d12f23fe0b7471ed9c7d5b5d18fd009f86961b127c
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.28-dev/saritasa-tekton-pipelines-0.1.28-dev.tgz
    version: 0.1.28-dev
  - apiVersion: v2
    created: "2022-09-21T11:08:59.352710687Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: 'A Helm chart for Tekton Pipelines  Implements: - common tekton tasks
      - common tekton pipelines - common tekton trigger templates - common tekton
      trigger bindings  Implemented pipelines include: - buildpack based pipelines
      based on generator template (php, python, frontend, nodejs, ruby, go) - kaniko
      pipeline - wordpress pipeline  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then if you want to support only frontend and django pipelines based on
      buildpack without any script modifications:  ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-pipelines   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "60" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-pipelines     helm:       values: |         buildpacks:           enabled:
      true           generate:             buildpackFrontendBuildPipeline:               enabled:
      true              buildpackDjangoBuildPipeline:               enabled: true      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ```  If you want to modify the behavior of the build step
      you can easily do that by redefining steps you want to run prior to running
      the `build` step of the associated buildpack pipeline. You can create multiple
      versions of pipelines as a result. Just make sure to give them a different name  an
      example:  ```yaml buildpacks:   enabled: true   generate:     buildpackFrontendBuildPipelineNew:       name:
      buildpack-frontend-build-pipeline-new       enabled: false       buildTaskName:
      buildpack-frontend-new       buildTaskSteps:         - name: hello1           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world1"          - name: hello2           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world2" ```  If you want to
      modify Kaniko build arguments, you can pass `kaniko_extra_args` parameter to
      `kaniko-pipeline`. For example, if you want to pass `BASE_IMAGE` build argument
      value to be used in Dockerfile you can add following line to specific project
      trigger-binding: ```yaml - name: kaniko_extra_args   value: --build-arg=BASE_IMAGE=965067289393.dkr.ecr.us-west-2.amazonaws.com/saritasa/legacy/php:php71-smart-screen-base
      ``` '
    digest: bb3f46a6fd09136fa10b7a5d21f226580cabe086a2ef50d168bc11f71dc57db4
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.28-dev/saritasa-tekton-pipelines-0.1.28-dev.tgz
    version: 0.1.28-dev
  - apiVersion: v2
    created: "2022-09-21T08:51:09.396307704Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: 'A Helm chart for Tekton Pipelines  Implements: - common tekton tasks
      - common tekton pipelines - common tekton trigger templates - common tekton
      trigger bindings  Implemented pipelines include: - buildpack based pipelines
      based on generator template (php, python, frontend, nodejs, ruby, go) - kaniko
      pipeline - wordpress pipeline  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then if you want to support only frontend and django pipelines based on
      buildpack without any script modifications:  ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-pipelines   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "60" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-pipelines     helm:       values: |         buildpacks:           enabled:
      true           generate:             buildpackFrontendBuildPipeline:               enabled:
      true              buildpackDjangoBuildPipeline:               enabled: true      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ```  If you want to modify the behavior of the build step
      you can easily do that by redefining steps you want to run prior to running
      the `build` step of the associated buildpack pipeline. You can create multiple
      versions of pipelines as a result. Just make sure to give them a different name  an
      example:  ```yaml buildpacks:   enabled: true   generate:     buildpackFrontendBuildPipelineNew:       name:
      buildpack-frontend-build-pipeline-new       enabled: false       buildTaskName:
      buildpack-frontend-new       buildTaskSteps:         - name: hello1           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world1"          - name: hello2           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world2" ```  If you want to
      modify Kaniko build arguments, you can pass `kaniko_extra_args` parameter to
      `kaniko-pipeline`. For example, if you want to pass `BASE_IMAGE` build argument
      value to be used in Dockerfile you can add following line to specific project
      trigger-binding: ```yaml - name: kaniko_extra_args   value: --build-arg=BASE_IMAGE=965067289393.dkr.ecr.us-west-2.amazonaws.com/saritasa/legacy/php:php71-smart-screen-base
      ``` '
    digest: 772f5ed1e2ab14ce9bd9059bfcf1fad9c139f2e9de8dd55dd6c527b8874e8bcf
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.28-dev/saritasa-tekton-pipelines-0.1.28-dev.tgz
    version: 0.1.28-dev
  - apiVersion: v2
    created: "2022-09-21T11:45:21.142140871Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: 'A Helm chart for Tekton Pipelines  Implements: - common tekton tasks
      - common tekton pipelines - common tekton trigger templates - common tekton
      trigger bindings  Implemented pipelines include: - buildpack based pipelines
      based on generator template (php, python, frontend, nodejs, ruby, go) - kaniko
      pipeline - wordpress pipeline  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then if you want to support only frontend and django pipelines based on
      buildpack without any script modifications:  ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-pipelines   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "60" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-pipelines     helm:       values: |         buildpacks:           enabled:
      true           generate:             buildpackFrontendBuildPipeline:               enabled:
      true              buildpackDjangoBuildPipeline:               enabled: true      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ```  If you want to modify the behavior of the build step
      you can easily do that by redefining steps you want to run prior to running
      the `build` step of the associated buildpack pipeline. You can create multiple
      versions of pipelines as a result. Just make sure to give them a different name  an
      example:  ```yaml buildpacks:   enabled: true   generate:     buildpackFrontendBuildPipelineNew:       name:
      buildpack-frontend-build-pipeline-new       enabled: false       buildTaskName:
      buildpack-frontend-new       buildTaskSteps:         - name: hello1           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world1"          - name: hello2           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world2" ```  If you want to
      modify Kaniko build arguments, you can pass `kaniko_extra_args` parameter to
      `kaniko-pipeline`. For example, if you want to pass `BASE_IMAGE` build argument
      value to be used in Dockerfile you can add following line to specific project
      trigger-binding: ```yaml - name: kaniko_extra_args   value: --build-arg=BASE_IMAGE=965067289393.dkr.ecr.us-west-2.amazonaws.com/saritasa/legacy/php:php71-smart-screen-base
      ``` '
    digest: dc336d3915d9ec6054f110ec08cf3781b01172ffc252f2b582331af943c88715
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.28-dev/saritasa-tekton-pipelines-0.1.28-dev.tgz
    version: 0.1.28-dev
  - apiVersion: v2
    created: "2022-09-21T08:54:01.535390511Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: 'A Helm chart for Tekton Pipelines  Implements: - common tekton tasks
      - common tekton pipelines - common tekton trigger templates - common tekton
      trigger bindings  Implemented pipelines include: - buildpack based pipelines
      based on generator template (php, python, frontend, nodejs, ruby, go) - kaniko
      pipeline - wordpress pipeline  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then if you want to support only frontend and django pipelines based on
      buildpack without any script modifications:  ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-pipelines   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "60" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-pipelines     helm:       values: |         buildpacks:           enabled:
      true           generate:             buildpackFrontendBuildPipeline:               enabled:
      true              buildpackDjangoBuildPipeline:               enabled: true      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ```  If you want to modify the behavior of the build step
      you can easily do that by redefining steps you want to run prior to running
      the `build` step of the associated buildpack pipeline. You can create multiple
      versions of pipelines as a result. Just make sure to give them a different name  an
      example:  ```yaml buildpacks:   enabled: true   generate:     buildpackFrontendBuildPipelineNew:       name:
      buildpack-frontend-build-pipeline-new       enabled: false       buildTaskName:
      buildpack-frontend-new       buildTaskSteps:         - name: hello1           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world1"          - name: hello2           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world2" ```  If you want to
      modify Kaniko build arguments, you can pass `kaniko_extra_args` parameter to
      `kaniko-pipeline`. For example, if you want to pass `BASE_IMAGE` build argument
      value to be used in Dockerfile you can add following line to specific project
      trigger-binding: ```yaml - name: kaniko_extra_args   value: --build-arg=BASE_IMAGE=965067289393.dkr.ecr.us-west-2.amazonaws.com/saritasa/legacy/php:php71-smart-screen-base
      ``` '
    digest: 8eea5ae9ef29bb9bb1eb6229cb791e0549fee456b74b41dbd5f7cdd886622722
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.28-dev/saritasa-tekton-pipelines-0.1.28-dev.tgz
    version: 0.1.28-dev
  - apiVersion: v2
    created: "2022-09-23T03:38:14.553004144Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: 'A Helm chart for Tekton Pipelines  Implements: - common tekton tasks
      - common tekton pipelines - common tekton trigger templates - common tekton
      trigger bindings  Implemented pipelines include: - buildpack based pipelines
      based on generator template (php, python, frontend, nodejs, ruby, go) - kaniko
      pipeline - wordpress pipeline  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then if you want to support only frontend and django pipelines based on
      buildpack without any script modifications:  ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-pipelines   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "60" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-pipelines     helm:       values: |         buildpacks:           enabled:
      true           generate:             buildpackFrontendBuildPipeline:               enabled:
      true              buildpackDjangoBuildPipeline:               enabled: true      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ```  If you want to modify the behavior of the build step
      you can easily do that by redefining steps you want to run prior to running
      the `build` step of the associated buildpack pipeline. You can create multiple
      versions of pipelines as a result. Just make sure to give them a different name  an
      example:  ```yaml buildpacks:   enabled: true   generate:     buildpackFrontendBuildPipelineNew:       name:
      buildpack-frontend-build-pipeline-new       enabled: false       buildTaskName:
      buildpack-frontend-new       buildTaskSteps:         - name: hello1           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world1"          - name: hello2           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world2" ```  If you want to
      modify Kaniko build arguments, you can pass `kaniko_extra_args` parameter to
      `kaniko-pipeline`. For example, if you want to pass `BASE_IMAGE` build argument
      value to be used in Dockerfile you can add following line to specific project
      trigger-binding: ```yaml - name: kaniko_extra_args   value: --build-arg=BASE_IMAGE=965067289393.dkr.ecr.us-west-2.amazonaws.com/saritasa/legacy/php:php71-smart-screen-base
      ``` '
    digest: ae817ac9da617a6ebeeae582503a157e24ab7a40251776c26b0c4fa9456e1211
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.28-dev/saritasa-tekton-pipelines-0.1.28-dev.tgz
    version: 0.1.28-dev
  - apiVersion: v2
    created: "2022-09-21T06:22:32.651357912Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: 'A Helm chart for Tekton Pipelines  Implements: - common tekton tasks
      - common tekton pipelines - common tekton trigger templates - common tekton
      trigger bindings  Implemented pipelines include: - buildpack based pipelines
      based on generator template (php, python, frontend, nodejs, ruby, go) - kaniko
      pipeline - wordpress pipeline  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then if you want to support only frontend and django pipelines based on
      buildpack without any script modifications:  ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-pipelines   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "60" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-pipelines     helm:       values: |         buildpacks:           enabled:
      true           generate:             buildpackFrontendBuildPipeline:               enabled:
      true              buildpackDjangoBuildPipeline:               enabled: true      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ```  If you want to modify the behavior of the build step
      you can easily do that by redefining steps you want to run prior to running
      the `build` step of the associated buildpack pipeline. You can create multiple
      versions of pipelines as a result. Just make sure to give them a different name  an
      example:  ```yaml buildpacks:   enabled: true   generate:     buildpackFrontendBuildPipelineNew:       name:
      buildpack-frontend-build-pipeline-new       enabled: false       buildTaskName:
      buildpack-frontend-new       buildTaskSteps:         - name: hello1           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world1"          - name: hello2           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world2" ```  If you want to
      modify Kaniko build arguments, you can pass `kaniko_extra_args` parameter to
      `kaniko-pipeline`. For example, if you want to pass `BASE_IMAGE` build argument
      value to be used in Dockerfile you can add following line to specific project
      trigger-binding: ```yaml - name: kaniko_extra_args   value: --build-arg=BASE_IMAGE=965067289393.dkr.ecr.us-west-2.amazonaws.com/saritasa/legacy/php:php71-smart-screen-base
      ``` '
    digest: 66b5a0f317ede74bb79e53370776da091b181117b6f5dc7c83e81dc78f8a2369
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.28-dev/saritasa-tekton-pipelines-0.1.28-dev.tgz
    version: 0.1.28-dev
  - apiVersion: v2
    created: "2022-09-23T06:17:04.064893459Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: 'A Helm chart for Tekton Pipelines  Implements: - common tekton tasks
      - common tekton pipelines - common tekton trigger templates - common tekton
      trigger bindings  Implemented pipelines include: - buildpack based pipelines
      based on generator template (php, python, frontend, nodejs, ruby, go) - kaniko
      pipeline - wordpress pipeline  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then if you want to support only frontend and django pipelines based on
      buildpack without any script modifications:  ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-pipelines   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "60" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-pipelines     helm:       values: |         buildpacks:           enabled:
      true           generate:             buildpackFrontendBuildPipeline:               enabled:
      true              buildpackDjangoBuildPipeline:               enabled: true      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ```  If you want to modify the behavior of the build step
      you can easily do that by redefining steps you want to run prior to running
      the `build` step of the associated buildpack pipeline. You can create multiple
      versions of pipelines as a result. Just make sure to give them a different name  an
      example:  ```yaml buildpacks:   enabled: true   generate:     buildpackFrontendBuildPipelineNew:       name:
      buildpack-frontend-build-pipeline-new       enabled: false       buildTaskName:
      buildpack-frontend-new       buildTaskSteps:         - name: hello1           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world1"          - name: hello2           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world2" ```  If you want to
      modify Kaniko build arguments, you can pass `kaniko_extra_args` parameter to
      `kaniko-pipeline`. For example, if you want to pass `BASE_IMAGE` build argument
      value to be used in Dockerfile you can add following line to specific project
      trigger-binding: ```yaml - name: kaniko_extra_args   value: --build-arg=BASE_IMAGE=965067289393.dkr.ecr.us-west-2.amazonaws.com/saritasa/legacy/php:php71-smart-screen-base
      ``` '
    digest: e51e2feec7f05a95b2516eace278078ce83f2e20ba076b809317ac2d2e8c9811
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.28-dev/saritasa-tekton-pipelines-0.1.28-dev.tgz
    version: 0.1.28-dev
  - apiVersion: v2
    created: "2022-09-23T06:35:07.511168478Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: 'A Helm chart for Tekton Pipelines  Implements: - common tekton tasks
      - common tekton pipelines - common tekton trigger templates - common tekton
      trigger bindings  Implemented pipelines include: - buildpack based pipelines
      based on generator template (php, python, frontend, nodejs, ruby, go) - kaniko
      pipeline - wordpress pipeline  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then if you want to support only frontend and django pipelines based on
      buildpack without any script modifications:  ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-pipelines   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "60" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-pipelines     helm:       values: |         buildpacks:           enabled:
      true           generate:             buildpackFrontendBuildPipeline:               enabled:
      true              buildpackDjangoBuildPipeline:               enabled: true      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ```  If you want to modify the behavior of the build step
      you can easily do that by redefining steps you want to run prior to running
      the `build` step of the associated buildpack pipeline. You can create multiple
      versions of pipelines as a result. Just make sure to give them a different name  an
      example:  ```yaml buildpacks:   enabled: true   generate:     buildpackFrontendBuildPipelineNew:       name:
      buildpack-frontend-build-pipeline-new       enabled: false       buildTaskName:
      buildpack-frontend-new       buildTaskSteps:         - name: hello1           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world1"          - name: hello2           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world2" ```  If you want to
      modify Kaniko build arguments, you can pass `kaniko_extra_args` parameter to
      `kaniko-pipeline`. For example, if you want to pass `BASE_IMAGE` build argument
      value to be used in Dockerfile you can add following line to specific project
      trigger-binding: ```yaml - name: kaniko_extra_args   value: --build-arg=BASE_IMAGE=965067289393.dkr.ecr.us-west-2.amazonaws.com/saritasa/legacy/php:php71-smart-screen-base
      ``` '
    digest: 5bd92ffde377e3b472102268b0fe7f3be3f58902e7c6c12b8a7f2833cfd7949d
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.28-dev/saritasa-tekton-pipelines-0.1.28-dev.tgz
    version: 0.1.28-dev
  - apiVersion: v2
    created: "2022-09-23T07:18:46.955974025Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: 'A Helm chart for Tekton Pipelines  Implements: - common tekton tasks
      - common tekton pipelines - common tekton trigger templates - common tekton
      trigger bindings  Implemented pipelines include: - buildpack based pipelines
      based on generator template (php, python, frontend, nodejs, ruby, go) - kaniko
      pipeline - wordpress pipeline  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then if you want to support only frontend and django pipelines based on
      buildpack without any script modifications:  ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-pipelines   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "60" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-pipelines     helm:       values: |         buildpacks:           enabled:
      true           generate:             buildpackFrontendBuildPipeline:               enabled:
      true              buildpackDjangoBuildPipeline:               enabled: true      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ```  If you want to modify the behavior of the build step
      you can easily do that by redefining steps you want to run prior to running
      the `build` step of the associated buildpack pipeline. You can create multiple
      versions of pipelines as a result. Just make sure to give them a different name  an
      example:  ```yaml buildpacks:   enabled: true   generate:     buildpackFrontendBuildPipelineNew:       name:
      buildpack-frontend-build-pipeline-new       enabled: false       buildTaskName:
      buildpack-frontend-new       buildTaskSteps:         - name: hello1           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world1"          - name: hello2           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world2" ```  If you want to
      modify Kaniko build arguments, you can pass `kaniko_extra_args` parameter to
      `kaniko-pipeline`. For example, if you want to pass `BASE_IMAGE` build argument
      value to be used in Dockerfile you can add following line to specific project
      trigger-binding: ```yaml - name: kaniko_extra_args   value: --build-arg=BASE_IMAGE=965067289393.dkr.ecr.us-west-2.amazonaws.com/saritasa/legacy/php:php71-smart-screen-base
      ``` '
    digest: 2d742f9bd7bf3f9895053de18fd068a5f0dbdb19300ad9f5df5ddfa5dd082d7c
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.28-dev/saritasa-tekton-pipelines-0.1.28-dev.tgz
    version: 0.1.28-dev
  - apiVersion: v2
    created: "2022-09-23T07:43:14.86767916Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: 'A Helm chart for Tekton Pipelines  Implements: - common tekton tasks
      - common tekton pipelines - common tekton trigger templates - common tekton
      trigger bindings  Implemented pipelines include: - buildpack based pipelines
      based on generator template (php, python, frontend, nodejs, ruby, go) - kaniko
      pipeline - wordpress pipeline  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then if you want to support only frontend and django pipelines based on
      buildpack without any script modifications:  ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-pipelines   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "60" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-pipelines     helm:       values: |         buildpacks:           enabled:
      true           generate:             buildpackFrontendBuildPipeline:               enabled:
      true              buildpackDjangoBuildPipeline:               enabled: true      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ```  If you want to modify the behavior of the build step
      you can easily do that by redefining steps you want to run prior to running
      the `build` step of the associated buildpack pipeline. You can create multiple
      versions of pipelines as a result. Just make sure to give them a different name  an
      example:  ```yaml buildpacks:   enabled: true   generate:     buildpackFrontendBuildPipelineNew:       name:
      buildpack-frontend-build-pipeline-new       enabled: false       buildTaskName:
      buildpack-frontend-new       buildTaskSteps:         - name: hello1           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world1"          - name: hello2           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world2" ```  If you want to
      modify Kaniko build arguments, you can pass `kaniko_extra_args` parameter to
      `kaniko-pipeline`. For example, if you want to pass `BASE_IMAGE` build argument
      value to be used in Dockerfile you can add following line to specific project
      trigger-binding: ```yaml - name: kaniko_extra_args   value: --build-arg=BASE_IMAGE=965067289393.dkr.ecr.us-west-2.amazonaws.com/saritasa/legacy/php:php71-smart-screen-base
      ``` '
    digest: 584af9eb8d4f0577e17c39be0b6bf66f0d94ca03de477a9a89cb7a23b1cd5a55
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.28-dev/saritasa-tekton-pipelines-0.1.28-dev.tgz
    version: 0.1.28-dev
  - apiVersion: v2
    created: "2022-09-21T07:16:50.33443824Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: 'A Helm chart for Tekton Pipelines  Implements: - common tekton tasks
      - common tekton pipelines - common tekton trigger templates - common tekton
      trigger bindings  Implemented pipelines include: - buildpack based pipelines
      based on generator template (php, python, frontend, nodejs, ruby, go) - kaniko
      pipeline - wordpress pipeline  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then if you want to support only frontend and django pipelines based on
      buildpack without any script modifications:  ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-pipelines   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "60" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-pipelines     helm:       values: |         buildpacks:           enabled:
      true           generate:             buildpackFrontendBuildPipeline:               enabled:
      true              buildpackDjangoBuildPipeline:               enabled: true      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ```  If you want to modify the behavior of the build step
      you can easily do that by redefining steps you want to run prior to running
      the `build` step of the associated buildpack pipeline. You can create multiple
      versions of pipelines as a result. Just make sure to give them a different name  an
      example:  ```yaml buildpacks:   enabled: true   generate:     buildpackFrontendBuildPipelineNew:       name:
      buildpack-frontend-build-pipeline-new       enabled: false       buildTaskName:
      buildpack-frontend-new       buildTaskSteps:         - name: hello1           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world1"          - name: hello2           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world2" ```  If you want to
      modify Kaniko build arguments, you can pass `kaniko_extra_args` parameter to
      `kaniko-pipeline`. For example, if you want to pass `BASE_IMAGE` build argument
      value to be used in Dockerfile you can add following line to specific project
      trigger-binding: ```yaml - name: kaniko_extra_args   value: --build-arg=BASE_IMAGE=965067289393.dkr.ecr.us-west-2.amazonaws.com/saritasa/legacy/php:php71-smart-screen-base
      ``` '
    digest: 429b1305161b27a42a49694f0779ec73a16962f05fd74c2a24e7b7c14005d5ac
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.28-dev/saritasa-tekton-pipelines-0.1.28-dev.tgz
    version: 0.1.28-dev
  - apiVersion: v2
    created: "2022-08-22T23:04:47.299601127Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: 'A Helm chart for Tekton Pipelines  Implements: - common tekton tasks
      - common tekton pipelines - common tekton trigger templates - common tekton
      trigger bindings  Implemented pipelines include: - buildpack based pipelines
      based on generator template (php, python, frontend, nodejs, ruby, go) - kaniko
      pipeline - wordpress pipeline  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then if you want to support only frontend and django pipelines based on
      buildpack without any script modifications:  ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-pipelines   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "60" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-pipelines     helm:       values: |         buildpacks:           enabled:
      true           generate:             buildpackFrontendBuildPipeline:               enabled:
      true              buildpackDjangoBuildPipeline:               enabled: true      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ```  If you want to modify the behavior of the build step
      you can easily do that by redefining steps you want to run prior to running
      the `build` step of the associated buildpack pipeline. You can create multiple
      versions of pipelines as a result. Just make sure to give them a different name  an
      example:  ```yaml buildpacks:   enabled: true   generate:     buildpackFrontendBuildPipelineNew:       name:
      buildpack-frontend-build-pipeline-new       enabled: false       buildTaskName:
      buildpack-frontend-new       buildTaskSteps:         - name: hello1           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world1"          - name: hello2           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world2" ```  If you want to
      modify Kaniko build arguments, you can pass `kaniko_extra_args` parameter to
      `kaniko-pipeline`. For example, if you want to pass `BASE_IMAGE` build argument
      value to be used in Dockerfile you can add following line to specific project
      trigger-binding: ```yaml - name: kaniko_extra_args   value: --build-arg=BASE_IMAGE=965067289393.dkr.ecr.us-west-2.amazonaws.com/saritasa/legacy/php:php71-smart-screen-base
      ``` '
    digest: 0f027ddb8874809085747d06ed7b3c506a90dc735a7869401a2f41db60c39544
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.27/saritasa-tekton-pipelines-0.1.27.tgz
    version: 0.1.27
  - apiVersion: v2
    created: "2022-07-08T00:16:19.473052363Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: 'A Helm chart for Tekton Pipelines  Implements: - common tekton tasks
      - common tekton pipelines - common tekton trigger templates - common tekton
      trigger bindings  Implemented pipelines include: - buildpack based pipelines
      based on generator template (php, python, frontend, nodejs, ruby, go) - kaniko
      pipeline - wordpress pipeline  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then if you want to support only frontend and django pipelines based on
      buildpack without any script modifications:  ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-pipelines   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "60" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-pipelines     helm:       values: |         buildpacks:           enabled:
      true           generate:             buildpackFrontendBuildPipeline:               enabled:
      true              buildpackDjangoBuildPipeline:               enabled: true      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ```  If you want to modify the behavior of the build step
      you can easily do that by redefining steps you want to run prior to running
      the `build` step of the associated buildpack pipeline. You can create multiple
      versions of pipelines as a result. Just make sure to give them a different name  an
      example:  ```yaml buildpacks:   enabled: true   generate:     buildpackFrontendBuildPipelineNew:       name:
      buildpack-frontend-build-pipeline-new       enabled: false       buildTaskName:
      buildpack-frontend-new       buildTaskSteps:         - name: hello1           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world1"          - name: hello2           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world2" ```  If you want to
      modify Kaniko build arguments, you can pass `kaniko_extra_args` parameter to
      `kaniko-pipeline`. For example, if you want to pass `BASE_IMAGE` build argument
      value to be used in Dockerfile you can add following line to specific project
      trigger-binding: ```yaml - name: kaniko_extra_args   value: --build-arg=BASE_IMAGE=965067289393.dkr.ecr.us-west-2.amazonaws.com/saritasa/legacy/php:php71-smart-screen-base
      ``` '
    digest: b58960b1f7d75808f7ea7854887b6387f818cbf17db56bee1396158a2ba1555f
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.26/saritasa-tekton-pipelines-0.1.26.tgz
    version: 0.1.26
  - apiVersion: v2
    created: "2022-06-17T05:47:42.658419296Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: 'A Helm chart for Tekton Pipelines  Implements: - common tekton tasks
      - common tekton pipelines - common tekton trigger templates - common tekton
      trigger bindings  Implemented pipelines include: - buildpack based pipelines
      based on generator template (php, python, frontend, nodejs, ruby, go) - kaniko
      pipeline - wordpress pipeline  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then if you want to support only frontend and django pipelines based on
      buildpack without any script modifications:  ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-pipelines   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "60" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-pipelines     helm:       values: |         buildpacks:           enabled:
      true           generate:             buildpackFrontendBuildPipeline:               enabled:
      true              buildpackDjangoBuildPipeline:               enabled: true      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ```  If you want to modify the behavior of the build step
      you can easily do that by redefining steps you want to run prior to running
      the `build` step of the associated buildpack pipeline. You can create multiple
      versions of pipelines as a result. Just make sure to give them a different name  an
      example:  ```yaml buildpacks:   enabled: true   generate:     buildpackFrontendBuildPipelineNew:       name:
      buildpack-frontend-build-pipeline-new       enabled: false       buildTaskName:
      buildpack-frontend-new       buildTaskSteps:         - name: hello1           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world1"          - name: hello2           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world2" ```  If you want to
      modify Kaniko build arguments, you can pass `kaniko_extra_args` parameter to
      `kaniko-pipeline`. For example, if you want to pass `BASE_IMAGE` build argument
      value to be used in Dockerfile you can add following line to specific project
      trigger-binding: ```yaml - name: kaniko_extra_args   value: --build-arg=BASE_IMAGE=965067289393.dkr.ecr.us-west-2.amazonaws.com/saritasa/legacy/php:php71-smart-screen-base
      ``` '
    digest: 7d350d12ecfb9a39acde2020364e5c0744a0a4a76be9eb413f0dfa20c83bbffa
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.25/saritasa-tekton-pipelines-0.1.25.tgz
    version: 0.1.25
  - apiVersion: v2
    created: "2022-06-17T05:06:43.678959546Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: 'A Helm chart for Tekton Pipelines  Implements: - common tekton tasks
      - common tekton pipelines - common tekton trigger templates - common tekton
      trigger bindings  Implemented pipelines include: - buildpack based pipelines
      based on generator template (php, python, frontend, nodejs, ruby, go) - kaniko
      pipeline - wordpress pipeline  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then if you want to support only frontend and django pipelines based on
      buildpack without any script modifications:  ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-pipelines   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "60" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-pipelines     helm:       values: |         buildpacks:           enabled:
      true           generate:             buildpackFrontendBuildPipeline:               enabled:
      true              buildpackDjangoBuildPipeline:               enabled: true      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ```  If you want to modify the behavior of the build step
      you can easily do that by redefining steps you want to run prior to running
      the `build` step of the associated buildpack pipeline. You can create multiple
      versions of pipelines as a result. Just make sure to give them a different name  an
      example:  ```yaml buildpacks:   enabled: true   generate:     buildpackFrontendBuildPipelineNew:       name:
      buildpack-frontend-build-pipeline-new       enabled: false       buildTaskName:
      buildpack-frontend-new       buildTaskSteps:         - name: hello1           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world1"          - name: hello2           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world2" ```  If you want to
      modify Kaniko build arguments, you can pass `kaniko_extra_args` parameter to
      `kaniko-pipeline`. For example, if you want to pass `BASE_IMAGE` build argument
      value to be used in Dockerfile you can add following line to specific project
      trigger-binding: ```yaml - name: kaniko_extra_args   value: --build-arg=BASE_IMAGE=965067289393.dkr.ecr.us-west-2.amazonaws.com/saritasa/legacy/php:php71-smart-screen-base
      ``` '
    digest: 6b1b12c9af50042e6ddd41462628a0c437928fd8ecde4c787df61709f5e4ef90
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.24/saritasa-tekton-pipelines-0.1.24.tgz
    version: 0.1.24
  - apiVersion: v2
    created: "2022-06-16T01:24:09.770825538Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: 'A Helm chart for Tekton Pipelines  Implements: - common tekton tasks
      - common tekton pipelines - common tekton trigger templates - common tekton
      trigger bindings  Implemented pipelines include: - buildpack based pipelines
      based on generator template (php, python, frontend, nodejs, ruby, go) - kaniko
      pipeline - wordpress pipeline  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then if you want to support only frontend and django pipelines based on
      buildpack without any script modifications:  ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-pipelines   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "60" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-pipelines     helm:       values: |         buildpacks:           enabled:
      true           generate:             buildpackFrontendBuildPipeline:               enabled:
      true              buildpackDjangoBuildPipeline:               enabled: true      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ```  If you want to modify the behavior of the build step
      you can easily do that by redefining steps you want to run prior to running
      the `build` step of the associated buildpack pipeline. You can create multiple
      versions of pipelines as a result. Just make sure to give them a different name  an
      example:  ```yaml buildpacks:   enabled: true   generate:     buildpackFrontendBuildPipelineNew:       name:
      buildpack-frontend-build-pipeline-new       enabled: false       buildTaskName:
      buildpack-frontend-new       buildTaskSteps:         - name: hello1           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world1"          - name: hello2           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world2" ```  If you want to
      modify Kaniko build arguments, you can pass `kaniko_extra_args` parameter to
      `kaniko-pipeline`. For example, if you want to pass `BASE_IMAGE` build argument
      value to be used in Dockerfile you can add following line to specific project
      trigger-binding: ```yaml - name: kaniko_extra_args   value: --build-arg=BASE_IMAGE=965067289393.dkr.ecr.us-west-2.amazonaws.com/saritasa/legacy/php:php71-smart-screen-base
      ``` '
    digest: 30b0d2b80f3ae14ffad7637fbf2d5e3238b1d8df86201e28b37a484569d6037c
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.23/saritasa-tekton-pipelines-0.1.23.tgz
    version: 0.1.23
  - apiVersion: v2
    created: "2022-06-15T23:07:41.896939869Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: 'A Helm chart for Tekton Pipelines  Implements: - common tekton tasks
      - common tekton pipelines - common tekton trigger templates - common tekton
      trigger bindings  Implemented pipelines include: - buildpack based pipelines
      based on generator template (php, python, frontend, nodejs, ruby, go) - kaniko
      pipeline - wordpress pipeline  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then if you want to support only frontend and django pipelines based on
      buildpack without any script modifications:  ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-pipelines   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "60" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-pipelines     helm:       values: |         buildpacks:           enabled:
      true           generate:             buildpackFrontendBuildPipeline:               enabled:
      true              buildpackDjangoBuildPipeline:               enabled: true      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ```  If you want to modify the behavior of the build step
      you can easily do that by redefining steps you want to run prior to running
      the `build` step of the associated buildpack pipeline. You can create multiple
      versions of pipelines as a result. Just make sure to give them a different name  an
      example:  ```yaml buildpacks:   enabled: true   generate:     buildpackFrontendBuildPipelineNew:       name:
      buildpack-frontend-build-pipeline-new       enabled: false       buildTaskName:
      buildpack-frontend-new       buildTaskSteps:         - name: hello1           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world1"          - name: hello2           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world2" ```  If you want to
      modify Kaniko build arguments, you can pass `kaniko_extra_args` parameter to
      `kaniko-pipeline`. For example, if you want to pass `BASE_IMAGE` build argument
      value to be used in Dockerfile you can add following line to specific project
      trigger-binding: ```yaml - name: kaniko_extra_args   value: --build-arg=BASE_IMAGE=965067289393.dkr.ecr.us-west-2.amazonaws.com/saritasa/legacy/php:php71-smart-screen-base
      ``` '
    digest: f5b288e30fbed4e9bded13698e0c9b7f177935badb0b264d7c82a65aef73b7b3
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.22/saritasa-tekton-pipelines-0.1.22.tgz
    version: 0.1.22
  - apiVersion: v2
    created: "2022-06-15T02:39:41.813570987Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: 'A Helm chart for Tekton Pipelines  Implements: - common tekton tasks
      - common tekton pipelines - common tekton trigger templates - common tekton
      trigger bindings  Implemented pipelines include: - buildpack based pipelines
      based on generator template (php, python, frontend, nodejs, ruby, go) - kaniko
      pipeline - wordpress pipeline  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then if you want to support only frontend and django pipelines based on
      buildpack without any script modifications:  ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-pipelines   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "60" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-pipelines     helm:       values: |         buildpacks:           enabled:
      true           generate:             buildpackFrontendBuildPipeline:               enabled:
      true              buildpackDjangoBuildPipeline:               enabled: true      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ```  If you want to modify the behavior of the build step
      you can easily do that by redefining steps you want to run prior to running
      the `build` step of the associated buildpack pipeline. You can create multiple
      versions of pipelines as a result. Just make sure to give them a different name  an
      example:  ```yaml buildpacks:   enabled: true   generate:     buildpackFrontendBuildPipelineNew:       name:
      buildpack-frontend-build-pipeline-new       enabled: false       buildTaskName:
      buildpack-frontend-new       buildTaskSteps:         - name: hello1           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world1"          - name: hello2           image:
      node:16           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world2" ```  If you want to
      modify Kaniko build arguments, you can pass `kaniko_extra_args` parameter to
      `kaniko-pipeline`. For example, if you want to pass `BASE_IMAGE` build argument
      value to be used in Dockerfile you can add following line to specific project
      trigger-binding: ```yaml - name: kaniko_extra_args   value: --build-arg=BASE_IMAGE=965067289393.dkr.ecr.us-west-2.amazonaws.com/saritasa/legacy/php:php71-smart-screen-base
      ``` '
    digest: 95897013e28a870b42818be7911e35b834d41e7be54ae9cbd6eb417aa7adefa8
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.21/saritasa-tekton-pipelines-0.1.21.tgz
    version: 0.1.21
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2022-05-28T06:37:51.920485951Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: 'A Helm chart for Tekton Pipelines  Implements: - common tekton tasks
      - common tekton pipelines - common tekton trigger templates - common tekton
      trigger bindings  Implemented pipelines include: - buildpack based pipelines
      based on generator template (php, python, frontend, nodejs, ruby, go) - kaniko
      pipeline - wordpress pipeline  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then if you want to support only frontend and django pipelines based on
      buildpack without any script modifications:  ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-pipelines   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "60" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-pipelines     helm:       values: |         buildpacks:           enabled:
      true           generate:             buildpackFrontendBuildPipeline:               enabled:
      true              buildpackDjangoBuildPipeline:               enabled: true      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ```  If you want to modify the behavior of the build step
      you can easily do that by redefining steps you want to run prior to running
      the `build` step of the associated buildpack pipeline. You can create multiple
      versions of pipelines as a result. Just make sure to give them a different name  an
      example:  ```yaml buildpacks:   enabled: true   generate:     buildpackFrontendBuildPipelineNew:       name:
      buildpack-frontend-build-pipeline-new       enabled: false       buildTaskName:
      buildpack-frontend-new       buildTaskSteps:         - name: hello1           image:
      node:14           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world1"          - name: hello2           image:
      node:15           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world2" ```  If you want to
      modify Kaniko build arguments, you can pass `kaniko_extra_args` parameter to
      `kaniko-pipeline`. For example, if you want to pass `BASE_IMAGE` build argument
      value to be used in Dockerfile you can add following line to specific project
      trigger-binding: ```yaml - name: kaniko_extra_args   value: --build-arg=BASE_IMAGE=965067289393.dkr.ecr.us-west-2.amazonaws.com/saritasa/legacy/php:php71-smart-screen-base
      ``` '
    digest: 067554c40ec03b6cc6ffa594156568af6ec7d418f107a232589991744df767d5
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.20/saritasa-tekton-pipelines-0.1.20.tgz
    version: 0.1.20
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2022-05-27T21:27:49.781057961Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: 'A Helm chart for Tekton Pipelines  Implements: - common tekton tasks
      - common tekton pipelines - common tekton trigger templates - common tekton
      trigger bindings  Implemented pipelines include: - buildpack based pipelines
      based on generator template (php, python, frontend, nodejs, ruby, go) - kaniko
      pipeline - wordpress pipeline  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then if you want to support only frontend and django pipelines based on
      buildpack without any script modifications:  ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-pipelines   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "60" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-pipelines     helm:       values: |         buildpacks:           enabled:
      true           generate:             buildpackFrontendBuildPipeline:               enabled:
      true              buildpackDjangoBuildPipeline:               enabled: true      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ```  If you want to modify the behavior of the build step
      you can easily do that by redefining steps you want to run prior to running
      the `build` step of the associated buildpack pipeline. You can create multiple
      versions of pipelines as a result. Just make sure to give them a different name  an
      example:  ```yaml buildpacks:   enabled: true   generate:     buildpackFrontendBuildPipelineNew:       name:
      buildpack-frontend-build-pipeline-new       enabled: false       buildTaskName:
      buildpack-frontend-new       buildTaskSteps:         - name: hello1           image:
      node:14           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world1"          - name: hello2           image:
      node:15           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world2" ```  If you want to
      modify Kaniko build arguments, you can pass `kaniko_extra_args` parameter to
      `kaniko-pipeline`. For example, if you want to pass `BASE_IMAGE` build argument
      value to be used in Dockerfile you can add following line to specific project
      trigger-binding: ```yaml - name: kaniko_extra_args   value: --build-arg=BASE_IMAGE=965067289393.dkr.ecr.us-west-2.amazonaws.com/saritasa/legacy/php:php71-smart-screen-base
      ``` '
    digest: 73ae19957d8fa89d81524c56df09afad01c7c3fc555914ed0d76ea2ad42fc924
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.19/saritasa-tekton-pipelines-0.1.19.tgz
    version: 0.1.19
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2022-05-27T21:10:34.250217203Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: 'A Helm chart for Tekton Pipelines  Implements: - common tekton tasks
      - common tekton pipelines - common tekton trigger templates - common tekton
      trigger bindings  Implemented pipelines include: - buildpack based pipelines
      based on generator template (php, python, frontend, nodejs, ruby, go) - kaniko
      pipeline - wordpress pipeline  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then if you want to support only frontend and django pipelines based on
      buildpack without any script modifications:  ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-pipelines   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "60" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-pipelines     helm:       values: |         buildpacks:           enabled:
      true           generate:             buildpackFrontendBuildPipeline:               enabled:
      true              buildpackDjangoBuildPipeline:               enabled: true      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ```  If you want to modify the behavior of the build step
      you can easily do that by redefining steps you want to run prior to running
      the `build` step of the associated buildpack pipeline. You can create multiple
      versions of pipelines as a result. Just make sure to give them a different name  an
      example:  ```yaml buildpacks:   enabled: true   generate:     buildpackFrontendBuildPipelineNew:       name:
      buildpack-frontend-build-pipeline-new       enabled: false       buildTaskName:
      buildpack-frontend-new       buildTaskSteps:         - name: hello1           image:
      node:14           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world1"          - name: hello2           image:
      node:15           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world2" ```  If you want to
      modify Kaniko build arguments, you can pass `kaniko_extra_args` parameter to
      `kaniko-pipeline`. For example, if you want to pass `BASE_IMAGE` build argument
      value to be used in Dockerfile you can add following line to specific project
      trigger-binding: ```yaml - name: kaniko_extra_args   value: --build-arg=BASE_IMAGE=965067289393.dkr.ecr.us-west-2.amazonaws.com/saritasa/legacy/php:php71-smart-screen-base
      ``` '
    digest: cbca64d21d7dd21c64ebc4262de5d2c7879f50e556e2220370c833dbbbfc35db
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.18/saritasa-tekton-pipelines-0.1.18.tgz
    version: 0.1.18
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2022-05-27T17:21:38.243780837Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: 'A Helm chart for Tekton Pipelines  Implements: - common tekton tasks
      - common tekton pipelines - common tekton trigger templates - common tekton
      trigger bindings  Implemented pipelines include: - buildpack based pipelines
      based on generator template (php, python, frontend, nodejs, ruby, go) - kaniko
      pipeline - wordpress pipeline  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then if you want to support only frontend and django pipelines based on
      buildpack without any script modifications:  ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-pipelines   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "60" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-pipelines     helm:       values: |         buildpacks:           enabled:
      true           generate:             buildpackFrontendBuildPipeline:               enabled:
      true              buildpackDjangoBuildPipeline:               enabled: true      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ```  If you want to modify the behavior of the build step
      you can easily do that by redefining steps you want to run prior to running
      the `build` step of the associated buildpack pipeline. You can create multiple
      versions of pipelines as a result. Just make sure to give them a different name  an
      example:  ```yaml buildpacks:   enabled: true   generate:     buildpackFrontendBuildPipelineNew:       name:
      buildpack-frontend-build-pipeline-new       enabled: false       buildTaskName:
      buildpack-frontend-new       buildTaskSteps:         - name: hello1           image:
      node:14           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world1"          - name: hello2           image:
      node:15           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world2" ```  If you want to
      modify Kaniko build arguments, you can pass `kaniko_extra_args` parameter to
      `kaniko-pipeline`. For example, if you want to pass `BASE_IMAGE` build argument
      value to be used in Dockerfile you can add following line to specific project
      trigger-binding: ```yaml - name: kaniko_extra_args   value: --build-arg=BASE_IMAGE=965067289393.dkr.ecr.us-west-2.amazonaws.com/saritasa/legacy/php:php71-smart-screen-base
      ``` '
    digest: 151e9966cc55f70d0e2b63bbf4c4e5e83b2fa1ece1e5d61143c1d2cad9641be1
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.17/saritasa-tekton-pipelines-0.1.17.tgz
    version: 0.1.17
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2022-04-27T19:28:05.236211905Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: 'A Helm chart for Tekton Pipelines  Implements: - common tekton tasks
      - common tekton pipelines - common tekton trigger templates - common tekton
      trigger bindings  Implemented pipelines include: - buildpack based pipelines
      based on generator template (php, python, frontend, nodejs, ruby, go) - kaniko
      pipeline - wordpress pipeline  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then if you want to support only frontend and django pipelines based on
      buildpack without any script modifications:  ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-pipelines   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "60" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-pipelines     helm:       values: |         buildpacks:           enabled:
      true           generate:             buildpackFrontendBuildPipeline:               enabled:
      true              buildpackDjangoBuildPipeline:               enabled: true      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ```  If you want to modify the behavior of the build step
      you can easily do that by redefining steps you want to run prior to running
      the `build` step of the associated buildpack pipeline. You can create multiple
      versions of pipelines as a result. Just make sure to give them a different name  an
      example:  ```yaml buildpacks:   enabled: true   generate:     buildpackFrontendBuildPipelineNew:       name:
      buildpack-frontend-build-pipeline-new       enabled: false       buildTaskName:
      buildpack-frontend-new       buildTaskSteps:         - name: hello1           image:
      node:14           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world1"          - name: hello2           image:
      node:15           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world2" ``` '
    digest: 64fe5ad4d24fef3d0968ad00bae1650cf01907ae0a69dc0396d7919e9e3805e7
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.16/saritasa-tekton-pipelines-0.1.16.tgz
    version: 0.1.16
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2022-04-08T04:16:10.333272214Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: 'A Helm chart for Tekton Pipelines  Implements: - common tekton tasks
      - common tekton pipelines - common tekton trigger templates - common tekton
      trigger bindings  Implemented pipelines include: - buildpack based pipelines
      based on generator template (php, python, frontend, nodejs, ruby, go) - kaniko
      pipeline - wordpress pipeline  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then if you want to support only frontend and django pipelines based on
      buildpack without any script modifications:  ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-pipelines   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "60" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-pipelines     helm:       values: |         buildpacks:           enabled:
      true           generate:             buildpackFrontendBuildPipeline:               enabled:
      true              buildpackDjangoBuildPipeline:               enabled: true      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ```  If you want to modify the behavior of the build step
      you can easily do that by redefining steps you want to run prior to running
      the `build` step of the associated buildpack pipeline. You can create multiple
      versions of pipelines as a result. Just make sure to give them a different name  an
      example:  ```yaml buildpacks:   enabled: true   generate:     buildpackFrontendBuildPipelineNew:       name:
      buildpack-frontend-build-pipeline-new       enabled: false       buildTaskName:
      buildpack-frontend-new       buildTaskSteps:         - name: hello1           image:
      node:14           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world1"          - name: hello2           image:
      node:15           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world2" ``` '
    digest: d4a6a3eb8d178905cb04f96653fd0e1008dfd06ad259f988bf25a61440a68ba2
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.15/saritasa-tekton-pipelines-0.1.15.tgz
    version: 0.1.15
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2022-03-25T00:25:51.087510051Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: 'A Helm chart for Tekton Pipelines  Implements: - common tekton tasks
      - common tekton pipelines - common tekton trigger templates - common tekton
      trigger bindings  Implemented pipelines include: - buildpack based pipelines
      based on generator template (php, python, frontend, nodejs, ruby, go) - kaniko
      pipeline - wordpress pipeline  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then if you want to support only frontend and django pipelines based on
      buildpack without any script modifications:  ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-pipelines   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "60" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-pipelines     helm:       values: |         buildpacks:           enabled:
      true           generate:             buildpackFrontendBuildPipeline:               enabled:
      true              buildpackDjangoBuildPipeline:               enabled: true      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ```  If you want to modify the behavior of the build step
      you can easily do that by redefining steps you want to run prior to running
      the `build` step of the associated buildpack pipeline. You can create multiple
      versions of pipelines as a result. Just make sure to give them a different name  an
      example:  ```yaml buildpacks:   enabled: true   generate:     buildpackFrontendBuildPipelineNew:       name:
      buildpack-frontend-build-pipeline-new       enabled: false       buildTaskName:
      buildpack-frontend-new       buildTaskSteps:         - name: hello1           image:
      node:14           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world1"          - name: hello2           image:
      node:15           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world2" ``` '
    digest: 206b36e4c60eddc445483be9bb26383958fcdd95f0884c91380b283bf617f867
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.14/saritasa-tekton-pipelines-0.1.14.tgz
    version: 0.1.14
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2022-03-24T22:46:49.286541769Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: 'A Helm chart for Tekton Pipelines  Implements: - common tekton tasks
      - common tekton pipelines - common tekton trigger templates - common tekton
      trigger bindings  Implemented pipelines include: - buildpack based pipelines
      based on generator template (php, python, frontend, nodejs, ruby, go) - kaniko
      pipeline - wordpress pipeline  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then if you want to support only frontend and django pipelines based on
      buildpack without any script modifications:  ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-pipelines   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "60" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-pipelines     helm:       values: |         buildpacks:           enabled:
      true           generate:             buildpackFrontendBuildPipeline:               enabled:
      true              buildpackDjangoBuildPipeline:               enabled: true      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ```  If you want to modify the behavior of the build step
      you can easily do that by redefining steps you want to run prior to running
      the `build` step of the associated buildpack pipeline. You can create multiple
      versions of pipelines as a result. Just make sure to give them a different name  an
      example:  ```yaml buildpacks:   enabled: true   generate:     buildpackFrontendBuildPipelineNew:       name:
      buildpack-frontend-build-pipeline-new       enabled: false       buildTaskName:
      buildpack-frontend-new       buildTaskSteps:         - name: hello1           image:
      node:14           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world1"          - name: hello2           image:
      node:15           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world2" ``` '
    digest: b1152ec5d694a0e25e9ef1ad246c65b90d5ef271709f9b2b10cf15fb0df9028c
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.13/saritasa-tekton-pipelines-0.1.13.tgz
    version: 0.1.13
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2022-03-24T22:53:56.051047504Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: 'A Helm chart for Tekton Pipelines  Implements: - common tekton tasks
      - common tekton pipelines - common tekton trigger templates - common tekton
      trigger bindings  Implemented pipelines include: - buildpack based pipelines
      based on generator template (php, python, frontend, nodejs, ruby, go) - kaniko
      pipeline - wordpress pipeline  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then if you want to support only frontend and django pipelines based on
      buildpack without any script modifications:  ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-pipelines   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "60" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-pipelines     helm:       values: |         buildpacks:           enabled:
      true           generate:             buildpackFrontendBuildPipeline:               enabled:
      true              buildpackDjangoBuildPipeline:               enabled: true      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ```  If you want to modify the behavior of the build step
      you can easily do that by redefining steps you want to run prior to running
      the `build` step of the associated buildpack pipeline. You can create multiple
      versions of pipelines as a result. Just make sure to give them a different name  an
      example:  ```yaml buildpacks:   enabled: true   generate:     buildpackFrontendBuildPipelineNew:       name:
      buildpack-frontend-build-pipeline-new       enabled: false       buildTaskName:
      buildpack-frontend-new       buildTaskSteps:         - name: hello1           image:
      node:14           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world1"          - name: hello2           image:
      node:15           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world2" ``` '
    digest: 7787e541962b73d9ad3d46e509a91e39b1d927ddced0a6050c2a9e53e5f6dfff
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.13-dev/saritasa-tekton-pipelines-0.1.13-dev.tgz
    version: 0.1.13-dev
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2022-03-06T02:41:03.833313587Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: 'A Helm chart for Tekton Pipelines  Implements: - common tekton tasks
      - common tekton pipelines - common tekton trigger templates - common tekton
      trigger bindings  Implemented pipelines include: - buildpack based pipelines
      based on generator template (php, python, frontend, nodejs, ruby, go) - kaniko
      pipeline - wordpress pipeline  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then if you want to support only frontend and django pipelines based on
      buildpack without any script modifications:  ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-pipelines   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "60" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-pipelines     helm:       values: |         buildpacks:           enabled:
      true           generate:             buildpackFrontendBuildPipeline:               enabled:
      true              buildpackDjangoBuildPipeline:               enabled: true      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ```  If you want to modify the behavior of the build step
      you can easily do that by redefining steps you want to run prior to running
      the `build` step of the associated buildpack pipeline. You can create multiple
      versions of pipelines as a result. Just make sure to give them a different name  an
      example:  ```yaml buildpacks:   enabled: true   generate:     buildpackFrontendBuildPipelineNew:       name:
      buildpack-frontend-build-pipeline-new       enabled: false       buildTaskName:
      buildpack-frontend-new       buildTaskSteps:         - name: hello1           image:
      node:14           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world1"          - name: hello2           image:
      node:15           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world2" ``` '
    digest: 2c484dd42dbc85a51a6caf6a8d76fcb5252756c21d809e754a6a260798ce1ade
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.12/saritasa-tekton-pipelines-0.1.12.tgz
    version: 0.1.12
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2022-03-05T06:08:43.535801271Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: 'A Helm chart for Tekton Pipelines  Implements: - common tekton tasks
      - common tekton pipelines - common tekton trigger templates - common tekton
      trigger bindings  Implemented pipelines include: - buildpack based pipelines
      based on generator template (php, python, frontend, nodejs, ruby, go) - kaniko
      pipeline - wordpress pipeline  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then if you want to support only frontend and django pipelines based on
      buildpack without any script modifications:  ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-pipelines   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "60" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-pipelines     helm:       values: |         buildpacks:           enabled:
      true           generate:             buildpackFrontendBuildPipeline:               enabled:
      true              buildpackDjangoBuildPipeline:               enabled: true      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ```  If you want to modify the behavior of the build step
      you can easily do that by redefining steps you want to run prior to running
      the `build` step of the associated buildpack pipeline. You can create multiple
      versions of pipelines as a result. Just make sure to give them a different name  an
      example:  ```yaml buildpacks:   enabled: true   generate:     buildpackFrontendBuildPipelineNew:       name:
      buildpack-frontend-build-pipeline-new       enabled: false       buildTaskName:
      buildpack-frontend-new       buildTaskSteps:         - name: hello1           image:
      node:14           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world1"          - name: hello2           image:
      node:15           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world2" ``` '
    digest: c040b0afab9635079dde610c088582e918ad80f97571decfb020ecc78c671fd3
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.11/saritasa-tekton-pipelines-0.1.11.tgz
    version: 0.1.11
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2022-02-28T10:21:19.196032038Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: 'A Helm chart for Tekton Pipelines  Implements: - common tekton tasks
      - common tekton pipelines - common tekton trigger templates - common tekton
      trigger bindings  Implemented pipelines include: - buildpack based pipelines
      based on generator template (php, python, frontend, nodejs, ruby, go) - kaniko
      pipeline - wordpress pipeline  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then if you want to support only frontend and django pipelines based on
      buildpack without any script modifications:  ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-pipelines   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "60" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-pipelines     helm:       values: |         buildpacks:           enabled:
      true           generate:             buildpackFrontendBuildPipeline:               enabled:
      true              buildpackDjangoBuildPipeline:               enabled: true      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ```  If you want to modify the behavior of the build step
      you can easily do that by redefining steps you want to run prior to running
      the `build` step of the associated buildpack pipeline. You can create multiple
      versions of pipelines as a result. Just make sure to give them a different name  an
      example:  ```yaml buildpacks:   enabled: true   generate:     buildpackFrontendBuildPipelineNew:       name:
      buildpack-frontend-build-pipeline-new       enabled: false       buildTaskName:
      buildpack-frontend-new       buildTaskSteps:         - name: hello1           image:
      node:14           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world1"          - name: hello2           image:
      node:15           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world2" ``` '
    digest: 520a95e32277abe1abed857417814c772cebeced6c8589aa7e7bc487a78a9350
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.10/saritasa-tekton-pipelines-0.1.10.tgz
    version: 0.1.10
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2022-02-19T08:32:23.425454825Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: 'A Helm chart for Tekton Pipelines  Implements: - common tekton tasks
      - common tekton pipelines - common tekton trigger templates - common tekton
      trigger bindings  Implemented pipelines include: - buildpack based pipelines
      based on generator template (php, python, frontend, nodejs, ruby, go) - kaniko
      pipeline - wordpress pipeline  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then if you want to support only frontend and django pipelines based on
      buildpack without any script modifications:  ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-pipelines   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "60" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-pipelines     helm:       values: |         buildpacks:           enabled:
      true           generate:             buildpackFrontendBuildPipeline:               enabled:
      true              buildpackDjangoBuildPipeline:               enabled: true      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ```  If you want to modify the behavior of the build step
      you can easily do that by redefining steps you want to run prior to running
      the `build` step of the associated buildpack pipeline. You can create multiple
      versions of pipelines as a result. Just make sure to give them a different name  an
      example:  ```yaml buildpacks:   enabled: true   generate:     buildpackFrontendBuildPipelineNew:       name:
      buildpack-frontend-build-pipeline-new       enabled: false       buildTaskName:
      buildpack-frontend-new       buildTaskSteps:         - name: hello1           image:
      node:14           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world1"          - name: hello2           image:
      node:15           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world2" ``` '
    digest: 725117c9811019435b4d9e8e92a837fbcc6c9d9889c8379d8dcb3b49cacde732
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.9/saritasa-tekton-pipelines-0.1.9.tgz
    version: 0.1.9
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2022-02-04T13:49:06.795751201Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: 'A Helm chart for Tekton Pipelines  Implements: - common tekton tasks
      - common tekton pipelines - common tekton trigger templates - common tekton
      trigger bindings  Implemented pipelines include: - buildpack based pipelines
      based on generator template (php, python, frontend, nodejs, ruby, go) - kaniko
      pipeline - wordpress pipeline  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then if you want to support only frontend and django pipelines based on
      buildpack without any script modifications:  ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-pipelines   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "60" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-pipelines     helm:       values: |         buildpacks:           enabled:
      true           generate:             buildpackFrontendBuildPipeline:               enabled:
      true              buildpackDjangoBuildPipeline:               enabled: true      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ```  If you want to modify the behavior of the build step
      you can easily do that by redefining steps you want to run prior to running
      the `build` step of the associated buildpack pipeline. You can create multiple
      versions of pipelines as a result. Just make sure to give them a different name  an
      example:  ```yaml buildpacks:   enabled: true   generate:     buildpackFrontendBuildPipelineNew:       name:
      buildpack-frontend-build-pipeline-new       enabled: false       buildTaskName:
      buildpack-frontend-new       buildTaskSteps:         - name: hello1           image:
      node:14           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world1"          - name: hello2           image:
      node:15           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world2" ``` '
    digest: 1a02b1601a2e2de4fbf41e20555dccf40ccac65ff41ad496f2cb59455818405d
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.8/saritasa-tekton-pipelines-0.1.8.tgz
    version: 0.1.8
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2021-11-26T04:34:07.812372201Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: 'A Helm chart for Tekton Pipelines  Implements: - common tekton tasks
      - common tekton pipelines - common tekton trigger templates - common tekton
      trigger bindings  Implemented pipelines include: - buildpack based pipelines
      based on generator template (php, python, frontend, nodejs, ruby, go) - kaniko
      pipeline - wordpress pipeline  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then if you want to support only frontend and django pipelines based on
      buildpack without any script modifications:  ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-pipelines   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "60" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-pipelines     helm:       values: |         buildpacks:           enabled:
      true           generate:             buildpackFrontendBuildPipeline:               enabled:
      true              buildpackDjangoBuildPipeline:               enabled: true      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ```  If you want to modify the behavior of the build step
      you can easily do that by redefining steps you want to run prior to running
      the `build` step of the associated buildpack pipeline. You can create multiple
      versions of pipelines as a result. Just make sure to give them a different name  an
      example:  ```yaml buildpacks:   enabled: true   generate:     buildpackFrontendBuildPipelineNew:       name:
      buildpack-frontend-build-pipeline-new       enabled: false       buildTaskName:
      buildpack-frontend-new       buildTaskSteps:         - name: hello1           image:
      node:14           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world1"          - name: hello2           image:
      node:15           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world2" ``` '
    digest: df7757fd90bef5618e9d21c08933a2af3231dd5eaec4d04fd0457eeb7e6c7957
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.7/saritasa-tekton-pipelines-0.1.7.tgz
    version: 0.1.7
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2021-11-20T03:24:17.37622812Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: 'A Helm chart for Tekton Pipelines  Implements: - common tekton tasks
      - common tekton pipelines - common tekton trigger templates - common tekton
      trigger bindings  Implemented pipelines include: - buildpack based pipelines
      based on generator template (php, python, frontend, nodejs, ruby, go) - kaniko
      pipeline - wordpress pipeline  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then if you want to support only frontend and django pipelines based on
      buildpack without any script modifications:  ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-pipelines   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "60" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-pipelines     helm:       values: |         buildpacks:           enabled:
      true           generate:             buildpackFrontendBuildPipeline:               enabled:
      true              buildpackDjangoBuildPipeline:               enabled: true      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ```  If you want to modify the behavior of the build step
      you can easily do that by redefining steps you want to run prior to running
      the `build` step of the associated buildpack pipeline. You can create multiple
      versions of pipelines as a result. Just make sure to give them a different name  an
      example:  ```yaml buildpacks:   enabled: true   generate:     buildpackFrontendBuildPipelineNew:       name:
      buildpack-frontend-build-pipeline-new       enabled: false       buildTaskName:
      buildpack-frontend-new       buildTaskSteps:         - name: hello1           image:
      node:14           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world1"          - name: hello2           image:
      node:15           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world2" ``` '
    digest: 3885a903353fed7d8df51ef3fca32fdcac4505e9f277f03b30a0b53868f2d66a
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.6/saritasa-tekton-pipelines-0.1.6.tgz
    version: 0.1.6
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2021-11-19T22:46:36.237008803Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: 'A Helm chart for Tekton Pipelines  Implements: - common tekton tasks
      - common tekton pipelines - common tekton trigger templates - common tekton
      trigger bindings  Implemented pipelines include: - buildpack based pipelines
      based on generator template (php, python, frontend, nodejs, ruby, go) - kaniko
      pipeline - wordpress pipeline  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then if you want to support only frontend and django pipelines based on
      buildpack without any script modifications:  ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-pipelines   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "60" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-pipelines     helm:       values: |         buildpacks:           enabled:
      true           generate:             buildpackFrontendBuildPipeline:               enabled:
      true              buildpackDjangoBuildPipeline:               enabled: true      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ```  If you want to modify the behavior of the build step
      you can easily do that by redefining steps you want to run prior to running
      the `build` step of the associated buildpack pipeline. You can create multiple
      versions of pipelines as a result. Just make sure to give them a different name  an
      example:  ```yaml buildpacks:   enabled: true   generate:     buildpackFrontendBuildPipelineNew:       name:
      buildpack-frontend-build-pipeline-new       enabled: false       buildTaskName:
      buildpack-frontend-new       buildTaskSteps:         - name: hello1           image:
      node:14           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world1"          - name: hello2           image:
      node:15           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world2" ``` '
    digest: 5fc31117225db9ad24bf849ec6154dae636dea2d79aba0ffd61929d29ee6141b
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.5/saritasa-tekton-pipelines-0.1.5.tgz
    version: 0.1.5
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2021-11-03T03:13:37.810119195Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: 'A Helm chart for Tekton Pipelines  Implements: - common tekton tasks
      - common tekton pipelines - common tekton trigger templates - common tekton
      trigger bindings  Implemented pipelines include: - buildpack based pipelines
      based on generator template (php, python, frontend, nodejs, ruby, go) - kaniko
      pipeline - wordpress pipeline  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then if you want to support only frontend and django pipelines based on
      buildpack without any script modifications:  ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-pipelines   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "60" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-pipelines     helm:       values: |         buildpacks:           enabled:
      true           generate:             buildpackFrontendBuildPipeline:               enabled:
      true              buildpackDjangoBuildPipeline:               enabled: true      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ```  If you want to modify the behavior of the build step
      you can easily do that by redefining steps you want to run prior to running
      the `build` step of the associated buildpack pipeline. You can create multiple
      versions of pipelines as a result. Just make sure to give them a different name  an
      example:  ```yaml buildpacks:   enabled: true   generate:     buildpackFrontendBuildPipelineNew:       name:
      buildpack-frontend-build-pipeline-new       enabled: false       buildTaskName:
      buildpack-frontend-new       buildTaskSteps:         - name: hello1           image:
      node:14           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world1"          - name: hello2           image:
      node:15           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world2" ``` '
    digest: f262ade0f7535582f02f25092d5d86ad94fd0193454f20809b8c914d4b749ed3
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.4/saritasa-tekton-pipelines-0.1.4.tgz
    version: 0.1.4
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2021-10-31T16:48:57.980479692Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: A Helm chart for Tekton Pipelines
    digest: 7284b4cb277f87c291c26a4fec924043f3800f076f7802f77d909b3b90f301ce
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.3/saritasa-tekton-pipelines-0.1.3.tgz
    version: 0.1.3
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2021-10-31T15:58:43.57869363Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: A Helm chart for Tekton Pipelines
    digest: fa1d7a463ade656aac0b18e33155e5aee245a174d0a14d6cb589ee727ded8a7e
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.2/saritasa-tekton-pipelines-0.1.2.tgz
    version: 0.1.2
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2021-10-26T00:42:48.16560019Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: A Helm chart for Tekton Pipelines
    digest: 5aab90ccc2829fc809e7c58987d6f3d3b3aebbd6d7ea5541c0596ba284e099e6
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.1/saritasa-tekton-pipelines-0.1.1.tgz
    version: 0.1.1
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2021-10-25T23:32:30.012335639Z"
    description: A Helm chart for Tekton Pipelines
    digest: 26ed909da55b00d2b6e3a2c497ea5cd2145fcd0f1bc901c4c3997da20d2965d1
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.0/saritasa-tekton-pipelines-0.1.0.tgz
    version: 0.1.0
generated: "2022-09-25T22:41:08.082253113Z"
