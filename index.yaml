apiVersion: v1
entries:
  demo:
  - apiVersion: v2
    appVersion: 1.16.0
    created: "2021-11-08T23:31:50.551420552Z"
    description: A Helm chart for Kubernetes
    digest: 379f16e79eba3af6fdd88b2669c553266376b45e4fd27110bf8e4572c6d59d01
    name: demo
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/demo-0.0.3/demo-0.0.3.tgz
    version: 0.0.3
  - apiVersion: v2
    appVersion: 1.16.0
    created: "2021-11-03T03:13:37.168122765Z"
    description: A Helm chart for Kubernetes
    digest: 129c051fd857f2b78b8f552977879caf20bdb2d80fc22150bc678214e91e6031
    name: demo
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/demo-0.0.2/demo-0.0.2.tgz
    version: 0.0.2
  - apiVersion: v2
    appVersion: 1.16.0
    created: "2021-08-22T22:05:07.507318901Z"
    description: A Helm chart for Kubernetes
    digest: f0f6cf0eca8d577c172d94069d690f86d92d3346933659dfbe5cb2a3fcf8b49b
    name: demo
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/demo-0.0.1/demo-0.0.1.tgz
    version: 0.0.1
  jitsi-meet:
  - apiVersion: v2
    appVersion: stable-6865
    created: "2022-03-25T05:38:50.271899356Z"
    dependencies:
    - condition: prosody.enabled
      name: prosody
      repository: ""
      version: 1.2.2
    description: A Helm chart for Kubernetes
    digest: ca1951306580638b6fd48b2762748295d7a21eca37df14e3554e8cc987d10762
    name: jitsi-meet
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/jitsi-meet-1.2.2/jitsi-meet-1.2.2.tgz
    version: 1.2.2
  - apiVersion: v2
    appVersion: stable-5963
    created: "2021-10-25T08:01:39.84945535Z"
    dependencies:
    - condition: prosody.enabled
      name: prosody
      repository: ""
      version: 0.2.2
    description: A Helm chart for Kubernetes
    digest: 610b26a8f01062957f4599536f437a7cc783e7b5f3a5ca33bf36e6024d9cca08
    name: jitsi-meet
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/jitsi-meet-0.2.4/jitsi-meet-0.2.4.tgz
    version: 0.2.4
  - apiVersion: v2
    appVersion: stable-5963
    created: "2021-10-25T06:36:56.211618841Z"
    dependencies:
    - condition: prosody.enabled
      name: prosody
      repository: ""
      version: 0.2.2
    description: A Helm chart for Kubernetes
    digest: 886d1a770011b3d46695176683ba0d89ce3aa9929a1027803311c98bc0b38c01
    name: jitsi-meet
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/jitsi-meet-0.2.3/jitsi-meet-0.2.3.tgz
    version: 0.2.3
  - apiVersion: v2
    appVersion: stable-5963
    created: "2021-10-21T01:33:46.151831176Z"
    dependencies:
    - condition: prosody.enabled
      name: prosody
      repository: ""
      version: 0.2.2
    description: A Helm chart for Kubernetes
    digest: bbcc7e51bf01e6261f636aaae9b5e0006e2fdb296f8d79ea79cd636fea683f94
    name: jitsi-meet
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/jitsi-meet-0.2.2/jitsi-meet-0.2.2.tgz
    version: 0.2.2
  - apiVersion: v2
    appVersion: stable-5963
    created: "2021-10-21T01:13:25.392793798Z"
    dependencies:
    - condition: prosody.enabled
      name: prosody
      repository: ""
      version: 0.2.0
    description: A Helm chart for Kubernetes
    digest: 175daf77ed361e146c7194fc529e7ea9552b9609890772a972a686df0ae33040
    name: jitsi-meet
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/jitsi-meet-0.2.1/jitsi-meet-0.2.1.tgz
    version: 0.2.1
  - apiVersion: v2
    appVersion: stable-5963
    created: "2021-09-04T01:18:36.427039231Z"
    dependencies:
    - condition: prosody.enabled
      name: prosody
      repository: ""
      version: 0.2.0
    description: A Helm chart for Kubernetes
    digest: 18239080d63e3538eb221b9f18b618f776c265607310eebb0eb75997e0fe32f8
    name: jitsi-meet
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/jitsi-meet-0.2.0/jitsi-meet-0.2.0.tgz
    version: 0.2.0
  saritasa-rbac:
  - apiVersion: v2
    created: "2022-02-28T10:21:18.995187393Z"
    description: 'A Helm chart for Kubernetes implementing RBAC rules for saritasa
      developers, devops and client''s team members  You can see role bindings this
      way   ```sh ➜ k krew install rbac-lookup ➜ k rbac-lookup --kind group G saritasa   saritasa:sso:developers    ci                 Role/saritasa-developers-role   saritasa:sso:developers    ingress-nginx      Role/saritasa-developers-role   saritasa:sso:developers    postgres           Role/saritasa-developers-role   saritasa:sso:developers    prod               Role/saritasa-developers-readonly-role   saritasa:sso:developers    cluster-wide       ClusterRole/saritasa-developers-readonly-clusterrole
      ````  ## `example usage with agocd`  Install the chart:  ``` helm repo add saritasa
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/ ```  Make the argocd
      manifest  ```yaml apiVersion: argoproj.io/v1alpha1 kind: Application metadata:   name:
      rbac   namespace: argo-cd   finalizers:   - resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "1000" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: prod   project: default   source:     chart:
      saritasa-rbac     helm:       values: |         rbac:           client:             name:
      "producebox"             apps: true           developers:             ci: true             ingressNginx:
      true             postgres: true           devops: true     repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.0"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ````  You can also add any ad-hoc RBAC role/bindings via
      .Values.extraRbac multiline string  For example:  ```yaml extraRbac: |   kind:
      Role   apiVersion: rbac.authorization.k8s.io/v1   metadata:    name: cheesecake-users-readonly-role    namespace:
      {{ .Release.Namespace }}   rules:     - apiGroups: [""]       resources:  ["services",
      "pods", "pods/log", "configmaps"]       verbs: ["get", "list", "watch"]     -
      apiGroups: [""]       resources:  ["pods"]       verbs: ["delete"]     - apiGroups:
      [""]       resources: ["pods/portforward", "services/portforward", "pods/exec"]       verbs:
      ["create"]     - apiGroups: ["extensions"]       resources:  ["*"]       verbs:
      ["get", "list", "watch"]     - apiGroups: ["batch"]       resources:  ["*"]       verbs:
      ["get", "list", "watch"]     - apiGroups: ["apps"]       resources:  ["*"]       verbs:
      ["get", "list", "watch"]     - apiGroups: ["tekton.dev"]       resources:  ["*"]       verbs:  ["taskruns",
      "pipelineruns", "pipelines", "tasks"]    ---   kind: RoleBinding   apiVersion:
      rbac.authorization.k8s.io/v1   metadata:     name: cheesecake:users     namespace:
      {{ .Release.Namespace }}   roleRef:     apiGroup: rbac.authorization.k8s.io     kind:
      Role     name: cheesecake-users-readonly-role   subjects:   - apiGroup: rbac.authorization.k8s.io     kind:
      Group     name: cheesecake:users ```` '
    digest: b232f3afdc5210b4f89d32e45b63520e09816e5fa56f7cdba3521e7a1da6addc
    maintainers:
    - email: nospam@saritasa.com
      name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-rbac
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-rbac-0.1.4/saritasa-rbac-0.1.4.tgz
    version: 0.1.4
  - apiVersion: v2
    created: "2022-02-01T21:35:34.326954593Z"
    description: 'A Helm chart for Kubernetes implementing RBAC rules for saritasa
      developers, devops and client''s team members  You can see role bindings this
      way   ```sh ➜ k krew install rbac-lookup ➜ k rbac-lookup --kind group G saritasa   saritasa:sso:developers    ci                 Role/saritasa-developers-role   saritasa:sso:developers    ingress-nginx      Role/saritasa-developers-role   saritasa:sso:developers    postgres           Role/saritasa-developers-role   saritasa:sso:developers    prod               Role/saritasa-developers-readonly-role   saritasa:sso:developers    cluster-wide       ClusterRole/saritasa-developers-readonly-clusterrole
      ````  ## `example usage with agocd`  Install the chart:  ``` helm repo add saritasa
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/ ```  Make the argocd
      manifest  ```yaml apiVersion: argoproj.io/v1alpha1 kind: Application metadata:   name:
      rbac   namespace: argo-cd   finalizers:   - resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "1000" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: prod   project: default   source:     chart:
      saritasa-rbac     helm:       values: |         rbac:           client:             name:
      "producebox"             apps: true           developers:             ci: true             ingressNginx:
      true             postgres: true           devops: true     repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.0"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ````  You can also add any ad-hoc RBAC role/bindings via
      .Values.extraRbac multiline string  For example:  ```yaml extraRbac: |   kind:
      Role   apiVersion: rbac.authorization.k8s.io/v1   metadata:    name: cheesecake-users-readonly-role    namespace:
      {{ .Release.Namespace }}   rules:     - apiGroups: [""]       resources:  ["services",
      "pods", "pods/log", "configmaps"]       verbs: ["get", "list", "watch"]     -
      apiGroups: [""]       resources:  ["pods"]       verbs: ["delete"]     - apiGroups:
      [""]       resources: ["pods/portforward", "services/portforward", "pods/exec"]       verbs:
      ["create"]     - apiGroups: ["extensions"]       resources:  ["*"]       verbs:
      ["get", "list", "watch"]     - apiGroups: ["batch"]       resources:  ["*"]       verbs:
      ["get", "list", "watch"]     - apiGroups: ["apps"]       resources:  ["*"]       verbs:
      ["get", "list", "watch"]     - apiGroups: ["tekton.dev"]       resources:  ["*"]       verbs:  ["taskruns",
      "pipelineruns", "pipelines", "tasks"]    ---   kind: RoleBinding   apiVersion:
      rbac.authorization.k8s.io/v1   metadata:     name: cheesecake:users     namespace:
      {{ .Release.Namespace }}   roleRef:     apiGroup: rbac.authorization.k8s.io     kind:
      Role     name: cheesecake-users-readonly-role   subjects:   - apiGroup: rbac.authorization.k8s.io     kind:
      Group     name: cheesecake:users ```` '
    digest: 33a9e6c2cfc4470a29d96062afacf70f30e7a3dd87d43963d655861a116f1e3e
    maintainers:
    - email: nospam@saritasa.com
      name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-rbac
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-rbac-0.1.3/saritasa-rbac-0.1.3.tgz
    version: 0.1.3
  - apiVersion: v2
    created: "2022-01-08T02:05:49.710379502Z"
    description: 'A Helm chart for Kubernetes implementing RBAC rules for saritasa
      developers, devops and client''s team members  You can see role bindings this
      way   ```sh ➜ k krew install rbac-lookup ➜ k rbac-lookup --kind group G saritasa   saritasa:sso:developers    ci                 Role/saritasa-developers-role   saritasa:sso:developers    ingress-nginx      Role/saritasa-developers-role   saritasa:sso:developers    postgres           Role/saritasa-developers-role   saritasa:sso:developers    prod               Role/saritasa-developers-readonly-role   saritasa:sso:developers    cluster-wide       ClusterRole/saritasa-developers-readonly-clusterrole
      ````  ## `example usage with agocd`  Install the chart:  ``` helm repo add saritasa
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/ ```  Make the argocd
      manifest  ```yaml apiVersion: argoproj.io/v1alpha1 kind: Application metadata:   name:
      rbac   namespace: argo-cd   finalizers:   - resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "1000" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: prod   project: default   source:     chart:
      saritasa-rbac     helm:       values: |         rbac:           client:             name:
      "producebox"             apps: true           developers:             ci: true             ingressNginx:
      true             postgres: true           devops: true     repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.0"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ````  You can also add any ad-hoc RBAC role/bindings via
      .Values.extraRbac multiline string  For example:  ```yaml extraRbac: |   kind:
      Role   apiVersion: rbac.authorization.k8s.io/v1   metadata:    name: cheesecake-users-readonly-role    namespace:
      {{ .Release.Namespace }}   rules:     - apiGroups: [""]       resources:  ["services",
      "pods", "pods/log", "configmaps"]       verbs: ["get", "list", "watch"]     -
      apiGroups: [""]       resources:  ["pods"]       verbs: ["delete"]     - apiGroups:
      [""]       resources: ["pods/portforward", "services/portforward", "pods/exec"]       verbs:
      ["create"]     - apiGroups: ["extensions"]       resources:  ["*"]       verbs:
      ["get", "list", "watch"]     - apiGroups: ["batch"]       resources:  ["*"]       verbs:
      ["get", "list", "watch"]     - apiGroups: ["apps"]       resources:  ["*"]       verbs:
      ["get", "list", "watch"]     - apiGroups: ["tekton.dev"]       resources:  ["*"]       verbs:  ["taskruns",
      "pipelineruns", "pipelines", "tasks"]    ---   kind: RoleBinding   apiVersion:
      rbac.authorization.k8s.io/v1   metadata:     name: cheesecake:users     namespace:
      {{ .Release.Namespace }}   roleRef:     apiGroup: rbac.authorization.k8s.io     kind:
      Role     name: cheesecake-users-readonly-role   subjects:   - apiGroup: rbac.authorization.k8s.io     kind:
      Group     name: cheesecake:users ```` '
    digest: 0a7b3b87282fabcf9677c27d8581af69887332b045e0669dceacad4da5f075f6
    maintainers:
    - email: nospam@saritasa.com
      name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-rbac
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-rbac-0.1.2/saritasa-rbac-0.1.2.tgz
    version: 0.1.2
  - apiVersion: v2
    created: "2021-11-19T22:46:36.062834549Z"
    description: 'A Helm chart for Kubernetes implementing RBAC rules  You can see
      role bindings this way   ```sh ➜ k krew install rbac-lookup ➜ k rbac-lookup
      --kind group G saritasa   saritasa:sso:developers    ci                 Role/saritasa-developers-role   saritasa:sso:developers    ingress-nginx      Role/saritasa-developers-role   saritasa:sso:developers    postgres           Role/saritasa-developers-role   saritasa:sso:developers    prod               Role/saritasa-developers-readonly-role   saritasa:sso:developers    cluster-wide       ClusterRole/saritasa-developers-readonly-clusterrole
      ````  ## `example usage with agocd`  Install the chart:  ``` helm repo add saritasa
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/ ```  Make the argocd
      manifest  ```yaml apiVersion: argoproj.io/v1alpha1 kind: Application metadata:   name:
      rbac   namespace: argo-cd   finalizers:   - resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "1000" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: prod   project: default   source:     chart:
      saritasa-rbac     helm:       values: |         rbac:           developers:             ci:
      true             ingressNginx: true             postgres: true           devops:
      true     repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.0"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ````  You can also add any ad-hoc RBAC role/bindings via
      .Values.extraRbac multiline string  For example:  ```yaml extraRbac: |   kind:
      Role   apiVersion: rbac.authorization.k8s.io/v1   metadata:    name: cheesecake-users-readonly-role    namespace:
      {{ .Release.Namespace }}   rules:     - apiGroups: [""]       resources:  ["services",
      "pods", "pods/log", "configmaps"]       verbs: ["get", "list", "watch"]     -
      apiGroups: [""]       resources:  ["pods"]       verbs: ["delete"]     - apiGroups:
      [""]       resources: ["pods/portforward", "services/portforward", "pods/exec"]       verbs:
      ["create"]     - apiGroups: ["extensions"]       resources:  ["*"]       verbs:
      ["get", "list", "watch"]     - apiGroups: ["batch"]       resources:  ["*"]       verbs:
      ["get", "list", "watch"]     - apiGroups: ["apps"]       resources:  ["*"]       verbs:
      ["get", "list", "watch"]     - apiGroups: ["tekton.dev"]       resources:  ["*"]       verbs:  ["taskruns",
      "pipelineruns", "pipelines", "tasks"]    ---   kind: RoleBinding   apiVersion:
      rbac.authorization.k8s.io/v1   metadata:     name: cheesecake:users     namespace:
      {{ .Release.Namespace }}   roleRef:     apiGroup: rbac.authorization.k8s.io     kind:
      Role     name: cheesecake-users-readonly-role   subjects:   - apiGroup: rbac.authorization.k8s.io     kind:
      Group     name: cheesecake:users ```` '
    digest: 1a81d0ef0b023d7433d0af171f2cd6da4aa0c349efb6da51057d76b64d50e2d4
    maintainers:
    - email: nospam@saritasa.com
      name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-rbac
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-rbac-0.1.1/saritasa-rbac-0.1.1.tgz
    version: 0.1.1
  - apiVersion: v2
    created: "2021-11-09T01:38:40.494906828Z"
    description: 'A Helm chart for Kubernetes implementing RBAC rules  You can see
      role bindings this way   ```sh ➜ k crew install rbac-lookup ➜ k rbac-lookup
      --kind group G saritasa   saritasa:sso:developers    ci                 Role/saritasa-developers-role   saritasa:sso:developers    ingress-nginx      Role/saritasa-developers-role   saritasa:sso:developers    postgres           Role/saritasa-developers-role   saritasa:sso:developers    prod               Role/saritasa-developers-readonly-role   saritasa:sso:developers    cluster-wide       ClusterRole/saritasa-developers-readonly-clusterrole
      ````  ## `example usage with agocd`  Install the chart:  ``` helm repo add saritasa
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/ ```  Make the argocd
      manifest  ```yaml apiVersion: argoproj.io/v1alpha1 kind: Application metadata:   name:
      rbac   namespace: argo-cd   finalizers:   - resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "1000" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: prod   project: default   source:     chart:
      saritasa-rbac     helm:       values: |         chartVersion: 0.1.0         developers:           ci:
      true           ingressNginx: true           postgres: true         devops: true         enabled:
      true     repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.0"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ````  You can also add any ad-hoc RBAC role/bindings via
      .Values.extraRbac multiline string  For example:  ```yaml extraRbac: |   kind:
      Role   apiVersion: rbac.authorization.k8s.io/v1   metadata:    name: cheesecake-users-readonly-role    namespace:
      {{ .Release.Namespace }}   rules:     - apiGroups: [""]       resources:  ["services",
      "pods", "pods/log", "configmaps"]       verbs: ["get", "list", "watch"]     -
      apiGroups: [""]       resources:  ["pods"]       verbs: ["delete"]     - apiGroups:
      [""]       resources: ["pods/portforward", "services/portforward", "pods/exec"]       verbs:
      ["create"]     - apiGroups: ["extensions"]       resources:  ["*"]       verbs:
      ["get", "list", "watch"]     - apiGroups: ["batch"]       resources:  ["*"]       verbs:
      ["get", "list", "watch"]     - apiGroups: ["apps"]       resources:  ["*"]       verbs:
      ["get", "list", "watch"]     - apiGroups: ["tekton.dev"]       resources:  ["*"]       verbs:  ["taskruns",
      "pipelineruns", "pipelines", "tasks"]    ---   kind: RoleBinding   apiVersion:
      rbac.authorization.k8s.io/v1   metadata:     name: cheesecake:users     namespace:
      {{ .Release.Namespace }}   roleRef:     apiGroup: rbac.authorization.k8s.io     kind:
      Role     name: cheesecake-users-readonly-role   subjects:   - apiGroup: rbac.authorization.k8s.io     kind:
      Group     name: cheesecake:users ```` '
    digest: c9438bc2a77898c2f50dce320a07e1173bb9fbfdc53215084b9c7504f5a49f2f
    maintainers:
    - email: nospam@saritasa.com
      name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-rbac
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-rbac-0.1.0/saritasa-rbac-0.1.0.tgz
    version: 0.1.0
  saritasa-tekton:
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2022-02-10T09:57:26.180130097Z"
    description: 'A Helm chart for Tekton.  Implements: - tekton engine - tekton dashboard
      - tekton triggers - tekton dashboard ingress - webhook ingress  ## `example
      usage with argocd`  Install the chart:  ``` helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then create the manifest and apply:   ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-engine   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "40" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: tekton-pipelines   project: default   source:     chart:
      saritasa-tekton     helm:       values: |         domainZone: staging.site.com          #
      install engine         engine:           enabled: true           config:             defaultServiceAccount:
      "build-bot-sa"             defaultTimeoutMinutes: "60"             defaultPodTemplate:
      |               nodeSelector:                 ci: "true"          # install
      triggers         triggers:           enabled: true          # install dashboard
      with a public ingress         dashboard:           enabled: true           ingress:             enabled:
      true             annotations:               kubernetes.io/ingress.class: "nginx"               nginx.ingress.kubernetes.io/proxy-body-size:
      100m               cert-manager.io/cluster-issuer: "letsencrypt-prod"               nginx.ingress.kubernetes.io/auth-type:
      basic               nginx.ingress.kubernetes.io/auth-secret: tekton-basic-auth               nginx.ingress.kubernetes.io/auth-realm:
      "Authentication Required"               argocd.argoproj.io/sync-wave: "1"             hosts:               -
      host: tekton.staging.site.com                 paths:                   - path:
      /                     pathType: Prefix                     backend:                       service:                         name:
      tekton-dashboard                         port:                           number:
      9097             tls:              - secretName: tekton.staging.site.com-crt                hosts:                  -
      tekton.staging.site.com          # install github webhook ingress that invokes
      tekton''s eventlistener         webhook:           enabled: true           namespace:
      "ci"           ingress:             enabled: true             annotations:               kubernetes.io/ingress.class:
      "nginx"               nginx.ingress.kubernetes.io/proxy-body-size: 100m               cert-manager.io/cluster-issuer:
      "letsencrypt-prod"               argocd.argoproj.io/sync-wave: "10"             hosts:               -
      host: webhook.staging.site.com                 paths:                   - path:
      /                     pathType: Prefix                     backend:                       service:                         name:
      el-build-pipeline-event-listener                         port:                           number:
      8080             tls:              - secretName: webhook.staging.site.com-crt                hosts:                  -
      webhook.staging.site.com          serviceAccount:           create: true           name:
      "build-bot-sa"          nodeSelector:           tekton_builder: "true"      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true  ```  Keep in mind that tekton has config-default configmap,
      an example you can see [here](https://github.com/tektoncd/pipeline/blob/main/config/config-defaults.yaml).
      You can customize it values in this map `engine.config: {}`.  Just add keys
      in the map and they will be added into the tekton-pipelines/config-defaults
      configmap.  ```yaml engine:   config:     defaultServiceAccount: "build-bot-sa"     defaultTimeoutMinutes:
      "60"     defaultPodTemplate: |       nodeSelector:         ci: "true" ```  If
      you want to pull images from a private registry (or if you want to skip 200
      pulls on dockerhub)  ``` imagePullSecrets:   - name: "your-docker-secret-name"
      ```  You can generate that secret by doing the following  ``` kubectl create
      secret -n argo-cd generic docker-saritasa-infra-v2-ro \   --from-file=.dockerconfigjson=~/.docker/config.json
      \   --type=kubernetes.io/dockerconfigjson ```  Make dure this `~/.docker/config.json`
      is cleaned from non-infra-v2 registries first. '
    digest: 2b740a4ae302f28c6d71199c9cd6e117b377b5a8a35320cd50e1f2888e648840
    maintainers:
    - email: nospam@saritasa.com
      name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-0.1.5/saritasa-tekton-0.1.5.tgz
    version: 0.1.5
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2021-11-03T03:13:37.48809032Z"
    description: 'A Helm chart for Tekton.  Implements: - tekton engine - tekton dashboard
      - tekton triggers - tekton dashboard ingress - webhook ingress  ## `example
      usage with argocd`  Install the chart:  ``` helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then create the manifest and apply:   ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-engine   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "40" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: tekton-pipelines   project: default   source:     chart:
      saritasa-tekton     helm:       values: |         domainZone: staging.site.com          #
      install engine         engine:           enabled: true           config:             defaultServiceAccount:
      "build-bot-sa"             defaultTimeoutMinutes: "60"             defaultPodTemplate:
      |               nodeSelector:                 ci: "true"          # install
      triggers         triggers:           enabled: true          # install dashboard
      with a public ingress         dashboard:           enabled: true           ingress:             enabled:
      true             annotations:               kubernetes.io/ingress.class: "nginx"               nginx.ingress.kubernetes.io/proxy-body-size:
      100m               cert-manager.io/cluster-issuer: "letsencrypt-prod"               nginx.ingress.kubernetes.io/auth-type:
      basic               nginx.ingress.kubernetes.io/auth-secret: tekton-basic-auth               nginx.ingress.kubernetes.io/auth-realm:
      "Authentication Required"               argocd.argoproj.io/sync-wave: "1"             hosts:               -
      host: tekton.staging.site.com                 paths:                   - path:
      /                     pathType: Prefix                     backend:                       service:                         name:
      tekton-dashboard                         port:                           number:
      9097             tls:              - secretName: tekton.staging.site.com-crt                hosts:                  -
      tekton.staging.site.com          # install github webhook ingress that invokes
      tekton''s eventlistener         webhook:           enabled: true           namespace:
      "ci"           ingress:             enabled: true             annotations:               kubernetes.io/ingress.class:
      "nginx"               nginx.ingress.kubernetes.io/proxy-body-size: 100m               cert-manager.io/cluster-issuer:
      "letsencrypt-prod"               argocd.argoproj.io/sync-wave: "10"             hosts:               -
      host: webhook.staging.site.com                 paths:                   - path:
      /                     pathType: Prefix                     backend:                       service:                         name:
      el-build-pipeline-event-listener                         port:                           number:
      8080             tls:              - secretName: webhook.staging.site.com-crt                hosts:                  -
      webhook.staging.site.com          serviceAccount:           create: true           name:
      "build-bot-sa"          nodeSelector:           tekton_builder: "true"      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true  ```  Keep in mind that tekton has config-default configmap,
      an example you can see [here](https://github.com/tektoncd/pipeline/blob/main/config/config-defaults.yaml).
      You can customize it values in this map `engine.config: {}`.  Just add keys
      in the map and they will be added into the tekton-pipelines/config-defaults
      configmap.  ```yaml engine:   config:     defaultServiceAccount: "build-bot-sa"     defaultTimeoutMinutes:
      "60"     defaultPodTemplate: |       nodeSelector:         ci: "true" ```  If
      you want to pull images from a private registry (or if you want to skip 200
      pulls on dockerhub)  ``` imagePullSecrets:   - name: "your-docker-secret-name"
      ```  You can generate that secret by doing the following  ``` kubectl create
      secret -n argo-cd generic docker-saritasa-infra-v2-ro \   --from-file=.dockerconfigjson=~/.docker/config.json
      \   --type=kubernetes.io/dockerconfigjson ```  Make dure this `~/.docker/config.json`
      is cleaned from non-infra-v2 registries first. '
    digest: edd807df11329e203e7ba37a05bf907eb992438297a33e243b53f8e058cb7f04
    maintainers:
    - email: nospam@saritasa.com
      name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-0.1.4/saritasa-tekton-0.1.4.tgz
    version: 0.1.4
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2021-10-31T16:24:07.699080661Z"
    description: A Helm chart for Tekton
    digest: 11fea928ff6833ade2780b0fbd541ae23ec6f3c281a8318c8212532e2f11b380
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-0.1.3/saritasa-tekton-0.1.3.tgz
    version: 0.1.3
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2021-10-31T15:57:38.031144454Z"
    description: A Helm chart for Tekton
    digest: 6f92c0d41aa18849e71780fb883cd2974d7e614ced0c8232f579df75134357c1
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-0.1.2/saritasa-tekton-0.1.2.tgz
    version: 0.1.2
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2021-10-26T00:30:40.529102821Z"
    description: A Helm chart for Tekton
    digest: 0d65c0d60014854c3cf783cfec110fc388eb2294d0a97bd277399736383ab668
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-0.1.1/saritasa-tekton-0.1.1.tgz
    version: 0.1.1
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2021-10-25T23:32:29.866405033Z"
    description: A Helm chart for Tekton
    digest: 088ed5b3762b329aed44c248eb060823919423b232d9b7ec3ac08c92ee84dd84
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-0.1.0/saritasa-tekton-0.1.0.tgz
    version: 0.1.0
  saritasa-tekton-apps:
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2022-03-04T07:54:23.706224365Z"
    description: 'A Helm chart for tekton apps (rbac, eventlistener)  Implements:
      - dynamic records for eventlistener - PVCs - RBAC - configmaps for each app
      - triggerbindings for each app - kubernetes job to make sure the PVCs are bound
      and argocd marks the app as healthy - argocd project for each app - argocd application
      for each app component  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then declare dynamic list of projects (and associated components of that
      project like backend, api, frontend, etc) that would be dynamically added into
      the tekton''s eventlistener manifest.  Each component should be a separate git
      repository.  ```yaml --- apiVersion: argoproj.io/v1alpha1 kind: Application
      metadata:   name: tekton-apps   namespace: argo-cd   finalizers:   - resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "41" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-apps     helm:       values: |         environment: staging          gitBranchPrefixes:           -
      staging          storageClassName: gp2          aws:           region: "us-west-2"           dns:
      staging.site.com          defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com          argocd:           server:
      deploy.staging.site.com          eventlistener:           enableWebhookSecret:
      true          apps:           - project: vp             enabled: true             argocd:               labels:                 created-by:
      xxx                 ops-main: xxx                 ops-secondary: xxx                 pm:
      xxx                 tm: xxx               namespace: prod             mailList:
      vp@site.com             devopsMailList: devops+vp@site.com             jiraURL:
      https://site.atlassian.net/browse/vp             tektonURL: https://tekton.staging.site.com/#/namespaces/ci/pipelineruns             slack:
      client-vp-ci             kubernetesRepository:               name: vp-kubernetes-aws               branch:
      main               url: git@github.com:org-name/vp-kubernetes-aws.git              components:               -
      name: backend                 repository: vp-backend                 pipeline:
      buildpack-django-build-pipeline                 applicationURL: https://api.staging.site.com                 eventlistener:                   template:
      buildpack-django-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/backend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/builder:v1                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/runner:v1                -
      name: frontend                 repository: vp-frontend                 pipeline:
      buildpack-frontend-build-pipeline                 applicationURL: https://staging.site.com                 eventlistener:                   template:
      buildpack-frontend-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/frontend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/builder:full                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/runner:full                   -
      name: source_subpath                     value: dist/web          # make sure
      PVCs are bound after the chart is synced         # by temporarily mount them
      into short-live job.         runPostInstallMountPvcJob: false      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.14"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true    ```    What is important to know is that any key defined
      in apps[PROJECT].components[NAME].triggerBinding would be added as is   into
      the generated triggerbinding associated with your app. However the chart renders
      some default values - such as   application, environment, docker_registry based
      on the values in this values.yaml file.     - apps[PROJECT].components[NAME].repository
      - the name of the repository containing the code   - apps[PROJECT].components[NAME].pipeline
      - the name of the pipeline building the code in the repository above   - apps[PROJECT].components[NAME].eventlistener.template
      - the name of the trigger template for the component to be used   - apps[PROJECT].components[NAME].eventlistener.enableWebhookSecret
      - should you enable the git web hook for this particular app/component in the
      eventlistener configuration   - apps[PROJECT].components[NAME].eventlistener.filter
      - custom filter for the component of the eventlistener   - apps[PROJECT].components[NAME].eventlistener.extraOverlays
      - extra overlays to be added into the eventlistener for the component   - apps[PROJECT].components[NAME].eventlistener.eventTypes
      - github event types to trigger the ci/cd   - apps[PROJECT].components[NAME].extraBuildConfigParams
      - additional key/values to be added into `build-pipeline-config configmap` ConfigMap
      associated with the app   - apps[PROJECT].components[NAME].triggerBinding -
      values to be added into the TriggerBinding manifest    an example of argocd
      app with the additional params above:    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging            gitBranchPrefixes:             -
      staging            storageClassName: gp2            aws:             region:
      "us-west-2"             dns: staging.site.com            defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com            argocd:             server:
      deploy.staging.site.com            eventlistener:             enableWebhookSecret:
      true            apps:             - project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: prod               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.site.com/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack                   applicationURL: https://api.site.com                   eventlistener:                     template:
      buildpack-backend-build-pipeline-trigger-template                   extraBuildConfigParams:
      # what additional K/V pairs you want to add into the build-pipeline-config configmap                     KEY:
      value                   triggerBinding:                     - name: docker_registry_repository                       value:
      XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/backend                     - name:
      buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/runner:v1                  -
      name: frontend                   repository: xxx-frontend                   pipeline:
      buildpack                   applicationURL: https://site.com                   eventlistener:                     enableWebhookSecret:
      false                     filter: (body.ref.startsWith(''refs/heads/develop'')
      || body.ref.startsWith(''refs/heads/release/''))                     template:
      buildpack-frontend-build-pipeline-trigger-template                     extraOverlays:
      []                     # - key: truncated_sha                     #   expression:
      "body.head_commit.id.truncate(7)"                     eventTypes: ["pull_request",
      "push"]                   extraBuildConfigParams: {}                   triggerBinding:                     -
      name: docker_registry_repository                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/frontend                     -
      name: buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web            # make
      sure PVCs are bound after the chart is synced           # by temporarily mount
      them into short-live job.           runPostInstallMountPvcJob: false        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.14"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true    ```    This chart
      also has flexible implementation to generate ArgoCD Project and Application
      manifests. There are below additional   parameters, which allow you to override
      default helm chart generation behavior.    Project extra vars    - apps[PROJECT].argocd.syncWave
      - set custom Project sync wave (default: "200")   - apps[PROJECT].argocd.sourceRepos[]
      - set custom Project source repositories as list of strings     (default: [<apps[PROJECT].kubernetesRepository.url>])    Application
      extra vars    - apps[PROJECT].components[NAME].argocd.appName - set custom Application
      name for the component     (default: "<apps[PROJECT].project>-<apps[PROJECT].components[NAME].name>-<environment>")   -
      apps[PROJECT].components[NAME].argocd.syncWave - set custom Application sync
      wave (default: "210")   - apps[PROJECT].components[NAME].argocd.source.path
      - set custom Application source path     (default: "apps/<apps[PROJECT].components[NAME].name>/manifests/<environment>")   -
      apps[PROJECT].components[NAME].argocd.source.repoUrl - set custom Application
      source repository url     (default: "<apps[PROJECT].kubernetesRepository.url>")   -
      apps[PROJECT].components[NAME].argocd.source.targetRevision - set custom Application
      source     repository target revision - branch or tag (default: "<apps[PROJECT].kubernetesRepository.branch>")    Example
      of helm chart with all extra parameters in `apps` section:    ```yaml   apiVersion:
      argoproj.io/v1alpha1   kind: Application   metadata:     name: tekton-apps     namespace:
      argo-cd     finalizers:     - resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging           ...           apps:             -
      project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: prod                 syncWave:
      "200"                 sourceRepos:                   - git@github.com:saritasa-nest/custom-repo-1.git                   -
      git@github.com:saritasa-nest/custom-repo-2.git               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.site.com/#/namespaces/ci/pipelineruns               slack: client-xxx-ci               kubernetesRepository:                 name:
      xxx-kubernetes-aws                 branch: main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   argocd:                     appName: custom-backend-app-name                     syncWave:
      "210"                     source:                       path: "custom/dir"                       repoUrl:
      git@github.com:saritasa-nest/custom-repo-1.git                       targetRevision:
      custom-v1                   repository: xxx-backend                   pipeline:
      buildpack                   applicationURL: https://api.site.com                   eventlistener:                     template:
      buildpack-backend-build-pipeline-trigger-template                   extraBuildConfigParams:
      # what additional K/V pairs you want to add into the build-pipeline-config configmap                     KEY:
      value                   triggerBinding:                     - name: docker_registry_repository                       value:
      XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/backend                     - name:
      buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/runner:v1                  -
      name: frontend                   argocd:                     appName: custom-frontend-app-name                     syncWave:
      "210"                     source:                       path: "custom/dir"                       repoUrl:
      git@github.com:saritasa-nest/custom-repo-1.git                       targetRevision:
      custom-v1                   repository: xxx-frontend                   pipeline:
      buildpack                   applicationURL: https://site.com                   eventlistener:                     enableWebhookSecret:
      false                     filter: (body.ref.startsWith(''refs/heads/develop'')
      || body.ref.startsWith(''refs/heads/release/''))                     template:
      buildpack-frontend-build-pipeline-trigger-template                     extraOverlays:
      []                     # - key: truncated_sha                     #   expression:
      "body.head_commit.id.truncate(7)"                     eventTypes: ["pull_request",
      "push"]                   extraBuildConfigParams: {}                   triggerBinding:                     -
      name: docker_registry_repository                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/frontend                     -
      name: buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web        repoURL: https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.14"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true   ``` '
    digest: 0e810386c36b779318e9b105146b87f22965f142f20ea591873b2dcb03e79fc6
    maintainers:
    - email: nospam@saritasa.com
      name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-apps
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-apps-0.1.16/saritasa-tekton-apps-0.1.16.tgz
    version: 0.1.16
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2021-12-24T03:44:09.415375854Z"
    description: 'A Helm chart for tekton apps (rbac, eventlistener)  Implements:
      - dynamic records for eventlistener - PVCs - RBAC - configmaps for each app
      - triggerbindings for each app - kubernetes job to make sure the PVCs are bound
      and argocd marks the app as healthy  ## `example usage with argocd`  Install
      the chart:  ``` helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then declare dynamic list of projects (and associated components of that
      project like backend, api, frontend, etc) that would be dynamically added into
      the tekton''s eventlistener manifest.  Each component should be a separate git
      repository.  ```yaml --- apiVersion: argoproj.io/v1alpha1 kind: Application
      metadata:   name: tekton-apps   namespace: argo-cd   finalizers:   - resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "41" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-apps     helm:       values: |         environment: staging          gitBranchPrefixes:           -
      staging          storageClassName: gp2          aws:           region: "us-west-2"           dns:
      staging.site.com          defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com          argocd:           server:
      deploy.staging.site.com          eventlistener:           enableWebhookSecret:
      true          apps:           - project: vp             enabled: true             argocd:               labels:                 created-by:
      xxx                 ops-main: xxx                 ops-secondary: xxx                 pm:
      xxx                 tm: xxx               namespace: prod               sourceRepos:                  -
      git@github.com:org-name/xxx-kubernetes-aws.git             mailList: vp@site.com             devopsMailList:
      devops+vp@site.com             jiraURL: https://site.atlassian.net/browse/vp             tektonURL:
      https://tekton.staging.site.com/#/namespaces/ci/pipelineruns             slack:
      client-vp-ci             kubernetesRepository:               name: vp-kubernetes-aws               branch:
      main               url: git@github.com:org-name/vp-kubernetes-aws.git              components:               -
      name: backend                 argocd:                   appName: xxx-backend-prod                   syncWave:
      210                   source:                     path: apps/backend/manifests/prod                     #
      if these below lines are simmilar to project''s `kubernetesRepository`                     #
      settings - you can omit them and they would be automatically taken                     #
      from project.kubernetesRepository                     repoUrl: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                     targetRevision:
      main                 repository: vp-backend                 pipeline: buildpack-django-build-pipeline                 applicationURL:
      https://api.staging.site.com                 eventlistener:                   template:
      buildpack-django-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/backend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/builder:v1                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/runner:v1                -
      name: frontend                 argocd:                   appName: xxx-frontend-prod                   syncWave:
      210                   source:                     path: apps/frontend/manifests/prod                     #
      if these below lines are simmilar to project''s `kubernetesRepository`                     #
      settings - you can omit them and they would be automatically taken                     #
      from project.kubernetesRepository                     repoUrl: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                     targetRevision:
      main                 repository: vp-frontend                 pipeline: buildpack-frontend-build-pipeline                 applicationURL:
      https://staging.site.com                 eventlistener:                   template:
      buildpack-frontend-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/frontend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/builder:full                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/runner:full                   -
      name: source_subpath                     value: dist/web          # make sure
      PVCs are bound after the chart is synced         # by temporarily mount them
      into short-live job.         runPostInstallMountPvcJob: false      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.14"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true    ```    What is important to know is that any key defined
      in apps[PROJECT].components[NAME].triggerBinding would be added as is   into
      the generated triggerbinding associated with your app. However the chart renders
      some default values - such as   application, environment, docker_registry based
      on the values in this values.yaml file.     - apps[PROJECT].components[NAME].repository
      - the name of the repository containing the code   - apps[PROJECT].components[NAME].pipeline
      - the name of the pipeline building the code in the repository above   - apps[PROJECT].components[NAME].eventlistener.template
      - the name of the trigger template for the component to be used   - apps[PROJECT].components[NAME].eventlistener.enableWebhookSecret
      - should you enable the git web hook for this particular app/component in the
      eventlistener configuration   - apps[PROJECT].components[NAME].eventlistener.filter
      - custom filter for the component of the eventlistener   - apps[PROJECT].components[NAME].eventlistener.extraOverlays
      - extra overlays to be added into the eventlistener for the component   - apps[PROJECT].components[NAME].eventlistener.eventTypes
      - github event types to trigger the ci/cd   - apps[PROJECT].components[NAME].extraBuildConfigParams
      - additional key/values to be added into `build-pipeline-config configmap` ConfigMap
      associated with the app   - apps[PROJECT].components[NAME].triggerBinding -
      values to be added into the TriggerBinding manifest    an example of argocd
      app with the additional params above:    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging            gitBranchPrefixes:             -
      staging            storageClassName: gp2            aws:             region:
      "us-west-2"             dns: staging.site.com            defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com            argocd:             server:
      deploy.staging.site.com            eventlistener:             enableWebhookSecret:
      true            apps:             - project: xxx               enabled: true               argocd:                 labels:                   created-by:
      xxx                   ops-main: xxx                   ops-secondary: xxx                   pm:
      xxx                   tm: xxx                 namespace: prod                 sourceRepos:                    -
      git@github.com:org-name/xxx-kubernetes-aws.git               mailList: xxx@saritasa.com               devopsMailList:
      devops+xxx@saritasa.com               jiraURL: https://saritasa.atlassian.net/browse/xxx               tektonURL:
      https://tekton.site.com/#/namespaces/ci/pipelineruns               slack: client-xxx-ci               kubernetesRepository:                 name:
      xxx-kubernetes-aws                 branch: main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   argocd:                     appName: xxx-backend-prod                     syncWave:
      210                     source:                       path: apps/backend/manifests/prod                       #
      if these below lines are simmilar to project''s `kubernetesRepository`                       #
      settings - you can omit them and they would be automatically taken                       #
      from project.kubernetesRepository                       repoUrl: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                       targetRevision:
      main                   repository: xxx-backend                   pipeline: buildpack                   applicationURL:
      https://api.site.com                   eventlistener:                     template:
      buildpack-backend-build-pipeline-trigger-template                   extraBuildConfigParams:
      # what additional K/V pairs you want to add into the build-pipeline-config configmap                     KEY:
      value                   triggerBinding:                     - name: docker_registry_repository                       value:
      XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/backend                     - name:
      buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/runner:v1                  -
      name: frontend                   argocd:                     appName: xxx-frontend-prod                     syncWave:
      210                     source:                       path: apps/frontend/manifests/prod                       #
      if these below lines are simmilar to project''s `kubernetesRepository`                       #
      settings - you can omit them and they would be automatically taken                       #
      from project.kubernetesRepository                       repoUrl: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                       targetRevision:
      main                   repository: xxx-frontend                   pipeline:
      buildpack                   applicationURL: https://site.com                   eventlistener:                     enableWebhookSecret:
      false                     filter: (body.ref.startsWith(''refs/heads/develop'')
      || body.ref.startsWith(''refs/heads/release/''))                     template:
      buildpack-frontend-build-pipeline-trigger-template                     extraOverlays:
      []                     # - key: truncated_sha                     #   expression:
      "body.head_commit.id.truncate(7)"                     eventTypes: ["pull_request",
      "push"]                   extraBuildConfigParams: {}                   triggerBinding:                     -
      name: docker_registry_repository                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/frontend                     -
      name: buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web            # make
      sure PVCs are bound after the chart is synced           # by temporarily mount
      them into short-live job.           runPostInstallMountPvcJob: false        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.14"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true    ``` '
    digest: 7e9248e4cb902a8837922d5c2660d77a526ab68479537eabba7216b9ae90e69a
    maintainers:
    - email: nospam@saritasa.com
      name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-apps
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-apps-0.1.15/saritasa-tekton-apps-0.1.15.tgz
    version: 0.1.15
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2021-11-03T03:13:37.650014817Z"
    description: 'A Helm chart for tekton apps (rbac, eventlistener)  Implements:
      - dynamic records for eventlistener - PVCs - RBAC - configmaps for each app
      - triggerbindings for each app - kubernetes job to make sure the PVCs are bound
      and argocd marks the app as healthy  ## `example usage with argocd`  Install
      the chart:  ``` helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then declare dynamic list of projects (and associated components of that
      project like backend, api, frontend, etc) that would be dynamically added into
      the tekton''s eventlistener manifest.  Each component should be a separate git
      repository.  ```yaml --- apiVersion: argoproj.io/v1alpha1 kind: Application
      metadata:   name: tekton-apps   namespace: argo-cd   finalizers:   - resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "41" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-apps     helm:       values: |         environment: staging          gitBranchPrefixes:           -
      staging          storageClassName: gp2          aws:           region: "us-west-2"           dns:
      staging.site.com          defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com          argocd:           server:
      deploy.staging.site.com          eventlistener:           enableWebhookSecret:
      true          apps:           - project: vp             enabled: true             mailList:
      vp@site.com             devopsMailList: devops+vp@site.com             jiraURL:
      https://site.atlassian.net/browse/vp             tektonURL: https://tekton.staging.site.com/#/namespaces/ci/pipelineruns             slack:
      client-vp-ci             kubernetesRepository:               name: vp-kubernetes-aws               branch:
      main               url: git@github.com:org-name/vp-kubernetes-aws.git              components:               -
      name: backend                 repository: vp-backend                 pipeline:
      buildpack-django-build-pipeline                 applicationURL: https://api.staging.site.com                 eventlistener:                   template:
      buildpack-django-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/backend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/builder:v1                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/google/runner:v1                -
      name: frontend                 repository: vp-frontend                 pipeline:
      buildpack-frontend-build-pipeline                 applicationURL: https://staging.site.com                 eventlistener:                   template:
      buildpack-frontend-build-pipeline-trigger-template                 triggerBinding:                   -
      name: docker_registry_repository                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/frontend                   -
      name: buildpack_builder_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/builder:full                   -
      name: buildpack_runner_image                     value: xxx.dkr.ecr.us-west-2.amazonaws.com/vp/staging/buildpacks/paketo/runner:full                   -
      name: source_subpath                     value: dist/web          # make sure
      PVCs are bound after the chart is synced         # by temporarily mount them
      into short-live job.         runPostInstallMountPvcJob: false      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.14"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true    ```    What is important to know is that any key defined
      in apps[PROJECT].components[NAME].triggerBinding would be added as is   into
      the generated triggerbinding associated with your app. However the chart renders
      some default values - such as   application, environment, docker_registry based
      on the values in this values.yaml file.     - apps[PROJECT].components[NAME].repository
      - the name of the repository containing the code   - apps[PROJECT].components[NAME].pipeline
      - the name of the pipeline building the code in the repository above   - apps[PROJECT].components[NAME].eventlistener.template
      - the name of the trigger template for the component to be used   - apps[PROJECT].components[NAME].eventlistener.enableWebhookSecret
      - should you enable the git web hook for this particular app/component in the
      eventlistener configuration   - apps[PROJECT].components[NAME].eventlistener.filter
      - custom filter for the component of the eventlistener   - apps[PROJECT].components[NAME].eventlistener.extraOverlays
      - extra overlays to be added into the eventlistener for the component   - apps[PROJECT].components[NAME].eventlistener.eventTypes
      - github event types to trigger the ci/cd   - apps[PROJECT].components[NAME].extraBuildConfigParams
      - additional key/values to be added into `build-pipeline-config configmap` ConfigMap
      associated with the app   - apps[PROJECT].components[NAME].triggerBinding -
      values to be added into the TriggerBinding manifest    an example of argocd
      app with the additional params above:    ```yaml   apiVersion: argoproj.io/v1alpha1   kind:
      Application   metadata:     name: tekton-apps     namespace: argo-cd     finalizers:     -
      resources-finalizer.argocd.argoproj.io     annotations:       argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true       argocd.argoproj.io/sync-wave: "41"   spec:     destination:       server:
      https://kubernetes.default.svc       namespace: ci     project: default     source:       chart:
      saritasa-tekton-apps       helm:         values: |           environment: staging            gitBranchPrefixes:             -
      staging            storageClassName: gp2            aws:             region:
      "us-west-2"             dns: staging.site.com            defaultRegistry: xxx.dkr.ecr.us-west-2.amazonaws.com            argocd:             server:
      deploy.staging.site.com            eventlistener:             enableWebhookSecret:
      true            apps:             - project: xxx               enabled: true               mailList:
      xxx@saritasa.com               devopsMailList: devops+xxx@saritasa.com               jiraURL:
      https://saritasa.atlassian.net/browse/xxx               tektonURL: https://tekton.site.com/#/namespaces/ci/pipelineruns               slack:
      client-xxx-ci               kubernetesRepository:                 name: xxx-kubernetes-aws                 branch:
      main                 url: git@github.com:saritasa-nest/xxx-kubernetes-aws.git                components:                 -
      name: backend                   repository: xxx-backend                   pipeline:
      buildpack                   applicationURL: https://api.site.com                   eventlistener:                     template:
      buildpack-backend-build-pipeline-trigger-template                   extraBuildConfigParams:
      # what additional K/V pairs you want to add into the build-pipeline-config configmap                     KEY:
      value                   triggerBinding:                     - name: docker_registry_repository                       value:
      XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/backend                     - name:
      buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/builder:v1                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/google/runner:v1                  -
      name: frontend                   repository: xxx-frontend                   pipeline:
      buildpack                   applicationURL: https://site.com                   eventlistener:                     enableWebhookSecret:
      false                     filter: (body.ref.startsWith(''refs/heads/develop'')
      || body.ref.startsWith(''refs/heads/release/''))                     template:
      buildpack-frontend-build-pipeline-trigger-template                     extraOverlays:
      []                     # - key: truncated_sha                     #   expression:
      "body.head_commit.id.truncate(7)"                     eventTypes: ["pull_request",
      "push"]                   extraBuildConfigParams: {}                   triggerBinding:                     -
      name: docker_registry_repository                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/frontend                     -
      name: buildpack_builder_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/builder:full                     -
      name: buildpack_runner_image                       value: XXX.dkr.ecr.us-west-2.amazonaws.com/xxx/dev/buildpacks/paketo/runner:full                     -
      name: source_subpath                       value: dist/web            # make
      sure PVCs are bound after the chart is synced           # by temporarily mount
      them into short-live job.           runPostInstallMountPvcJob: false        repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/       targetRevision:
      "0.1.14"     syncPolicy:       automated:         prune: true         selfHeal:
      true       syncOptions:         - CreateNamespace=true    ``` '
    digest: 1c9b2ee923b7b6f4221a7078cfc8cbd3ea4860cabdb6e9574b4df96f579b08c7
    maintainers:
    - email: nospam@saritasa.com
      name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-apps
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-apps-0.1.14/saritasa-tekton-apps-0.1.14.tgz
    version: 0.1.14
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2021-10-31T21:04:22.310225804Z"
    description: A Helm chart for tekton apps (rbac, eventlistener)
    digest: 2df5754f5deb3a0d24f27a3946bb43c1a8ff9be417061dae33e08119e06eb39b
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-apps
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-apps-0.1.12/saritasa-tekton-apps-0.1.12.tgz
    version: 0.1.12
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2021-10-31T20:20:40.20829655Z"
    description: A Helm chart for tekton apps (rbac, eventlistener)
    digest: 52d60214c8689106149e59aab91c781304e036dec0e9e699a41d6466762605b0
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-apps
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-apps-0.1.11/saritasa-tekton-apps-0.1.11.tgz
    version: 0.1.11
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2021-10-31T20:18:48.728572852Z"
    description: A Helm chart for tekton apps (rbac, eventlistener)
    digest: 8bc34083489083b208758f8f2d1315078efd39b47ee544068485f333e2517bc0
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-apps
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-apps-0.1.10/saritasa-tekton-apps-0.1.10.tgz
    version: 0.1.10
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2021-10-31T19:37:37.364411685Z"
    description: A Helm chart for tekton apps (rbac, eventlistener)
    digest: 55a6f8a3063795ecdae6f20b48a767c949c131ab0484e5a1c12d3ba0aa37744e
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-apps
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-apps-0.1.9/saritasa-tekton-apps-0.1.9.tgz
    version: 0.1.9
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2021-10-31T19:31:41.885854671Z"
    description: A Helm chart for tekton apps (rbac, eventlistener)
    digest: 173e2302c90ac02980afd435a6b12d34eb8f25fccb7175ac652beecc6e394d8c
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-apps
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-apps-0.1.8/saritasa-tekton-apps-0.1.8.tgz
    version: 0.1.8
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2021-10-31T19:26:34.227886705Z"
    description: A Helm chart for tekton apps (rbac, eventlistener)
    digest: 9816100e765033570e5248a69c2aec912807c8a611b08e5292629321dfae056c
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-apps
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-apps-0.1.7/saritasa-tekton-apps-0.1.7.tgz
    version: 0.1.7
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2021-10-31T19:19:44.057647699Z"
    description: A Helm chart for tekton apps (rbac, eventlistener)
    digest: a5a6d7433cabb3da19fed127bbac4f9c756cbceab9bfd47f996a0509172f8f54
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-apps
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-apps-0.1.6/saritasa-tekton-apps-0.1.6.tgz
    version: 0.1.6
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2021-10-31T18:36:24.505475189Z"
    description: A Helm chart for tekton apps (rbac, eventlistener)
    digest: 76f0b466ff8919df8c8f449da073f6868ff64e75688309909d68c4c9a5b7f1cd
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-apps
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-apps-0.1.5/saritasa-tekton-apps-0.1.5.tgz
    version: 0.1.5
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2021-10-31T18:29:37.386536851Z"
    description: A Helm chart for tekton apps (rbac, eventlistener)
    digest: b955db340c1acb711bce83678b4ff661316ac19ce82c76138385eb668c1798dc
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-apps
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-apps-0.1.4/saritasa-tekton-apps-0.1.4.tgz
    version: 0.1.4
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2021-10-31T18:17:24.320799824Z"
    description: A Helm chart for tekton apps (rbac, eventlistener)
    digest: 456e7bc608da24e206d84ffb977d9c7c50d2b19e0e197f5193a7208a99b8bfb5
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-apps
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-apps-0.1.3/saritasa-tekton-apps-0.1.3.tgz
    version: 0.1.3
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2021-10-31T16:24:07.8619512Z"
    description: A Helm chart for tekton apps (rbac, eventlistener)
    digest: 49a55998bb1858c90493ec4c289b2dc33bf1d06acd1e9f09fce943c965bdbed8
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-apps
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-apps-0.1.2/saritasa-tekton-apps-0.1.2.tgz
    version: 0.1.2
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2021-10-30T02:23:39.498952833Z"
    description: A Helm chart for tekton apps (rbac, eventlistener)
    digest: adfeafa1350bf18f1fb1835b085aeb840917b8dc55d28b6e4190e44edf65c28c
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-apps
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-apps-0.1.0/saritasa-tekton-apps-0.1.0.tgz
    version: 0.1.0
  saritasa-tekton-pipelines:
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2022-03-25T00:25:51.087510051Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: 'A Helm chart for Tekton Pipelines  Implements: - common tekton tasks
      - common tekton pipelines - common tekton trigger templates - common tekton
      trigger bindings  Implemented pipelines include: - buildpack based pipelines
      based on generator template (php, python, frontend, nodejs, ruby, go) - kaniko
      pipeline - wordpress pipeline  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then if you want to support only frontend and django pipelines based on
      buildpack without any script modifications:  ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-pipelines   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "60" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-pipelines     helm:       values: |         buildpacks:           enabled:
      true           generate:             buildpackFrontendBuildPipeline:               enabled:
      true              buildpackDjangoBuildPipeline:               enabled: true      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ```  If you want to modify the behavior of the build step
      you can easily do that by redefining steps you want to run prior to running
      the `build` step of the associated buildpack pipeline. You can create multiple
      versions of pipelines as a result. Just make sure to give them a different name  an
      example:  ```yaml buildpacks:   enabled: true   generate:     buildpackFrontendBuildPipelineNew:       name:
      buildpack-frontend-build-pipeline-new       enabled: false       buildTaskName:
      buildpack-frontend-new       buildTaskSteps:         - name: hello1           image:
      node:14           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world1"          - name: hello2           image:
      node:15           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world2" ``` '
    digest: 206b36e4c60eddc445483be9bb26383958fcdd95f0884c91380b283bf617f867
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.14/saritasa-tekton-pipelines-0.1.14.tgz
    version: 0.1.14
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2022-03-24T22:46:49.286541769Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: 'A Helm chart for Tekton Pipelines  Implements: - common tekton tasks
      - common tekton pipelines - common tekton trigger templates - common tekton
      trigger bindings  Implemented pipelines include: - buildpack based pipelines
      based on generator template (php, python, frontend, nodejs, ruby, go) - kaniko
      pipeline - wordpress pipeline  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then if you want to support only frontend and django pipelines based on
      buildpack without any script modifications:  ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-pipelines   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "60" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-pipelines     helm:       values: |         buildpacks:           enabled:
      true           generate:             buildpackFrontendBuildPipeline:               enabled:
      true              buildpackDjangoBuildPipeline:               enabled: true      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ```  If you want to modify the behavior of the build step
      you can easily do that by redefining steps you want to run prior to running
      the `build` step of the associated buildpack pipeline. You can create multiple
      versions of pipelines as a result. Just make sure to give them a different name  an
      example:  ```yaml buildpacks:   enabled: true   generate:     buildpackFrontendBuildPipelineNew:       name:
      buildpack-frontend-build-pipeline-new       enabled: false       buildTaskName:
      buildpack-frontend-new       buildTaskSteps:         - name: hello1           image:
      node:14           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world1"          - name: hello2           image:
      node:15           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world2" ``` '
    digest: b1152ec5d694a0e25e9ef1ad246c65b90d5ef271709f9b2b10cf15fb0df9028c
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.13/saritasa-tekton-pipelines-0.1.13.tgz
    version: 0.1.13
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2022-03-24T22:53:56.051047504Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: 'A Helm chart for Tekton Pipelines  Implements: - common tekton tasks
      - common tekton pipelines - common tekton trigger templates - common tekton
      trigger bindings  Implemented pipelines include: - buildpack based pipelines
      based on generator template (php, python, frontend, nodejs, ruby, go) - kaniko
      pipeline - wordpress pipeline  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then if you want to support only frontend and django pipelines based on
      buildpack without any script modifications:  ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-pipelines   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "60" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-pipelines     helm:       values: |         buildpacks:           enabled:
      true           generate:             buildpackFrontendBuildPipeline:               enabled:
      true              buildpackDjangoBuildPipeline:               enabled: true      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ```  If you want to modify the behavior of the build step
      you can easily do that by redefining steps you want to run prior to running
      the `build` step of the associated buildpack pipeline. You can create multiple
      versions of pipelines as a result. Just make sure to give them a different name  an
      example:  ```yaml buildpacks:   enabled: true   generate:     buildpackFrontendBuildPipelineNew:       name:
      buildpack-frontend-build-pipeline-new       enabled: false       buildTaskName:
      buildpack-frontend-new       buildTaskSteps:         - name: hello1           image:
      node:14           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world1"          - name: hello2           image:
      node:15           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world2" ``` '
    digest: 7787e541962b73d9ad3d46e509a91e39b1d927ddced0a6050c2a9e53e5f6dfff
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.13-dev/saritasa-tekton-pipelines-0.1.13-dev.tgz
    version: 0.1.13-dev
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2022-03-06T02:41:03.833313587Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: 'A Helm chart for Tekton Pipelines  Implements: - common tekton tasks
      - common tekton pipelines - common tekton trigger templates - common tekton
      trigger bindings  Implemented pipelines include: - buildpack based pipelines
      based on generator template (php, python, frontend, nodejs, ruby, go) - kaniko
      pipeline - wordpress pipeline  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then if you want to support only frontend and django pipelines based on
      buildpack without any script modifications:  ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-pipelines   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "60" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-pipelines     helm:       values: |         buildpacks:           enabled:
      true           generate:             buildpackFrontendBuildPipeline:               enabled:
      true              buildpackDjangoBuildPipeline:               enabled: true      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ```  If you want to modify the behavior of the build step
      you can easily do that by redefining steps you want to run prior to running
      the `build` step of the associated buildpack pipeline. You can create multiple
      versions of pipelines as a result. Just make sure to give them a different name  an
      example:  ```yaml buildpacks:   enabled: true   generate:     buildpackFrontendBuildPipelineNew:       name:
      buildpack-frontend-build-pipeline-new       enabled: false       buildTaskName:
      buildpack-frontend-new       buildTaskSteps:         - name: hello1           image:
      node:14           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world1"          - name: hello2           image:
      node:15           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world2" ``` '
    digest: 2c484dd42dbc85a51a6caf6a8d76fcb5252756c21d809e754a6a260798ce1ade
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.12/saritasa-tekton-pipelines-0.1.12.tgz
    version: 0.1.12
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2022-03-05T06:08:43.535801271Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: 'A Helm chart for Tekton Pipelines  Implements: - common tekton tasks
      - common tekton pipelines - common tekton trigger templates - common tekton
      trigger bindings  Implemented pipelines include: - buildpack based pipelines
      based on generator template (php, python, frontend, nodejs, ruby, go) - kaniko
      pipeline - wordpress pipeline  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then if you want to support only frontend and django pipelines based on
      buildpack without any script modifications:  ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-pipelines   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "60" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-pipelines     helm:       values: |         buildpacks:           enabled:
      true           generate:             buildpackFrontendBuildPipeline:               enabled:
      true              buildpackDjangoBuildPipeline:               enabled: true      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ```  If you want to modify the behavior of the build step
      you can easily do that by redefining steps you want to run prior to running
      the `build` step of the associated buildpack pipeline. You can create multiple
      versions of pipelines as a result. Just make sure to give them a different name  an
      example:  ```yaml buildpacks:   enabled: true   generate:     buildpackFrontendBuildPipelineNew:       name:
      buildpack-frontend-build-pipeline-new       enabled: false       buildTaskName:
      buildpack-frontend-new       buildTaskSteps:         - name: hello1           image:
      node:14           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world1"          - name: hello2           image:
      node:15           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world2" ``` '
    digest: c040b0afab9635079dde610c088582e918ad80f97571decfb020ecc78c671fd3
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.11/saritasa-tekton-pipelines-0.1.11.tgz
    version: 0.1.11
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2022-02-28T10:21:19.196032038Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: 'A Helm chart for Tekton Pipelines  Implements: - common tekton tasks
      - common tekton pipelines - common tekton trigger templates - common tekton
      trigger bindings  Implemented pipelines include: - buildpack based pipelines
      based on generator template (php, python, frontend, nodejs, ruby, go) - kaniko
      pipeline - wordpress pipeline  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then if you want to support only frontend and django pipelines based on
      buildpack without any script modifications:  ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-pipelines   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "60" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-pipelines     helm:       values: |         buildpacks:           enabled:
      true           generate:             buildpackFrontendBuildPipeline:               enabled:
      true              buildpackDjangoBuildPipeline:               enabled: true      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ```  If you want to modify the behavior of the build step
      you can easily do that by redefining steps you want to run prior to running
      the `build` step of the associated buildpack pipeline. You can create multiple
      versions of pipelines as a result. Just make sure to give them a different name  an
      example:  ```yaml buildpacks:   enabled: true   generate:     buildpackFrontendBuildPipelineNew:       name:
      buildpack-frontend-build-pipeline-new       enabled: false       buildTaskName:
      buildpack-frontend-new       buildTaskSteps:         - name: hello1           image:
      node:14           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world1"          - name: hello2           image:
      node:15           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world2" ``` '
    digest: 520a95e32277abe1abed857417814c772cebeced6c8589aa7e7bc487a78a9350
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.10/saritasa-tekton-pipelines-0.1.10.tgz
    version: 0.1.10
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2022-02-19T08:32:23.425454825Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: 'A Helm chart for Tekton Pipelines  Implements: - common tekton tasks
      - common tekton pipelines - common tekton trigger templates - common tekton
      trigger bindings  Implemented pipelines include: - buildpack based pipelines
      based on generator template (php, python, frontend, nodejs, ruby, go) - kaniko
      pipeline - wordpress pipeline  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then if you want to support only frontend and django pipelines based on
      buildpack without any script modifications:  ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-pipelines   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "60" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-pipelines     helm:       values: |         buildpacks:           enabled:
      true           generate:             buildpackFrontendBuildPipeline:               enabled:
      true              buildpackDjangoBuildPipeline:               enabled: true      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ```  If you want to modify the behavior of the build step
      you can easily do that by redefining steps you want to run prior to running
      the `build` step of the associated buildpack pipeline. You can create multiple
      versions of pipelines as a result. Just make sure to give them a different name  an
      example:  ```yaml buildpacks:   enabled: true   generate:     buildpackFrontendBuildPipelineNew:       name:
      buildpack-frontend-build-pipeline-new       enabled: false       buildTaskName:
      buildpack-frontend-new       buildTaskSteps:         - name: hello1           image:
      node:14           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world1"          - name: hello2           image:
      node:15           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world2" ``` '
    digest: 725117c9811019435b4d9e8e92a837fbcc6c9d9889c8379d8dcb3b49cacde732
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.9/saritasa-tekton-pipelines-0.1.9.tgz
    version: 0.1.9
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2022-02-04T13:49:06.795751201Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: 'A Helm chart for Tekton Pipelines  Implements: - common tekton tasks
      - common tekton pipelines - common tekton trigger templates - common tekton
      trigger bindings  Implemented pipelines include: - buildpack based pipelines
      based on generator template (php, python, frontend, nodejs, ruby, go) - kaniko
      pipeline - wordpress pipeline  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then if you want to support only frontend and django pipelines based on
      buildpack without any script modifications:  ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-pipelines   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "60" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-pipelines     helm:       values: |         buildpacks:           enabled:
      true           generate:             buildpackFrontendBuildPipeline:               enabled:
      true              buildpackDjangoBuildPipeline:               enabled: true      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ```  If you want to modify the behavior of the build step
      you can easily do that by redefining steps you want to run prior to running
      the `build` step of the associated buildpack pipeline. You can create multiple
      versions of pipelines as a result. Just make sure to give them a different name  an
      example:  ```yaml buildpacks:   enabled: true   generate:     buildpackFrontendBuildPipelineNew:       name:
      buildpack-frontend-build-pipeline-new       enabled: false       buildTaskName:
      buildpack-frontend-new       buildTaskSteps:         - name: hello1           image:
      node:14           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world1"          - name: hello2           image:
      node:15           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world2" ``` '
    digest: 1a02b1601a2e2de4fbf41e20555dccf40ccac65ff41ad496f2cb59455818405d
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.8/saritasa-tekton-pipelines-0.1.8.tgz
    version: 0.1.8
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2021-11-26T04:34:07.812372201Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: 'A Helm chart for Tekton Pipelines  Implements: - common tekton tasks
      - common tekton pipelines - common tekton trigger templates - common tekton
      trigger bindings  Implemented pipelines include: - buildpack based pipelines
      based on generator template (php, python, frontend, nodejs, ruby, go) - kaniko
      pipeline - wordpress pipeline  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then if you want to support only frontend and django pipelines based on
      buildpack without any script modifications:  ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-pipelines   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "60" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-pipelines     helm:       values: |         buildpacks:           enabled:
      true           generate:             buildpackFrontendBuildPipeline:               enabled:
      true              buildpackDjangoBuildPipeline:               enabled: true      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ```  If you want to modify the behavior of the build step
      you can easily do that by redefining steps you want to run prior to running
      the `build` step of the associated buildpack pipeline. You can create multiple
      versions of pipelines as a result. Just make sure to give them a different name  an
      example:  ```yaml buildpacks:   enabled: true   generate:     buildpackFrontendBuildPipelineNew:       name:
      buildpack-frontend-build-pipeline-new       enabled: false       buildTaskName:
      buildpack-frontend-new       buildTaskSteps:         - name: hello1           image:
      node:14           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world1"          - name: hello2           image:
      node:15           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world2" ``` '
    digest: df7757fd90bef5618e9d21c08933a2af3231dd5eaec4d04fd0457eeb7e6c7957
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.7/saritasa-tekton-pipelines-0.1.7.tgz
    version: 0.1.7
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2021-11-20T03:24:17.37622812Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: 'A Helm chart for Tekton Pipelines  Implements: - common tekton tasks
      - common tekton pipelines - common tekton trigger templates - common tekton
      trigger bindings  Implemented pipelines include: - buildpack based pipelines
      based on generator template (php, python, frontend, nodejs, ruby, go) - kaniko
      pipeline - wordpress pipeline  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then if you want to support only frontend and django pipelines based on
      buildpack without any script modifications:  ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-pipelines   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "60" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-pipelines     helm:       values: |         buildpacks:           enabled:
      true           generate:             buildpackFrontendBuildPipeline:               enabled:
      true              buildpackDjangoBuildPipeline:               enabled: true      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ```  If you want to modify the behavior of the build step
      you can easily do that by redefining steps you want to run prior to running
      the `build` step of the associated buildpack pipeline. You can create multiple
      versions of pipelines as a result. Just make sure to give them a different name  an
      example:  ```yaml buildpacks:   enabled: true   generate:     buildpackFrontendBuildPipelineNew:       name:
      buildpack-frontend-build-pipeline-new       enabled: false       buildTaskName:
      buildpack-frontend-new       buildTaskSteps:         - name: hello1           image:
      node:14           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world1"          - name: hello2           image:
      node:15           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world2" ``` '
    digest: 3885a903353fed7d8df51ef3fca32fdcac4505e9f277f03b30a0b53868f2d66a
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.6/saritasa-tekton-pipelines-0.1.6.tgz
    version: 0.1.6
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2021-11-19T22:46:36.237008803Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: 'A Helm chart for Tekton Pipelines  Implements: - common tekton tasks
      - common tekton pipelines - common tekton trigger templates - common tekton
      trigger bindings  Implemented pipelines include: - buildpack based pipelines
      based on generator template (php, python, frontend, nodejs, ruby, go) - kaniko
      pipeline - wordpress pipeline  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then if you want to support only frontend and django pipelines based on
      buildpack without any script modifications:  ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-pipelines   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "60" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-pipelines     helm:       values: |         buildpacks:           enabled:
      true           generate:             buildpackFrontendBuildPipeline:               enabled:
      true              buildpackDjangoBuildPipeline:               enabled: true      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ```  If you want to modify the behavior of the build step
      you can easily do that by redefining steps you want to run prior to running
      the `build` step of the associated buildpack pipeline. You can create multiple
      versions of pipelines as a result. Just make sure to give them a different name  an
      example:  ```yaml buildpacks:   enabled: true   generate:     buildpackFrontendBuildPipelineNew:       name:
      buildpack-frontend-build-pipeline-new       enabled: false       buildTaskName:
      buildpack-frontend-new       buildTaskSteps:         - name: hello1           image:
      node:14           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world1"          - name: hello2           image:
      node:15           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world2" ``` '
    digest: 5fc31117225db9ad24bf849ec6154dae636dea2d79aba0ffd61929d29ee6141b
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.5/saritasa-tekton-pipelines-0.1.5.tgz
    version: 0.1.5
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2021-11-03T03:13:37.810119195Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: 'A Helm chart for Tekton Pipelines  Implements: - common tekton tasks
      - common tekton pipelines - common tekton trigger templates - common tekton
      trigger bindings  Implemented pipelines include: - buildpack based pipelines
      based on generator template (php, python, frontend, nodejs, ruby, go) - kaniko
      pipeline - wordpress pipeline  ## `example usage with argocd`  Install the chart:  ```
      helm repo add saritasa https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      ```  then if you want to support only frontend and django pipelines based on
      buildpack without any script modifications:  ```yaml apiVersion: argoproj.io/v1alpha1
      kind: Application metadata:   name: tekton-pipelines   namespace: argo-cd   finalizers:   -
      resources-finalizer.argocd.argoproj.io   annotations:     argocd.argoproj.io/sync-options:
      SkipDryRunOnMissingResource=true     argocd.argoproj.io/sync-wave: "60" spec:   destination:     server:
      https://kubernetes.default.svc     namespace: ci   project: default   source:     chart:
      saritasa-tekton-pipelines     helm:       values: |         buildpacks:           enabled:
      true           generate:             buildpackFrontendBuildPipeline:               enabled:
      true              buildpackDjangoBuildPipeline:               enabled: true      repoURL:
      https://saritasa-nest.github.io/saritasa-devops-helm-charts/     targetRevision:
      "0.1.4"   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       -
      CreateNamespace=true ```  If you want to modify the behavior of the build step
      you can easily do that by redefining steps you want to run prior to running
      the `build` step of the associated buildpack pipeline. You can create multiple
      versions of pipelines as a result. Just make sure to give them a different name  an
      example:  ```yaml buildpacks:   enabled: true   generate:     buildpackFrontendBuildPipelineNew:       name:
      buildpack-frontend-build-pipeline-new       enabled: false       buildTaskName:
      buildpack-frontend-new       buildTaskSteps:         - name: hello1           image:
      node:14           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world1"          - name: hello2           image:
      node:15           imagePullPolicy: IfNotPresent           workingDir: $(resources.inputs.app.path)           script:
      |             #!/bin/bash             echo "hello world2" ``` '
    digest: f262ade0f7535582f02f25092d5d86ad94fd0193454f20809b8c914d4b749ed3
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.4/saritasa-tekton-pipelines-0.1.4.tgz
    version: 0.1.4
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2021-10-31T16:48:57.980479692Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: A Helm chart for Tekton Pipelines
    digest: 7284b4cb277f87c291c26a4fec924043f3800f076f7802f77d909b3b90f301ce
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.3/saritasa-tekton-pipelines-0.1.3.tgz
    version: 0.1.3
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2021-10-31T15:58:43.57869363Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: A Helm chart for Tekton Pipelines
    digest: fa1d7a463ade656aac0b18e33155e5aee245a174d0a14d6cb589ee727ded8a7e
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.2/saritasa-tekton-pipelines-0.1.2.tgz
    version: 0.1.2
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2021-10-26T00:42:48.16560019Z"
    dependencies:
    - condition: saritasa-tekton.enabled
      name: saritasa-tekton
      repository: https://saritasa-nest.github.io/saritasa-devops-helm-charts/
      version: ~0.1.x
    description: A Helm chart for Tekton Pipelines
    digest: 5aab90ccc2829fc809e7c58987d6f3d3b3aebbd6d7ea5541c0596ba284e099e6
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.1/saritasa-tekton-pipelines-0.1.1.tgz
    version: 0.1.1
  - apiVersion: v2
    appVersion: v0.28.2
    created: "2021-10-25T23:32:30.012335639Z"
    description: A Helm chart for Tekton Pipelines
    digest: 26ed909da55b00d2b6e3a2c497ea5cd2145fcd0f1bc901c4c3997da20d2965d1
    maintainers:
    - name: Saritasa
      url: https://www.saritasa.com/
    name: saritasa-tekton-pipelines
    type: application
    urls:
    - https://github.com/saritasa-nest/saritasa-devops-helm-charts/releases/download/saritasa-tekton-pipelines-0.1.0/saritasa-tekton-pipelines-0.1.0.tgz
    version: 0.1.0
generated: "2022-03-25T05:38:50.584002236Z"
